/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1082.0, "minX": 0.0, "maxY": 48610.0, "series": [{"data": [[0.0, 1082.0], [0.1, 1122.0], [0.2, 1132.0], [0.3, 1142.0], [0.4, 1146.0], [0.5, 1151.0], [0.6, 1155.0], [0.7, 1157.0], [0.8, 1160.0], [0.9, 1163.0], [1.0, 1165.0], [1.1, 1169.0], [1.2, 1173.0], [1.3, 1178.0], [1.4, 1182.0], [1.5, 1184.0], [1.6, 1188.0], [1.7, 1191.0], [1.8, 1195.0], [1.9, 1199.0], [2.0, 1208.0], [2.1, 1216.0], [2.2, 1220.0], [2.3, 1239.0], [2.4, 1247.0], [2.5, 1263.0], [2.6, 1292.0], [2.7, 1332.0], [2.8, 1365.0], [2.9, 1383.0], [3.0, 1420.0], [3.1, 1438.0], [3.2, 1452.0], [3.3, 1461.0], [3.4, 1466.0], [3.5, 1475.0], [3.6, 1490.0], [3.7, 1500.0], [3.8, 1506.0], [3.9, 1513.0], [4.0, 1518.0], [4.1, 1521.0], [4.2, 1523.0], [4.3, 1525.0], [4.4, 1528.0], [4.5, 1531.0], [4.6, 1533.0], [4.7, 1536.0], [4.8, 1537.0], [4.9, 1540.0], [5.0, 1543.0], [5.1, 1545.0], [5.2, 1547.0], [5.3, 1550.0], [5.4, 1552.0], [5.5, 1553.0], [5.6, 1554.0], [5.7, 1555.0], [5.8, 1557.0], [5.9, 1558.0], [6.0, 1559.0], [6.1, 1560.0], [6.2, 1561.0], [6.3, 1562.0], [6.4, 1562.0], [6.5, 1563.0], [6.6, 1564.0], [6.7, 1565.0], [6.8, 1566.0], [6.9, 1567.0], [7.0, 1568.0], [7.1, 1569.0], [7.2, 1570.0], [7.3, 1571.0], [7.4, 1572.0], [7.5, 1574.0], [7.6, 1575.0], [7.7, 1575.0], [7.8, 1577.0], [7.9, 1578.0], [8.0, 1579.0], [8.1, 1582.0], [8.2, 1583.0], [8.3, 1584.0], [8.4, 1587.0], [8.5, 1591.0], [8.6, 1592.0], [8.7, 1596.0], [8.8, 1597.0], [8.9, 1601.0], [9.0, 1604.0], [9.1, 1608.0], [9.2, 1612.0], [9.3, 1616.0], [9.4, 1623.0], [9.5, 1629.0], [9.6, 1637.0], [9.7, 1641.0], [9.8, 1644.0], [9.9, 1646.0], [10.0, 1648.0], [10.1, 1649.0], [10.2, 1651.0], [10.3, 1652.0], [10.4, 1653.0], [10.5, 1654.0], [10.6, 1655.0], [10.7, 1656.0], [10.8, 1657.0], [10.9, 1657.0], [11.0, 1658.0], [11.1, 1659.0], [11.2, 1659.0], [11.3, 1660.0], [11.4, 1660.0], [11.5, 1661.0], [11.6, 1661.0], [11.7, 1662.0], [11.8, 1662.0], [11.9, 1663.0], [12.0, 1663.0], [12.1, 1664.0], [12.2, 1665.0], [12.3, 1665.0], [12.4, 1665.0], [12.5, 1666.0], [12.6, 1666.0], [12.7, 1667.0], [12.8, 1667.0], [12.9, 1668.0], [13.0, 1668.0], [13.1, 1669.0], [13.2, 1669.0], [13.3, 1670.0], [13.4, 1670.0], [13.5, 1671.0], [13.6, 1671.0], [13.7, 1671.0], [13.8, 1672.0], [13.9, 1672.0], [14.0, 1673.0], [14.1, 1674.0], [14.2, 1674.0], [14.3, 1675.0], [14.4, 1675.0], [14.5, 1676.0], [14.6, 1676.0], [14.7, 1678.0], [14.8, 1678.0], [14.9, 1679.0], [15.0, 1679.0], [15.1, 1680.0], [15.2, 1682.0], [15.3, 1683.0], [15.4, 1684.0], [15.5, 1687.0], [15.6, 1689.0], [15.7, 1692.0], [15.8, 1698.0], [15.9, 1704.0], [16.0, 1711.0], [16.1, 1728.0], [16.2, 1750.0], [16.3, 1756.0], [16.4, 1761.0], [16.5, 1765.0], [16.6, 1768.0], [16.7, 1772.0], [16.8, 1777.0], [16.9, 1784.0], [17.0, 1793.0], [17.1, 1819.0], [17.2, 1849.0], [17.3, 1870.0], [17.4, 1994.0], [17.5, 2166.0], [17.6, 2428.0], [17.7, 2596.0], [17.8, 2738.0], [17.9, 2893.0], [18.0, 3005.0], [18.1, 3196.0], [18.2, 3225.0], [18.3, 3273.0], [18.4, 3291.0], [18.5, 3304.0], [18.6, 3311.0], [18.7, 3315.0], [18.8, 3331.0], [18.9, 3344.0], [19.0, 3370.0], [19.1, 3385.0], [19.2, 3398.0], [19.3, 3403.0], [19.4, 3411.0], [19.5, 3416.0], [19.6, 3421.0], [19.7, 3424.0], [19.8, 3430.0], [19.9, 3433.0], [20.0, 3436.0], [20.1, 3441.0], [20.2, 3445.0], [20.3, 3452.0], [20.4, 3456.0], [20.5, 3459.0], [20.6, 3465.0], [20.7, 3468.0], [20.8, 3473.0], [20.9, 3478.0], [21.0, 3481.0], [21.1, 3484.0], [21.2, 3487.0], [21.3, 3489.0], [21.4, 3490.0], [21.5, 3491.0], [21.6, 3492.0], [21.7, 3493.0], [21.8, 3494.0], [21.9, 3494.0], [22.0, 3495.0], [22.1, 3495.0], [22.2, 3496.0], [22.3, 3497.0], [22.4, 3497.0], [22.5, 3498.0], [22.6, 3499.0], [22.7, 3499.0], [22.8, 3500.0], [22.9, 3500.0], [23.0, 3500.0], [23.1, 3501.0], [23.2, 3501.0], [23.3, 3501.0], [23.4, 3502.0], [23.5, 3502.0], [23.6, 3502.0], [23.7, 3503.0], [23.8, 3503.0], [23.9, 3503.0], [24.0, 3504.0], [24.1, 3504.0], [24.2, 3504.0], [24.3, 3504.0], [24.4, 3505.0], [24.5, 3505.0], [24.6, 3505.0], [24.7, 3505.0], [24.8, 3506.0], [24.9, 3506.0], [25.0, 3506.0], [25.1, 3506.0], [25.2, 3507.0], [25.3, 3507.0], [25.4, 3507.0], [25.5, 3507.0], [25.6, 3508.0], [25.7, 3508.0], [25.8, 3508.0], [25.9, 3508.0], [26.0, 3509.0], [26.1, 3509.0], [26.2, 3509.0], [26.3, 3509.0], [26.4, 3510.0], [26.5, 3510.0], [26.6, 3510.0], [26.7, 3510.0], [26.8, 3511.0], [26.9, 3511.0], [27.0, 3511.0], [27.1, 3511.0], [27.2, 3511.0], [27.3, 3512.0], [27.4, 3512.0], [27.5, 3512.0], [27.6, 3512.0], [27.7, 3513.0], [27.8, 3513.0], [27.9, 3513.0], [28.0, 3513.0], [28.1, 3513.0], [28.2, 3514.0], [28.3, 3514.0], [28.4, 3514.0], [28.5, 3514.0], [28.6, 3514.0], [28.7, 3515.0], [28.8, 3515.0], [28.9, 3515.0], [29.0, 3516.0], [29.1, 3516.0], [29.2, 3516.0], [29.3, 3516.0], [29.4, 3517.0], [29.5, 3517.0], [29.6, 3517.0], [29.7, 3517.0], [29.8, 3518.0], [29.9, 3518.0], [30.0, 3518.0], [30.1, 3518.0], [30.2, 3519.0], [30.3, 3519.0], [30.4, 3519.0], [30.5, 3520.0], [30.6, 3520.0], [30.7, 3520.0], [30.8, 3520.0], [30.9, 3521.0], [31.0, 3521.0], [31.1, 3522.0], [31.2, 3522.0], [31.3, 3522.0], [31.4, 3523.0], [31.5, 3523.0], [31.6, 3524.0], [31.7, 3525.0], [31.8, 3525.0], [31.9, 3526.0], [32.0, 3527.0], [32.1, 3527.0], [32.2, 3529.0], [32.3, 3530.0], [32.4, 3531.0], [32.5, 3532.0], [32.6, 3534.0], [32.7, 3536.0], [32.8, 3538.0], [32.9, 3544.0], [33.0, 3548.0], [33.1, 3556.0], [33.2, 3563.0], [33.3, 3574.0], [33.4, 3580.0], [33.5, 3587.0], [33.6, 3593.0], [33.7, 3595.0], [33.8, 3601.0], [33.9, 3604.0], [34.0, 3606.0], [34.1, 3607.0], [34.2, 3609.0], [34.3, 3611.0], [34.4, 3613.0], [34.5, 3614.0], [34.6, 3617.0], [34.7, 3620.0], [34.8, 3623.0], [34.9, 3625.0], [35.0, 3631.0], [35.1, 3642.0], [35.2, 3657.0], [35.3, 3691.0], [35.4, 3700.0], [35.5, 3703.0], [35.6, 3706.0], [35.7, 3709.0], [35.8, 3710.0], [35.9, 3712.0], [36.0, 3714.0], [36.1, 3716.0], [36.2, 3717.0], [36.3, 3719.0], [36.4, 3721.0], [36.5, 3723.0], [36.6, 3725.0], [36.7, 3728.0], [36.8, 3784.0], [36.9, 3890.0], [37.0, 4939.0], [37.1, 5713.0], [37.2, 5743.0], [37.3, 6062.0], [37.4, 6220.0], [37.5, 6397.0], [37.6, 6505.0], [37.7, 6610.0], [37.8, 6786.0], [37.9, 6888.0], [38.0, 6975.0], [38.1, 7031.0], [38.2, 7058.0], [38.3, 7182.0], [38.4, 7235.0], [38.5, 7292.0], [38.6, 7302.0], [38.7, 7314.0], [38.8, 7355.0], [38.9, 7460.0], [39.0, 7521.0], [39.1, 7577.0], [39.2, 7585.0], [39.3, 7599.0], [39.4, 7619.0], [39.5, 7702.0], [39.6, 7713.0], [39.7, 7736.0], [39.8, 7788.0], [39.9, 7794.0], [40.0, 7811.0], [40.1, 7817.0], [40.2, 7834.0], [40.3, 7913.0], [40.4, 7929.0], [40.5, 7953.0], [40.6, 7992.0], [40.7, 8004.0], [40.8, 8012.0], [40.9, 8016.0], [41.0, 8020.0], [41.1, 8024.0], [41.2, 8033.0], [41.3, 8046.0], [41.4, 8091.0], [41.5, 8113.0], [41.6, 8142.0], [41.7, 8206.0], [41.8, 8214.0], [41.9, 8229.0], [42.0, 8305.0], [42.1, 8329.0], [42.2, 8415.0], [42.3, 8500.0], [42.4, 8606.0], [42.5, 8613.0], [42.6, 8618.0], [42.7, 8621.0], [42.8, 8623.0], [42.9, 8624.0], [43.0, 8626.0], [43.1, 8627.0], [43.2, 8629.0], [43.3, 8631.0], [43.4, 8633.0], [43.5, 8635.0], [43.6, 8637.0], [43.7, 8638.0], [43.8, 8641.0], [43.9, 8645.0], [44.0, 8650.0], [44.1, 8656.0], [44.2, 8659.0], [44.3, 8666.0], [44.4, 8670.0], [44.5, 8674.0], [44.6, 8683.0], [44.7, 8692.0], [44.8, 8700.0], [44.9, 8706.0], [45.0, 8713.0], [45.1, 8718.0], [45.2, 8722.0], [45.3, 8724.0], [45.4, 8726.0], [45.5, 8728.0], [45.6, 8730.0], [45.7, 8733.0], [45.8, 8734.0], [45.9, 8736.0], [46.0, 8738.0], [46.1, 8741.0], [46.2, 8743.0], [46.3, 8747.0], [46.4, 8754.0], [46.5, 8761.0], [46.6, 8769.0], [46.7, 8774.0], [46.8, 8781.0], [46.9, 8787.0], [47.0, 8792.0], [47.1, 8797.0], [47.2, 8801.0], [47.3, 8805.0], [47.4, 8809.0], [47.5, 8811.0], [47.6, 8813.0], [47.7, 8815.0], [47.8, 8817.0], [47.9, 8819.0], [48.0, 8820.0], [48.1, 8821.0], [48.2, 8822.0], [48.3, 8823.0], [48.4, 8823.0], [48.5, 8824.0], [48.6, 8825.0], [48.7, 8825.0], [48.8, 8826.0], [48.9, 8827.0], [49.0, 8828.0], [49.1, 8828.0], [49.2, 8829.0], [49.3, 8829.0], [49.4, 8830.0], [49.5, 8830.0], [49.6, 8830.0], [49.7, 8831.0], [49.8, 8832.0], [49.9, 8832.0], [50.0, 8832.0], [50.1, 8833.0], [50.2, 8833.0], [50.3, 8834.0], [50.4, 8834.0], [50.5, 8834.0], [50.6, 8835.0], [50.7, 8835.0], [50.8, 8836.0], [50.9, 8836.0], [51.0, 8836.0], [51.1, 8837.0], [51.2, 8837.0], [51.3, 8838.0], [51.4, 8838.0], [51.5, 8839.0], [51.6, 8839.0], [51.7, 8840.0], [51.8, 8840.0], [51.9, 8841.0], [52.0, 8841.0], [52.1, 8842.0], [52.2, 8843.0], [52.3, 8843.0], [52.4, 8844.0], [52.5, 8845.0], [52.6, 8845.0], [52.7, 8846.0], [52.8, 8847.0], [52.9, 8848.0], [53.0, 8849.0], [53.1, 8850.0], [53.2, 8850.0], [53.3, 8851.0], [53.4, 8853.0], [53.5, 8856.0], [53.6, 8859.0], [53.7, 8891.0], [53.8, 8911.0], [53.9, 8927.0], [54.0, 8933.0], [54.1, 8939.0], [54.2, 8942.0], [54.3, 8945.0], [54.4, 8951.0], [54.5, 8967.0], [54.6, 8980.0], [54.7, 9024.0], [54.8, 9037.0], [54.9, 9043.0], [55.0, 9051.0], [55.1, 9113.0], [55.2, 9204.0], [55.3, 9253.0], [55.4, 9415.0], [55.5, 9541.0], [55.6, 9556.0], [55.7, 9578.0], [55.8, 9759.0], [55.9, 12321.0], [56.0, 16434.0], [56.1, 24424.0], [56.2, 25025.0], [56.3, 26252.0], [56.4, 27238.0], [56.5, 27962.0], [56.6, 28392.0], [56.7, 28415.0], [56.8, 28853.0], [56.9, 28872.0], [57.0, 28883.0], [57.1, 28892.0], [57.2, 28904.0], [57.3, 28920.0], [57.4, 29261.0], [57.5, 29342.0], [57.6, 29376.0], [57.7, 29395.0], [57.8, 30027.0], [57.9, 30098.0], [58.0, 30801.0], [58.1, 30813.0], [58.2, 30847.0], [58.3, 30859.0], [58.4, 31136.0], [58.5, 32388.0], [58.6, 32406.0], [58.7, 32439.0], [58.8, 32500.0], [58.9, 32510.0], [59.0, 32519.0], [59.1, 32527.0], [59.2, 32534.0], [59.3, 32541.0], [59.4, 32546.0], [59.5, 32550.0], [59.6, 32555.0], [59.7, 32569.0], [59.8, 32579.0], [59.9, 32620.0], [60.0, 32648.0], [60.1, 32672.0], [60.2, 32683.0], [60.3, 32688.0], [60.4, 32691.0], [60.5, 32695.0], [60.6, 32697.0], [60.7, 32699.0], [60.8, 32703.0], [60.9, 32705.0], [61.0, 32708.0], [61.1, 32710.0], [61.2, 32713.0], [61.3, 32715.0], [61.4, 32718.0], [61.5, 32721.0], [61.6, 32723.0], [61.7, 32725.0], [61.8, 32730.0], [61.9, 32732.0], [62.0, 32734.0], [62.1, 32736.0], [62.2, 32738.0], [62.3, 32739.0], [62.4, 32742.0], [62.5, 32742.0], [62.6, 32744.0], [62.7, 32746.0], [62.8, 32747.0], [62.9, 32748.0], [63.0, 32750.0], [63.1, 32753.0], [63.2, 32755.0], [63.3, 32756.0], [63.4, 32757.0], [63.5, 32760.0], [63.6, 32761.0], [63.7, 32762.0], [63.8, 32764.0], [63.9, 32767.0], [64.0, 32769.0], [64.1, 32772.0], [64.2, 32773.0], [64.3, 32776.0], [64.4, 32777.0], [64.5, 32779.0], [64.6, 32780.0], [64.7, 32781.0], [64.8, 32783.0], [64.9, 32784.0], [65.0, 32786.0], [65.1, 32787.0], [65.2, 32788.0], [65.3, 32789.0], [65.4, 32790.0], [65.5, 32791.0], [65.6, 32791.0], [65.7, 32792.0], [65.8, 32793.0], [65.9, 32794.0], [66.0, 32795.0], [66.1, 32795.0], [66.2, 32796.0], [66.3, 32797.0], [66.4, 32797.0], [66.5, 32798.0], [66.6, 32799.0], [66.7, 32799.0], [66.8, 32800.0], [66.9, 32801.0], [67.0, 32801.0], [67.1, 32802.0], [67.2, 32802.0], [67.3, 32803.0], [67.4, 32803.0], [67.5, 32804.0], [67.6, 32805.0], [67.7, 32806.0], [67.8, 32806.0], [67.9, 32807.0], [68.0, 32808.0], [68.1, 32809.0], [68.2, 32810.0], [68.3, 32811.0], [68.4, 32812.0], [68.5, 32814.0], [68.6, 32815.0], [68.7, 32816.0], [68.8, 32817.0], [68.9, 32819.0], [69.0, 32820.0], [69.1, 32821.0], [69.2, 32822.0], [69.3, 32825.0], [69.4, 32827.0], [69.5, 32828.0], [69.6, 32829.0], [69.7, 32831.0], [69.8, 32833.0], [69.9, 32836.0], [70.0, 32837.0], [70.1, 32838.0], [70.2, 32839.0], [70.3, 32841.0], [70.4, 32843.0], [70.5, 32844.0], [70.6, 32845.0], [70.7, 32847.0], [70.8, 32848.0], [70.9, 32849.0], [71.0, 32850.0], [71.1, 32851.0], [71.2, 32853.0], [71.3, 32853.0], [71.4, 32855.0], [71.5, 32857.0], [71.6, 32858.0], [71.7, 32860.0], [71.8, 32861.0], [71.9, 32862.0], [72.0, 32864.0], [72.1, 32866.0], [72.2, 32868.0], [72.3, 32870.0], [72.4, 32872.0], [72.5, 32873.0], [72.6, 32876.0], [72.7, 32877.0], [72.8, 32878.0], [72.9, 32880.0], [73.0, 32881.0], [73.1, 32883.0], [73.2, 32884.0], [73.3, 32885.0], [73.4, 32886.0], [73.5, 32887.0], [73.6, 32889.0], [73.7, 32890.0], [73.8, 32890.0], [73.9, 32891.0], [74.0, 32892.0], [74.1, 32893.0], [74.2, 32894.0], [74.3, 32896.0], [74.4, 32896.0], [74.5, 32897.0], [74.6, 32899.0], [74.7, 32900.0], [74.8, 32901.0], [74.9, 32902.0], [75.0, 32903.0], [75.1, 32904.0], [75.2, 32905.0], [75.3, 32906.0], [75.4, 32908.0], [75.5, 32909.0], [75.6, 32911.0], [75.7, 32913.0], [75.8, 32915.0], [75.9, 32918.0], [76.0, 32923.0], [76.1, 32926.0], [76.2, 32960.0], [76.3, 33029.0], [76.4, 33051.0], [76.5, 33089.0], [76.6, 33099.0], [76.7, 33104.0], [76.8, 33107.0], [76.9, 33110.0], [77.0, 33114.0], [77.1, 33118.0], [77.2, 33127.0], [77.3, 33154.0], [77.4, 33212.0], [77.5, 33917.0], [77.6, 33941.0], [77.7, 34136.0], [77.8, 34238.0], [77.9, 35037.0], [78.0, 35061.0], [78.1, 35754.0], [78.2, 35765.0], [78.3, 35777.0], [78.4, 35986.0], [78.5, 36134.0], [78.6, 37482.0], [78.7, 37509.0], [78.8, 37570.0], [78.9, 37597.0], [79.0, 37677.0], [79.1, 37712.0], [79.2, 37740.0], [79.3, 38027.0], [79.4, 38110.0], [79.5, 38124.0], [79.6, 38152.0], [79.7, 38303.0], [79.8, 38319.0], [79.9, 38331.0], [80.0, 38338.0], [80.1, 38448.0], [80.2, 38501.0], [80.3, 38513.0], [80.4, 38521.0], [80.5, 38580.0], [80.6, 38933.0], [80.7, 38943.0], [80.8, 38949.0], [80.9, 38955.0], [81.0, 38962.0], [81.1, 38976.0], [81.2, 38984.0], [81.3, 39017.0], [81.4, 39026.0], [81.5, 39049.0], [81.6, 39063.0], [81.7, 39094.0], [81.8, 39106.0], [81.9, 39131.0], [82.0, 39436.0], [82.1, 39683.0], [82.2, 39791.0], [82.3, 39849.0], [82.4, 39872.0], [82.5, 40195.0], [82.6, 40209.0], [82.7, 40230.0], [82.8, 40307.0], [82.9, 40325.0], [83.0, 40342.0], [83.1, 40359.0], [83.2, 40383.0], [83.3, 40403.0], [83.4, 40450.0], [83.5, 40468.0], [83.6, 40475.0], [83.7, 40485.0], [83.8, 40516.0], [83.9, 40576.0], [84.0, 40594.0], [84.1, 40619.0], [84.2, 40651.0], [84.3, 40675.0], [84.4, 40685.0], [84.5, 40694.0], [84.6, 40772.0], [84.7, 40784.0], [84.8, 40790.0], [84.9, 40797.0], [85.0, 40801.0], [85.1, 40806.0], [85.2, 40808.0], [85.3, 40811.0], [85.4, 40813.0], [85.5, 40815.0], [85.6, 40818.0], [85.7, 40822.0], [85.8, 40824.0], [85.9, 40825.0], [86.0, 40829.0], [86.1, 40833.0], [86.2, 40837.0], [86.3, 40843.0], [86.4, 40848.0], [86.5, 40856.0], [86.6, 40862.0], [86.7, 40868.0], [86.8, 40874.0], [86.9, 40876.0], [87.0, 40881.0], [87.1, 40885.0], [87.2, 40888.0], [87.3, 40892.0], [87.4, 40895.0], [87.5, 40899.0], [87.6, 40900.0], [87.7, 40903.0], [87.8, 40909.0], [87.9, 40911.0], [88.0, 40914.0], [88.1, 40917.0], [88.2, 40921.0], [88.3, 40925.0], [88.4, 40926.0], [88.5, 40929.0], [88.6, 40931.0], [88.7, 40933.0], [88.8, 40936.0], [88.9, 40939.0], [89.0, 40941.0], [89.1, 40943.0], [89.2, 40945.0], [89.3, 40948.0], [89.4, 40950.0], [89.5, 40952.0], [89.6, 40955.0], [89.7, 40958.0], [89.8, 40960.0], [89.9, 40963.0], [90.0, 40967.0], [90.1, 40970.0], [90.2, 40972.0], [90.3, 40974.0], [90.4, 40976.0], [90.5, 40978.0], [90.6, 40979.0], [90.7, 40981.0], [90.8, 40981.0], [90.9, 40982.0], [91.0, 40983.0], [91.1, 40984.0], [91.2, 40985.0], [91.3, 40986.0], [91.4, 40987.0], [91.5, 40987.0], [91.6, 40988.0], [91.7, 40989.0], [91.8, 40990.0], [91.9, 40991.0], [92.0, 40992.0], [92.1, 40993.0], [92.2, 40995.0], [92.3, 40995.0], [92.4, 40996.0], [92.5, 40997.0], [92.6, 40998.0], [92.7, 40999.0], [92.8, 41000.0], [92.9, 41001.0], [93.0, 41003.0], [93.1, 41005.0], [93.2, 41007.0], [93.3, 41008.0], [93.4, 41010.0], [93.5, 41014.0], [93.6, 41018.0], [93.7, 41022.0], [93.8, 41027.0], [93.9, 41033.0], [94.0, 41040.0], [94.1, 41050.0], [94.2, 41122.0], [94.3, 41143.0], [94.4, 41149.0], [94.5, 41153.0], [94.6, 41158.0], [94.7, 41162.0], [94.8, 41166.0], [94.9, 41169.0], [95.0, 41172.0], [95.1, 41175.0], [95.2, 41180.0], [95.3, 41183.0], [95.4, 41184.0], [95.5, 41187.0], [95.6, 41188.0], [95.7, 41191.0], [95.8, 41192.0], [95.9, 41193.0], [96.0, 41195.0], [96.1, 41196.0], [96.2, 41197.0], [96.3, 41199.0], [96.4, 41201.0], [96.5, 41202.0], [96.6, 41205.0], [96.7, 41207.0], [96.8, 41210.0], [96.9, 41213.0], [97.0, 41215.0], [97.1, 41219.0], [97.2, 41222.0], [97.3, 41226.0], [97.4, 41230.0], [97.5, 41233.0], [97.6, 41237.0], [97.7, 41243.0], [97.8, 41249.0], [97.9, 41265.0], [98.0, 41282.0], [98.1, 41295.0], [98.2, 41307.0], [98.3, 41362.0], [98.4, 41377.0], [98.5, 41401.0], [98.6, 41487.0], [98.7, 41516.0], [98.8, 41711.0], [98.9, 41758.0], [99.0, 41783.0], [99.1, 42268.0], [99.2, 42424.0], [99.3, 42449.0], [99.4, 42629.0], [99.5, 43385.0], [99.6, 44370.0], [99.7, 44933.0], [99.8, 45061.0], [99.9, 46110.0], [100.0, 48610.0]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1000.0, "maxY": 2842.0, "series": [{"data": [[34100.0, 30.0], [32900.0, 396.0], [33700.0, 2.0], [34500.0, 10.0], [36100.0, 6.0], [36500.0, 2.0], [34900.0, 4.0], [35700.0, 64.0], [36900.0, 2.0], [38900.0, 186.0], [38500.0, 88.0], [37300.0, 2.0], [37700.0, 52.0], [38100.0, 56.0], [40500.0, 62.0], [40100.0, 26.0], [40900.0, 1354.0], [39700.0, 28.0], [42900.0, 2.0], [42100.0, 2.0], [42500.0, 10.0], [41700.0, 64.0], [41300.0, 86.0], [44100.0, 2.0], [43700.0, 4.0], [44900.0, 34.0], [44500.0, 2.0], [43300.0, 4.0], [46900.0, 2.0], [45300.0, 2.0], [46100.0, 24.0], [47700.0, 2.0], [1000.0, 10.0], [1100.0, 482.0], [1200.0, 182.0], [1300.0, 84.0], [1400.0, 196.0], [1500.0, 1332.0], [1600.0, 1802.0], [1700.0, 320.0], [1800.0, 70.0], [1900.0, 20.0], [2000.0, 24.0], [2100.0, 8.0], [2200.0, 10.0], [2300.0, 4.0], [2400.0, 26.0], [2500.0, 8.0], [2600.0, 16.0], [2800.0, 18.0], [2700.0, 18.0], [2900.0, 20.0], [3000.0, 14.0], [3100.0, 16.0], [3300.0, 206.0], [3200.0, 86.0], [3400.0, 916.0], [3500.0, 2842.0], [3600.0, 414.0], [3700.0, 370.0], [3800.0, 24.0], [3900.0, 2.0], [4000.0, 2.0], [4300.0, 2.0], [4400.0, 2.0], [4600.0, 2.0], [4800.0, 8.0], [5100.0, 14.0], [4900.0, 14.0], [5200.0, 2.0], [5400.0, 2.0], [5800.0, 16.0], [5700.0, 32.0], [6000.0, 4.0], [6100.0, 14.0], [6300.0, 22.0], [6200.0, 18.0], [6400.0, 22.0], [6600.0, 16.0], [6500.0, 16.0], [6900.0, 30.0], [6700.0, 30.0], [6800.0, 20.0], [7100.0, 34.0], [7000.0, 54.0], [7200.0, 52.0], [7400.0, 32.0], [7300.0, 68.0], [7500.0, 90.0], [7600.0, 46.0], [7700.0, 114.0], [7900.0, 106.0], [7800.0, 84.0], [8000.0, 204.0], [8100.0, 56.0], [8400.0, 34.0], [8200.0, 82.0], [8500.0, 20.0], [8700.0, 616.0], [8600.0, 624.0], [8300.0, 48.0], [9000.0, 112.0], [9200.0, 40.0], [9100.0, 22.0], [8800.0, 1698.0], [8900.0, 238.0], [9500.0, 70.0], [9400.0, 20.0], [9700.0, 26.0], [9600.0, 6.0], [9300.0, 8.0], [9800.0, 8.0], [9900.0, 2.0], [10400.0, 2.0], [10900.0, 2.0], [12700.0, 2.0], [12300.0, 2.0], [12900.0, 2.0], [13000.0, 2.0], [12800.0, 2.0], [14300.0, 2.0], [14400.0, 2.0], [14700.0, 2.0], [15100.0, 2.0], [15500.0, 2.0], [15400.0, 4.0], [15900.0, 2.0], [16400.0, 4.0], [22200.0, 2.0], [24200.0, 4.0], [24400.0, 4.0], [24600.0, 2.0], [25400.0, 4.0], [25000.0, 4.0], [26400.0, 2.0], [26000.0, 4.0], [26200.0, 4.0], [26600.0, 4.0], [25800.0, 2.0], [27200.0, 10.0], [27000.0, 4.0], [27400.0, 2.0], [28000.0, 2.0], [28400.0, 26.0], [27800.0, 2.0], [28800.0, 110.0], [29200.0, 2.0], [29400.0, 6.0], [29000.0, 2.0], [30000.0, 40.0], [29800.0, 2.0], [30800.0, 104.0], [31600.0, 2.0], [32000.0, 6.0], [32400.0, 58.0], [32600.0, 218.0], [32800.0, 2056.0], [33200.0, 14.0], [34000.0, 4.0], [36000.0, 10.0], [36400.0, 2.0], [38000.0, 28.0], [38400.0, 34.0], [37200.0, 2.0], [38800.0, 2.0], [37600.0, 38.0], [39600.0, 8.0], [40800.0, 664.0], [40400.0, 126.0], [41600.0, 8.0], [41200.0, 478.0], [42800.0, 2.0], [42400.0, 40.0], [44400.0, 2.0], [44000.0, 4.0], [44800.0, 2.0], [45600.0, 4.0], [33100.0, 196.0], [33900.0, 32.0], [33500.0, 2.0], [34300.0, 2.0], [35100.0, 8.0], [35900.0, 26.0], [37500.0, 66.0], [37900.0, 4.0], [38300.0, 94.0], [39100.0, 44.0], [39500.0, 6.0], [40300.0, 132.0], [40700.0, 112.0], [41100.0, 548.0], [42300.0, 14.0], [42700.0, 2.0], [41900.0, 2.0], [41500.0, 22.0], [44700.0, 4.0], [44300.0, 8.0], [43900.0, 8.0], [43100.0, 4.0], [45900.0, 4.0], [45500.0, 2.0], [47500.0, 2.0], [22100.0, 2.0], [22500.0, 4.0], [23500.0, 2.0], [24300.0, 2.0], [24500.0, 14.0], [24100.0, 2.0], [23700.0, 4.0], [25100.0, 6.0], [25300.0, 2.0], [24700.0, 4.0], [25500.0, 2.0], [24900.0, 2.0], [26500.0, 4.0], [25700.0, 2.0], [27300.0, 4.0], [27500.0, 6.0], [26900.0, 4.0], [28300.0, 22.0], [27700.0, 4.0], [28500.0, 4.0], [27900.0, 2.0], [28100.0, 4.0], [29100.0, 2.0], [28700.0, 4.0], [28900.0, 56.0], [29300.0, 78.0], [30100.0, 2.0], [30700.0, 22.0], [29900.0, 2.0], [31300.0, 2.0], [31100.0, 2.0], [32300.0, 20.0], [31900.0, 14.0], [32700.0, 1558.0], [32500.0, 274.0], [34200.0, 18.0], [34600.0, 4.0], [33000.0, 100.0], [33400.0, 2.0], [33800.0, 12.0], [35800.0, 6.0], [35400.0, 2.0], [35000.0, 40.0], [38600.0, 2.0], [37400.0, 24.0], [37800.0, 2.0], [38200.0, 22.0], [39400.0, 34.0], [40200.0, 66.0], [39800.0, 54.0], [40600.0, 132.0], [39000.0, 128.0], [42200.0, 8.0], [41000.0, 366.0], [41800.0, 14.0], [43000.0, 2.0], [42600.0, 24.0], [41400.0, 40.0], [45000.0, 4.0], [44200.0, 2.0], [46200.0, 4.0], [46600.0, 2.0], [48600.0, 2.0]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 48600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 962.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24882.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 962.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24882.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.4666666666666655, "minX": 1.71889788E12, "maxY": 100.0, "series": [{"data": [[1.71890256E12, 80.0], [1.7189016E12, 80.0], [1.71890226E12, 80.0], [1.71890196E12, 80.0], [1.71890262E12, 80.0], [1.71890166E12, 80.0], [1.71890232E12, 80.0], [1.71890202E12, 80.0], [1.71890268E12, 68.96249999999998], [1.71890172E12, 80.0], [1.71890238E12, 80.0], [1.71890208E12, 80.0], [1.71890178E12, 80.0], [1.71890244E12, 80.0], [1.71890148E12, 36.00000000000001], [1.71890214E12, 80.0], [1.71890184E12, 80.0], [1.7189025E12, 80.0], [1.71890154E12, 80.0], [1.7189022E12, 80.0], [1.7189019E12, 80.0]], "isOverall": false, "label": "Directors by name D", "isController": false}, {"data": [[1.71890046E12, 20.0], [1.71890076E12, 20.0], [1.7189013E12, 20.0], [1.71890106E12, 20.0], [1.7189004E12, 20.0], [1.7189007E12, 20.0], [1.71890136E12, 20.0], [1.718901E12, 20.0], [1.71890034E12, 19.935779816513747], [1.71890064E12, 20.0], [1.71890142E12, 20.0], [1.71890094E12, 20.0], [1.71890028E12, 10.041666666666666], [1.71890124E12, 20.0], [1.71890058E12, 20.0], [1.71890148E12, 20.0], [1.71890088E12, 20.0], [1.71890118E12, 20.0], [1.71890052E12, 20.0], [1.71890082E12, 20.0], [1.71890112E12, 20.0]], "isOverall": false, "label": "Directors by name C", "isController": false}, {"data": [[1.7188995E12, 10.0], [1.7188998E12, 10.0], [1.7189001E12, 10.0], [1.71889914E12, 9.992424242424239], [1.71889944E12, 10.0], [1.71889908E12, 6.071428571428571], [1.71889974E12, 10.0], [1.71890004E12, 10.0], [1.71889938E12, 10.0], [1.71889968E12, 10.0], [1.71889998E12, 10.0], [1.71890028E12, 10.0], [1.71889932E12, 10.0], [1.71889962E12, 10.0], [1.71889992E12, 10.0], [1.71889926E12, 10.0], [1.71890022E12, 10.0], [1.71889956E12, 10.0], [1.71889986E12, 10.0], [1.7188992E12, 10.0], [1.71890016E12, 10.0]], "isOverall": false, "label": "Directors by name B", "isController": false}, {"data": [[1.71889884E12, 5.0], [1.71889788E12, 3.4666666666666655], [1.71889854E12, 5.0], [1.71889848E12, 5.0], [1.71889818E12, 5.0], [1.71889908E12, 5.0], [1.71889812E12, 5.0], [1.71889878E12, 5.0], [1.71889872E12, 5.0], [1.71889842E12, 5.0], [1.71889836E12, 5.0], [1.71889902E12, 5.0], [1.71889806E12, 5.0], [1.71889896E12, 5.0], [1.718898E12, 5.0], [1.71889866E12, 5.0], [1.7188986E12, 5.0], [1.7188983E12, 5.0], [1.71889824E12, 5.0], [1.7188989E12, 5.0], [1.71889794E12, 5.0]], "isOverall": false, "label": "Directors by name A", "isController": false}, {"data": [[1.71890322E12, 100.0], [1.71890352E12, 100.0], [1.71890292E12, 100.0], [1.71890358E12, 100.0], [1.71890388E12, 90.025], [1.71890328E12, 100.0], [1.71890298E12, 100.0], [1.71890268E12, 13.5], [1.71890334E12, 100.0], [1.71890364E12, 100.0], [1.71890304E12, 100.0], [1.7189037E12, 100.0], [1.71890274E12, 95.9247311827957], [1.7189031E12, 100.0], [1.7189034E12, 100.0], [1.7189028E12, 100.0], [1.71890346E12, 100.0], [1.71890376E12, 100.0], [1.71890316E12, 100.0], [1.71890382E12, 100.0], [1.71890286E12, 100.0]], "isOverall": false, "label": "Directors by name E", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71890388E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1163.25, "minX": 1.0, "maxY": 41217.0, "series": [{"data": [[2.0, 1163.25], [3.0, 1181.5454545454545], [4.0, 1208.4666666666667], [5.0, 1565.1183902667328], [6.0, 1356.1000000000001], [7.0, 1481.5454545454547], [8.0, 1429.0], [9.0, 1659.333333333333], [10.0, 3628.5747035573163], [11.0, 1480.0], [12.0, 2096.5714285714284], [13.0, 2788.8333333333335], [14.0, 2269.5], [15.0, 2944.0000000000005], [16.0, 26029.380952380954], [17.0, 5068.0], [18.0, 4504.0], [19.0, 7055.0], [20.0, 8452.968377823408], [23.0, 3833.0], [25.0, 4855.0], [33.0, 6199.5], [34.0, 8224.0], [37.0, 8983.5], [40.0, 9676.0], [44.0, 9253.0], [49.0, 12978.0], [48.0, 32884.11111111112], [50.0, 22379.14285714286], [51.0, 32899.0], [53.0, 37042.5], [56.0, 12321.0], [57.0, 41156.66666666667], [59.0, 18031.666666666668], [58.0, 32892.5], [60.0, 37855.200000000004], [63.0, 34965.5], [62.0, 32888.0], [66.0, 32894.11111111111], [65.0, 38430.0], [64.0, 38429.0], [67.0, 41180.0], [71.0, 32894.0], [69.0, 32925.0], [70.0, 36246.2], [75.0, 35645.0], [72.0, 41186.5], [78.0, 41185.0], [80.0, 32537.02116212338], [82.0, 41191.0], [81.0, 41207.0], [87.0, 41193.0], [86.0, 41190.0], [84.0, 41162.8], [90.0, 31681.5], [89.0, 41217.0], [92.0, 22465.0], [94.0, 41202.5], [99.0, 41123.0], [97.0, 41193.0], [96.0, 41139.5], [100.0, 40416.47071505566], [1.0, 1246.0]], "isOverall": false, "label": "Directors by name", "isController": false}, {"data": [[46.01718000309548, 18617.566321002938]], "isOverall": false, "label": "Directors by name-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 159.66666666666666, "minX": 1.71889788E12, "maxY": 8023.1, "series": [{"data": [[1.71889884E12, 4640.1], [1.71890226E12, 3380.4333333333334], [1.71890106E12, 4565.033333333334], [1.71890328E12, 7500.933333333333], [1.71890004E12, 5397.8], [1.71889902E12, 4465.166666666667], [1.71890124E12, 4974.333333333333], [1.71890244E12, 6030.433333333333], [1.718898E12, 5043.5], [1.71890022E12, 5019.5], [1.71890346E12, 7877.433333333333], [1.7188992E12, 5089.633333333333], [1.7188995E12, 5074.9], [1.71889848E12, 4667.9], [1.71890292E12, 7508.866666666667], [1.7189007E12, 4969.666666666667], [1.71890172E12, 5918.033333333334], [1.71889968E12, 5361.633333333333], [1.71890208E12, 6094.366666666667], [1.71889866E12, 4078.233333333333], [1.71890088E12, 4488.6], [1.7189031E12, 3753.866666666667], [1.71889986E12, 5580.666666666667], [1.7189019E12, 6019.466666666666], [1.71890256E12, 5947.566666666667], [1.71890358E12, 7702.033333333334], [1.71889914E12, 4980.333333333333], [1.71889812E12, 4076.0333333333333], [1.71890136E12, 4583.9], [1.71890034E12, 4092.633333333333], [1.71890238E12, 6040.733333333334], [1.71890274E12, 3417.2], [1.71889932E12, 4904.9], [1.7188983E12, 4675.3], [1.71890052E12, 5819.066666666667], [1.71890154E12, 5148.066666666667], [1.71890376E12, 8023.1], [1.71890322E12, 3749.0666666666666], [1.7188998E12, 5895.2], [1.71889878E12, 4755.733333333334], [1.718901E12, 4523.933333333333], [1.71890202E12, 2894.5], [1.71889998E12, 5108.233333333334], [1.71889896E12, 4164.6], [1.7189034E12, 3765.5], [1.71890118E12, 4778.0], [1.7189022E12, 6243.1], [1.71889794E12, 4847.266666666666], [1.71890016E12, 5369.366666666667], [1.71890046E12, 5523.966666666666], [1.71889944E12, 4900.933333333333], [1.71890166E12, 5988.5], [1.71890388E12, 7529.466666666666], [1.71890268E12, 6249.0], [1.71889842E12, 4320.866666666667], [1.71890064E12, 5801.433333333333], [1.71890304E12, 7415.166666666667], [1.71889962E12, 4952.033333333334], [1.7188986E12, 4505.7], [1.71890184E12, 6050.533333333334], [1.71890082E12, 4961.433333333333], [1.71890286E12, 3917.733333333333], [1.71889788E12, 1125.4666666666667], [1.7189013E12, 4629.666666666667], [1.71890352E12, 4260.866666666667], [1.7189001E12, 5875.2], [1.71889908E12, 4470.8], [1.71890232E12, 6924.9], [1.71890334E12, 3583.4666666666667], [1.7189037E12, 4569.0], [1.71890028E12, 5114.8], [1.71889806E12, 4059.2], [1.71890148E12, 4088.266666666667], [1.71889926E12, 5064.4], [1.7189025E12, 3015.5333333333333], [1.71889824E12, 4275.8], [1.71889854E12, 4328.8], [1.71890076E12, 4831.466666666666], [1.71890196E12, 5963.9], [1.71889974E12, 5231.933333333333], [1.71890298E12, 3694.4], [1.71889872E12, 5117.466666666666], [1.71890094E12, 4501.633333333333], [1.71889992E12, 5670.2], [1.71890214E12, 6630.1], [1.71890316E12, 7584.166666666667], [1.7188989E12, 4596.833333333333], [1.71890112E12, 4548.666666666667], [1.7189016E12, 5513.266666666666], [1.71889818E12, 4081.4], [1.7189004E12, 4903.4], [1.71890262E12, 5955.433333333333], [1.71889938E12, 5072.133333333333], [1.71890142E12, 4547.733333333334], [1.71890364E12, 4152.133333333333], [1.71889836E12, 4837.6], [1.71890178E12, 2982.633333333333], [1.71890058E12, 4722.333333333333], [1.7189028E12, 6005.233333333334], [1.71889956E12, 4846.833333333333], [1.71890382E12, 3785.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71889884E12, 595.9666666666667], [1.71890226E12, 423.96666666666664], [1.71890106E12, 640.4], [1.71890328E12, 1091.0], [1.71890004E12, 703.9666666666667], [1.71889902E12, 584.6], [1.71890124E12, 640.5333333333333], [1.71890244E12, 855.3], [1.718898E12, 675.5666666666667], [1.71890022E12, 695.0666666666667], [1.71890346E12, 1072.0666666666666], [1.7188992E12, 696.7333333333333], [1.7188995E12, 702.0666666666667], [1.71889848E12, 553.5333333333333], [1.71890292E12, 1084.1333333333334], [1.7189007E12, 642.7], [1.71890172E12, 837.1333333333333], [1.71889968E12, 698.3333333333334], [1.71890208E12, 862.1666666666666], [1.71889866E12, 560.3666666666667], [1.71890088E12, 635.7], [1.7189031E12, 526.8], [1.71889986E12, 695.4666666666667], [1.7189019E12, 854.0666666666667], [1.71890256E12, 870.6666666666666], [1.71890358E12, 1071.7], [1.71889914E12, 705.5], [1.71889812E12, 558.7666666666667], [1.71890136E12, 642.8], [1.71890034E12, 580.4], [1.71890238E12, 849.6333333333333], [1.71890274E12, 496.5], [1.71889932E12, 643.6333333333333], [1.7188983E12, 559.4], [1.71890052E12, 791.9333333333333], [1.71890154E12, 731.3], [1.71890376E12, 1073.7333333333333], [1.71890322E12, 533.1333333333333], [1.7188998E12, 650.7], [1.71889878E12, 564.9], [1.718901E12, 638.4666666666667], [1.71890202E12, 431.6], [1.71889998E12, 644.2], [1.71889896E12, 556.6333333333333], [1.7189034E12, 540.3666666666667], [1.71890118E12, 637.4333333333333], [1.7189022E12, 855.6333333333333], [1.71889794E12, 674.9], [1.71890016E12, 637.3666666666667], [1.71890046E12, 759.0666666666667], [1.71889944E12, 692.3333333333334], [1.71890166E12, 864.1333333333333], [1.71890388E12, 1067.3], [1.71890268E12, 897.1], [1.71889842E12, 555.5333333333333], [1.71890064E12, 778.4666666666667], [1.71890304E12, 1042.7666666666667], [1.71889962E12, 699.0666666666667], [1.7188986E12, 585.5], [1.71890184E12, 847.5666666666667], [1.71890082E12, 638.6333333333333], [1.71890286E12, 541.1], [1.71889788E12, 159.66666666666666], [1.7189013E12, 647.3], [1.71890352E12, 541.0], [1.7189001E12, 684.1], [1.71889908E12, 543.8], [1.71890232E12, 858.9], [1.71890334E12, 540.0666666666667], [1.7189037E12, 532.0666666666667], [1.71890028E12, 681.8666666666667], [1.71889806E12, 563.3666666666667], [1.71890148E12, 568.8666666666667], [1.71889926E12, 697.5666666666667], [1.7189025E12, 432.4], [1.71889824E12, 560.3], [1.71889854E12, 563.2], [1.71890076E12, 644.2666666666667], [1.71890196E12, 873.6666666666666], [1.71889974E12, 691.8], [1.71890298E12, 527.1333333333333], [1.71889872E12, 557.5666666666667], [1.71890094E12, 638.8333333333334], [1.71889992E12, 706.2333333333333], [1.71890214E12, 861.3333333333334], [1.71890316E12, 1064.7666666666667], [1.7188989E12, 558.0333333333333], [1.71890112E12, 638.0666666666667], [1.7189016E12, 762.8666666666667], [1.71889818E12, 563.8333333333334], [1.7189004E12, 697.8], [1.71890262E12, 854.1333333333333], [1.71889938E12, 690.1], [1.71890142E12, 645.2333333333333], [1.71890364E12, 530.5666666666667], [1.71889836E12, 590.5666666666667], [1.71890178E12, 418.6333333333333], [1.71890058E12, 681.6], [1.7189028E12, 831.7333333333333], [1.71889956E12, 641.5666666666667], [1.71890382E12, 529.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71890388E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1183.8174603174614, "minX": 1.71889788E12, "maxY": 41226.82000000001, "series": [{"data": [[1.71889884E12, 1551.3693693693685], [1.71890226E12, 32929.06250000001], [1.71890106E12, 8819.133333333322], [1.71890328E12, 40731.775000000016], [1.71890004E12, 3369.6691729323306], [1.71889902E12, 1606.1818181818185], [1.71890124E12, 8802.291666666664], [1.71890244E12, 32793.20625], [1.718898E12, 1189.2698412698412], [1.71890022E12, 3475.5648854961855], [1.71890346E12, 40991.17499999998], [1.7188992E12, 3542.353846153847], [1.7188995E12, 3393.363636363636], [1.71889848E12, 1659.190476190476], [1.71890292E12, 39430.80999999996], [1.7189007E12, 8637.15000000001], [1.71890172E12, 32651.500000000004], [1.71889968E12, 3458.5343511450383], [1.71890208E12, 32819.199999999975], [1.71889866E12, 1631.5523809523809], [1.71890088E12, 8811.116666666663], [1.7189031E12, 39727.16000000001], [1.71889986E12, 3540.1230769230783], [1.7189019E12, 32771.675], [1.71890256E12, 32796.45625000002], [1.71890358E12, 41188.86999999998], [1.71889914E12, 3179.757575757577], [1.71889812E12, 1676.3047619047632], [1.71890136E12, 8852.408333333338], [1.71890034E12, 9167.366972477064], [1.71890238E12, 32946.087500000016], [1.71890274E12, 34266.27956989246], [1.71889932E12, 3528.1916666666675], [1.7188983E12, 1650.5523809523804], [1.71890052E12, 7146.648648648643], [1.71890154E12, 30221.666666666664], [1.71890376E12, 40849.85], [1.71890322E12, 40916.21999999997], [1.7188998E12, 3409.5327868852464], [1.71889878E12, 1596.2169811320762], [1.718901E12, 8800.350000000004], [1.71890202E12, 32821.237499999996], [1.71889998E12, 3453.319672131148], [1.71889896E12, 1600.5714285714282], [1.7189034E12, 40942.19000000001], [1.71890118E12, 8749.650000000001], [1.7189022E12, 32830.71875000002], [1.71889794E12, 1183.8174603174614], [1.71890016E12, 3561.183333333334], [1.71890046E12, 7145.326241134752], [1.71889944E12, 3525.7769230769245], [1.71890166E12, 31900.11250000001], [1.71890388E12, 41019.425000000025], [1.71890268E12, 31357.404761904763], [1.71889842E12, 1648.8666666666663], [1.71890064E12, 7612.517241379311], [1.71890304E12, 39523.02500000003], [1.71889962E12, 3511.0230769230775], [1.7188986E12, 1626.1454545454546], [1.71890184E12, 32898.21250000002], [1.71890082E12, 8773.141666666666], [1.71890286E12, 39871.580000000016], [1.71889788E12, 1188.8], [1.7189013E12, 8835.183333333334], [1.71890352E12, 40982.67], [1.7189001E12, 3558.1615384615384], [1.71889908E12, 1564.245098039216], [1.71890232E12, 32774.33749999995], [1.71890334E12, 41226.82000000001], [1.7189037E12, 41072.77999999995], [1.71890028E12, 3073.9765625000036], [1.71889806E12, 1567.9716981132076], [1.71890148E12, 8903.16822429907], [1.71889926E12, 3534.6846153846163], [1.7189025E12, 32800.287500000006], [1.71889824E12, 1632.5238095238092], [1.71889854E12, 1561.8113207547176], [1.71890076E12, 8766.883333333333], [1.71890196E12, 32810.55], [1.71889974E12, 3510.299999999999], [1.71890298E12, 39378.33000000001], [1.71889872E12, 1634.9714285714288], [1.71890094E12, 8766.05], [1.71889992E12, 3498.5954198473282], [1.71890214E12, 32810.50624999998], [1.71890316E12, 40890.37500000002], [1.7188989E12, 1648.8952380952383], [1.71890112E12, 8783.633333333335], [1.7189016E12, 31067.33802816902], [1.71889818E12, 1637.0285714285717], [1.7189004E12, 8241.694656488555], [1.71890262E12, 32795.83124999998], [1.71889938E12, 3543.276923076925], [1.71890142E12, 8783.691666666664], [1.71890364E12, 41221.68000000001], [1.71889836E12, 1602.2090909090912], [1.71890178E12, 32574.175000000007], [1.71890058E12, 7512.094488188976], [1.7189028E12, 39613.854430379775], [1.71889956E12, 3543.608333333334], [1.71890382E12, 40921.75000000004]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71890388E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1183.761904761904, "minX": 1.71889788E12, "maxY": 41226.82000000001, "series": [{"data": [[1.71889884E12, 1551.351351351351], [1.71890226E12, 32929.06250000001], [1.71890106E12, 8819.133333333322], [1.71890328E12, 40731.775000000016], [1.71890004E12, 3369.6691729323306], [1.71889902E12, 1606.1636363636364], [1.71890124E12, 8802.283333333333], [1.71890244E12, 32793.20625], [1.718898E12, 1189.2619047619057], [1.71890022E12, 3475.5648854961855], [1.71890346E12, 40991.17499999998], [1.7188992E12, 3542.353846153847], [1.7188995E12, 3393.3560606060605], [1.71889848E12, 1659.190476190476], [1.71890292E12, 39430.80999999996], [1.7189007E12, 8637.15000000001], [1.71890172E12, 32651.500000000004], [1.71889968E12, 3458.5343511450383], [1.71890208E12, 32819.19375], [1.71889866E12, 1631.5428571428565], [1.71890088E12, 8811.116666666663], [1.7189031E12, 39727.16000000001], [1.71889986E12, 3540.1076923076926], [1.7189019E12, 32771.675], [1.71890256E12, 32796.45625000002], [1.71890358E12, 41188.86999999998], [1.71889914E12, 3179.757575757577], [1.71889812E12, 1676.3047619047632], [1.71890136E12, 8852.408333333338], [1.71890034E12, 9167.34862385321], [1.71890238E12, 32946.087500000016], [1.71890274E12, 34266.27956989246], [1.71889932E12, 3528.1833333333316], [1.7188983E12, 1650.5523809523804], [1.71890052E12, 7146.6418918918935], [1.71890154E12, 30221.666666666664], [1.71890376E12, 40849.83500000002], [1.71890322E12, 40916.21999999997], [1.7188998E12, 3409.5163934426223], [1.71889878E12, 1596.2169811320762], [1.718901E12, 8800.350000000004], [1.71890202E12, 32821.237499999996], [1.71889998E12, 3453.319672131148], [1.71889896E12, 1600.5714285714282], [1.7189034E12, 40942.18000000001], [1.71890118E12, 8749.64166666667], [1.7189022E12, 32830.71875000002], [1.71889794E12, 1183.761904761904], [1.71890016E12, 3561.149999999999], [1.71890046E12, 7145.326241134752], [1.71889944E12, 3525.7769230769245], [1.71890166E12, 31900.11250000001], [1.71890388E12, 41019.425000000025], [1.71890268E12, 31357.404761904763], [1.71889842E12, 1648.8476190476197], [1.71890064E12, 7612.510344827585], [1.71890304E12, 39523.02500000003], [1.71889962E12, 3511.0230769230775], [1.7188986E12, 1626.1454545454546], [1.71890184E12, 32898.21250000002], [1.71890082E12, 8773.133333333337], [1.71890286E12, 39871.580000000016], [1.71889788E12, 1188.8], [1.7189013E12, 8835.175], [1.71890352E12, 40982.67], [1.7189001E12, 3558.146153846155], [1.71889908E12, 1564.245098039216], [1.71890232E12, 32774.331250000025], [1.71890334E12, 41226.82000000001], [1.7189037E12, 41072.76999999999], [1.71890028E12, 3073.9765625000036], [1.71889806E12, 1567.9716981132076], [1.71890148E12, 8903.16822429907], [1.71889926E12, 3534.66923076923], [1.7189025E12, 32800.287500000006], [1.71889824E12, 1632.5238095238092], [1.71889854E12, 1561.8113207547176], [1.71890076E12, 8766.883333333333], [1.71890196E12, 32810.55], [1.71889974E12, 3510.299999999999], [1.71890298E12, 39378.33000000001], [1.71889872E12, 1634.9714285714288], [1.71890094E12, 8766.05], [1.71889992E12, 3498.5954198473282], [1.71890214E12, 32810.50624999998], [1.71890316E12, 40890.37500000002], [1.7188989E12, 1648.8952380952383], [1.71890112E12, 8783.633333333335], [1.7189016E12, 31067.33802816902], [1.71889818E12, 1637.0285714285717], [1.7189004E12, 8241.694656488555], [1.71890262E12, 32795.83124999998], [1.71889938E12, 3543.2692307692305], [1.71890142E12, 8783.691666666664], [1.71890364E12, 41221.68000000001], [1.71889836E12, 1602.1818181818176], [1.71890178E12, 32574.175000000007], [1.71890058E12, 7512.094488188976], [1.7189028E12, 39613.854430379775], [1.71889956E12, 3543.608333333334], [1.71890382E12, 40921.75000000004]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71890388E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.2380952380952381, "minX": 1.71889788E12, "maxY": 95.575, "series": [{"data": [[1.71889884E12, 1.549549549549548], [1.71890226E12, 11.349999999999994], [1.71890106E12, 3.3166666666666678], [1.71890328E12, 28.955000000000016], [1.71890004E12, 3.2255639097744413], [1.71889902E12, 1.50909090909091], [1.71890124E12, 6.191666666666668], [1.71890244E12, 95.575], [1.718898E12, 1.801587301587302], [1.71890022E12, 4.839694656488544], [1.71890346E12, 19.35999999999999], [1.7188992E12, 2.576923076923076], [1.7188995E12, 3.0227272727272734], [1.71889848E12, 1.7238095238095232], [1.71890292E12, 17.204999999999984], [1.7189007E12, 6.216666666666665], [1.71890172E12, 16.94375], [1.71889968E12, 3.114503816793893], [1.71890208E12, 17.0], [1.71889866E12, 1.619047619047619], [1.71890088E12, 5.658333333333332], [1.7189031E12, 18.700000000000006], [1.71889986E12, 2.6076923076923064], [1.7189019E12, 19.56250000000001], [1.71890256E12, 17.625000000000025], [1.71890358E12, 17.41500000000001], [1.71889914E12, 3.9772727272727284], [1.71889812E12, 1.5999999999999996], [1.71890136E12, 7.0666666666666655], [1.71890034E12, 4.431192660550459], [1.71890238E12, 64.375], [1.71890274E12, 30.75268817204301], [1.71889932E12, 2.6416666666666657], [1.7188983E12, 1.3809523809523812], [1.71890052E12, 4.614864864864869], [1.71890154E12, 16.88405797101451], [1.71890376E12, 17.43499999999999], [1.71890322E12, 15.650000000000002], [1.7188998E12, 4.303278688524593], [1.71889878E12, 1.5849056603773604], [1.718901E12, 5.741666666666669], [1.71890202E12, 22.4125], [1.71889998E12, 3.0327868852459017], [1.71889896E12, 2.8095238095238093], [1.7189034E12, 15.120000000000001], [1.71890118E12, 6.025000000000001], [1.7189022E12, 17.46249999999998], [1.71889794E12, 1.3174603174603174], [1.71890016E12, 4.066666666666668], [1.71890046E12, 4.354609929078013], [1.71889944E12, 2.684615384615384], [1.71890166E12, 18.243749999999995], [1.71890388E12, 20.060000000000006], [1.71890268E12, 18.797619047619047], [1.71889842E12, 1.647619047619048], [1.71890064E12, 4.662068965517244], [1.71890304E12, 17.625000000000014], [1.71889962E12, 2.5846153846153883], [1.7188986E12, 1.854545454545456], [1.71890184E12, 50.83749999999998], [1.71890082E12, 7.933333333333334], [1.71890286E12, 32.550000000000004], [1.71889788E12, 6.533333333333334], [1.7189013E12, 5.558333333333334], [1.71890352E12, 18.960000000000004], [1.7189001E12, 2.576923076923079], [1.71889908E12, 4.431372549019608], [1.71890232E12, 16.875000000000004], [1.71890334E12, 18.690000000000015], [1.7189037E12, 20.09999999999999], [1.71890028E12, 6.117187500000001], [1.71889806E12, 1.6603773584905668], [1.71890148E12, 38.05607476635514], [1.71889926E12, 2.7846153846153854], [1.7189025E12, 22.725000000000005], [1.71889824E12, 1.5714285714285718], [1.71889854E12, 1.2452830188679245], [1.71890076E12, 5.558333333333331], [1.71890196E12, 19.456249999999994], [1.71889974E12, 2.7384615384615376], [1.71890298E12, 16.590000000000003], [1.71889872E12, 1.2380952380952381], [1.71890094E12, 4.383333333333335], [1.71889992E12, 3.4198473282442765], [1.71890214E12, 17.599999999999998], [1.71890316E12, 17.209999999999987], [1.7188989E12, 1.752380952380951], [1.71890112E12, 5.616666666666668], [1.7189016E12, 23.183098591549296], [1.71889818E12, 1.428571428571429], [1.7189004E12, 6.404580152671758], [1.71890262E12, 19.556250000000006], [1.71889938E12, 2.5076923076923068], [1.71890142E12, 5.733333333333334], [1.71890364E12, 19.029999999999998], [1.71889836E12, 1.5545454545454545], [1.71890178E12, 11.437500000000002], [1.71890058E12, 5.236220472440943], [1.7189028E12, 13.65822784810126], [1.71889956E12, 2.2333333333333347], [1.71890382E12, 15.43]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71890388E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1082.0, "minX": 1.71889788E12, "maxY": 48610.0, "series": [{"data": [[1.71889884E12, 1870.0], [1.71890226E12, 33181.0], [1.71890106E12, 8961.0], [1.71890328E12, 41317.0], [1.71890004E12, 3890.0], [1.71889902E12, 1773.0], [1.71890124E12, 8867.0], [1.71890244E12, 33078.0], [1.718898E12, 1383.0], [1.71890022E12, 3728.0], [1.71890346E12, 41197.0], [1.7188992E12, 3733.0], [1.7188995E12, 3604.0], [1.71889848E12, 1768.0], [1.71890292E12, 42460.0], [1.7189007E12, 8858.0], [1.71890172E12, 32849.0], [1.71889968E12, 3728.0], [1.71890208E12, 32873.0], [1.71889866E12, 1801.0], [1.71890088E12, 8919.0], [1.7189031E12, 41481.0], [1.71889986E12, 3739.0], [1.7189019E12, 32855.0], [1.71890256E12, 32825.0], [1.71890358E12, 41517.0], [1.71889914E12, 3721.0], [1.71889812E12, 2008.0], [1.71890136E12, 9058.0], [1.71890034E12, 10440.0], [1.71890238E12, 33131.0], [1.71890274E12, 47787.0], [1.71889932E12, 3728.0], [1.7188983E12, 1782.0], [1.71890052E12, 8037.0], [1.71890154E12, 42217.0], [1.71890376E12, 41218.0], [1.71890322E12, 41015.0], [1.7188998E12, 3744.0], [1.71889878E12, 2272.0], [1.718901E12, 8856.0], [1.71890202E12, 32941.0], [1.71889998E12, 3664.0], [1.71889896E12, 1706.0], [1.7189034E12, 41050.0], [1.71890118E12, 8853.0], [1.7189022E12, 33116.0], [1.71889794E12, 1603.0], [1.71890016E12, 3729.0], [1.71890046E12, 8043.0], [1.71889944E12, 3622.0], [1.71890166E12, 39540.0], [1.71890388E12, 41531.0], [1.71890268E12, 32922.0], [1.71889842E12, 1874.0], [1.71890064E12, 8229.0], [1.71890304E12, 40386.0], [1.71889962E12, 3600.0], [1.7188986E12, 1783.0], [1.71890184E12, 32933.0], [1.71890082E12, 8869.0], [1.71890286E12, 41078.0], [1.71889788E12, 1553.0], [1.7189013E12, 8961.0], [1.71890352E12, 41041.0], [1.7189001E12, 3728.0], [1.71889908E12, 2200.0], [1.71890232E12, 33216.0], [1.71890334E12, 41506.0], [1.7189037E12, 41318.0], [1.71890028E12, 5271.0], [1.71889806E12, 1867.0], [1.71890148E12, 15916.0], [1.71889926E12, 3828.0], [1.7189025E12, 32864.0], [1.71889824E12, 1803.0], [1.71889854E12, 1707.0], [1.71890076E12, 8860.0], [1.71890196E12, 32882.0], [1.71889974E12, 3581.0], [1.71890298E12, 39880.0], [1.71889872E12, 1776.0], [1.71890094E12, 8970.0], [1.71889992E12, 3732.0], [1.71890214E12, 32907.0], [1.71890316E12, 41009.0], [1.7188989E12, 1793.0], [1.71890112E12, 8949.0], [1.7189016E12, 35072.0], [1.71889818E12, 1807.0], [1.7189004E12, 9257.0], [1.71890262E12, 32912.0], [1.71889938E12, 3729.0], [1.71890142E12, 9054.0], [1.71890364E12, 41299.0], [1.71889836E12, 1684.0], [1.71890178E12, 32669.0], [1.71890058E12, 8329.0], [1.7189028E12, 48610.0], [1.71889956E12, 3726.0], [1.71890382E12, 40966.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71889884E12, 1095.0], [1.71890226E12, 32680.0], [1.71890106E12, 8714.0], [1.71890328E12, 40235.0], [1.71890004E12, 1155.0], [1.71889902E12, 1484.0], [1.71890124E12, 8669.0], [1.71890244E12, 32509.0], [1.718898E12, 1115.0], [1.71890022E12, 1776.0], [1.71890346E12, 40930.0], [1.7188992E12, 2895.0], [1.7188995E12, 1509.0], [1.71889848E12, 1546.0], [1.71890292E12, 37641.0], [1.7189007E12, 7914.0], [1.71890172E12, 32389.0], [1.71889968E12, 1427.0], [1.71890208E12, 32747.0], [1.71889866E12, 1468.0], [1.71890088E12, 8611.0], [1.7189031E12, 38429.0], [1.71889986E12, 3454.0], [1.7189019E12, 32686.0], [1.71890256E12, 32732.0], [1.71890358E12, 40880.0], [1.71889914E12, 1492.0], [1.71889812E12, 1505.0], [1.71890136E12, 8637.0], [1.71890034E12, 6395.0], [1.71890238E12, 32755.0], [1.71890274E12, 6194.0], [1.71889932E12, 3413.0], [1.7188983E12, 1501.0], [1.71890052E12, 5713.0], [1.71890154E12, 23559.0], [1.71890376E12, 40594.0], [1.71890322E12, 40790.0], [1.7188998E12, 1188.0], [1.71889878E12, 1121.0], [1.718901E12, 8622.0], [1.71890202E12, 32749.0], [1.71889998E12, 1202.0], [1.71889896E12, 1508.0], [1.7189034E12, 40666.0], [1.71890118E12, 8613.0], [1.7189022E12, 32672.0], [1.71889794E12, 1132.0], [1.71890016E12, 3416.0], [1.71890046E12, 5456.0], [1.71889944E12, 3415.0], [1.71890166E12, 29314.0], [1.71890388E12, 40763.0], [1.71890268E12, 1208.0], [1.71889842E12, 1512.0], [1.71890064E12, 3311.0], [1.71890304E12, 38922.0], [1.71889962E12, 3414.0], [1.7188986E12, 1514.0], [1.71890184E12, 32849.0], [1.71890082E12, 8615.0], [1.71890286E12, 37482.0], [1.71889788E12, 1082.0], [1.7189013E12, 8746.0], [1.71890352E12, 40784.0], [1.7189001E12, 3488.0], [1.71889908E12, 1128.0], [1.71890232E12, 32393.0], [1.71890334E12, 41142.0], [1.7189037E12, 40890.0], [1.71890028E12, 1110.0], [1.71889806E12, 1173.0], [1.71890148E12, 1191.0], [1.71889926E12, 3421.0], [1.7189025E12, 32771.0], [1.71889824E12, 1490.0], [1.71889854E12, 1160.0], [1.71890076E12, 8605.0], [1.71890196E12, 32641.0], [1.71889974E12, 3390.0], [1.71890298E12, 38999.0], [1.71889872E12, 1502.0], [1.71890094E12, 8637.0], [1.71889992E12, 1633.0], [1.71890214E12, 32714.0], [1.71890316E12, 40416.0], [1.7188989E12, 1532.0], [1.71890112E12, 8607.0], [1.7189016E12, 28798.0], [1.71889818E12, 1518.0], [1.7189004E12, 6382.0], [1.71890262E12, 32671.0], [1.71889938E12, 3481.0], [1.71890142E12, 8611.0], [1.71890364E12, 41172.0], [1.71889836E12, 1507.0], [1.71890178E12, 32527.0], [1.71890058E12, 4922.0], [1.7189028E12, 33834.0], [1.71889956E12, 3399.0], [1.71890382E12, 40834.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71889884E12, 1722.0000000000002], [1.71890226E12, 33145.6], [1.71890106E12, 8939.9], [1.71890328E12, 41035.0], [1.71890004E12, 3711.3], [1.71889902E12, 1677.0], [1.71890124E12, 8845.9], [1.71890244E12, 32862.9], [1.718898E12, 1246.0], [1.71890022E12, 3567.1000000000004], [1.71890346E12, 41018.8], [1.7188992E12, 3645.7], [1.7188995E12, 3530.5], [1.71889848E12, 1687.0], [1.71890292E12, 42402.7], [1.7189007E12, 8842.9], [1.71890172E12, 32820.0], [1.71889968E12, 3615.0], [1.71890208E12, 32858.0], [1.71889866E12, 1693.0], [1.71890088E12, 8906.9], [1.7189031E12, 41388.5], [1.71889986E12, 3685.2], [1.7189019E12, 32838.9], [1.71890256E12, 32815.0], [1.71890358E12, 41230.0], [1.71889914E12, 3526.5], [1.71889812E12, 1835.0], [1.71890136E12, 9039.8], [1.71890034E12, 9764.0], [1.71890238E12, 33118.0], [1.71890274E12, 44750.200000000004], [1.71889932E12, 3639.6], [1.7188983E12, 1735.0], [1.71890052E12, 7826.0], [1.71890154E12, 36926.0], [1.71890376E12, 40996.9], [1.71890322E12, 40990.0], [1.7188998E12, 3622.0], [1.71889878E12, 1755.0], [1.718901E12, 8847.0], [1.71890202E12, 32866.9], [1.71889998E12, 3622.5], [1.71889896E12, 1681.0], [1.7189034E12, 40997.9], [1.71890118E12, 8839.9], [1.7189022E12, 32916.9], [1.71889794E12, 1227.0], [1.71890016E12, 3714.0], [1.71890046E12, 7770.1], [1.71889944E12, 3608.0], [1.71890166E12, 39424.8], [1.71890388E12, 41208.8], [1.71890268E12, 32902.0], [1.71889842E12, 1783.0], [1.71890064E12, 8198.0], [1.71890304E12, 40336.8], [1.71889962E12, 3526.8], [1.7188986E12, 1679.0], [1.71890184E12, 32923.9], [1.71890082E12, 8851.9], [1.71890286E12, 40988.2], [1.71889788E12, 1475.3], [1.7189013E12, 8933.0], [1.71890352E12, 41017.8], [1.7189001E12, 3712.7], [1.71889908E12, 1761.5], [1.71890232E12, 32883.9], [1.71890334E12, 41248.9], [1.7189037E12, 41297.0], [1.71890028E12, 3724.0], [1.71889806E12, 1681.0], [1.71890148E12, 12880.0], [1.71889926E12, 3622.0], [1.7189025E12, 32838.9], [1.71889824E12, 1757.0], [1.71889854E12, 1685.0], [1.71890076E12, 8846.0], [1.71890196E12, 32861.0], [1.71889974E12, 3559.7], [1.71890298E12, 39861.9], [1.71889872E12, 1680.0], [1.71890094E12, 8947.9], [1.71889992E12, 3634.4], [1.71890214E12, 32886.9], [1.71890316E12, 40987.0], [1.7188989E12, 1692.0], [1.71890112E12, 8939.0], [1.7189016E12, 35043.5], [1.71889818E12, 1684.0], [1.7189004E12, 8830.5], [1.71890262E12, 32905.0], [1.71889938E12, 3713.7], [1.71890142E12, 9038.0], [1.71890364E12, 41274.9], [1.71889836E12, 1677.8], [1.71890178E12, 32657.4], [1.71890058E12, 8097.0], [1.7189028E12, 46100.0], [1.71889956E12, 3713.9], [1.71890382E12, 40949.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71889884E12, 1869.77], [1.71890226E12, 33181.0], [1.71890106E12, 8956.9], [1.71890328E12, 41073.91], [1.71890004E12, 3879.95], [1.71889902E12, 1772.37], [1.71890124E12, 8863.72], [1.71890244E12, 33075.0], [1.718898E12, 1357.56], [1.71890022E12, 3726.11], [1.71890346E12, 41182.92], [1.7188992E12, 3728.73], [1.7188995E12, 3575.400000000001], [1.71889848E12, 1767.78], [1.71890292E12, 42453.95], [1.7189007E12, 8854.72], [1.71890172E12, 32839.0], [1.71889968E12, 3724.2200000000003], [1.71890208E12, 32870.0], [1.71889866E12, 1800.12], [1.71890088E12, 8918.18], [1.7189031E12, 41480.91], [1.71889986E12, 3730.46], [1.7189019E12, 32855.0], [1.71890256E12, 32823.0], [1.71890358E12, 41505.98], [1.71889914E12, 3659.2500000000023], [1.71889812E12, 2006.4599999999998], [1.71890136E12, 9055.54], [1.71890034E12, 10348.230000000001], [1.71890238E12, 33128.0], [1.71890274E12, 47787.0], [1.71889932E12, 3725.95], [1.7188983E12, 1781.78], [1.71890052E12, 8037.0], [1.71890154E12, 40261.970000000045], [1.71890376E12, 41214.94], [1.71890322E12, 41014.92], [1.7188998E12, 3735.0], [1.71889878E12, 2247.300000000001], [1.718901E12, 8856.0], [1.71890202E12, 32941.0], [1.71889998E12, 3663.1], [1.71889896E12, 1705.34], [1.7189034E12, 41049.94], [1.71890118E12, 8851.77], [1.7189022E12, 33113.0], [1.71889794E12, 1549.4699999999998], [1.71890016E12, 3728.18], [1.71890046E12, 8034.7], [1.71889944E12, 3620.7799999999997], [1.71890166E12, 39529.0], [1.71890388E12, 41520.95], [1.71890268E12, 32912.0], [1.71889842E12, 1873.78], [1.71890064E12, 8219.9], [1.71890304E12, 40377.81], [1.71889962E12, 3566.4499999999994], [1.7188986E12, 1782.79], [1.71890184E12, 32928.0], [1.71890082E12, 8868.18], [1.71890286E12, 41077.89], [1.71889788E12, 1553.0], [1.7189013E12, 8955.26], [1.71890352E12, 41040.99], [1.7189001E12, 3727.39], [1.71889908E12, 2199.5], [1.71890232E12, 33214.0], [1.71890334E12, 41505.9], [1.7189037E12, 41317.97], [1.71890028E12, 5046.420000000003], [1.71889806E12, 1866.22], [1.71890148E12, 15861.999999999998], [1.71889926E12, 3823.12], [1.7189025E12, 32864.0], [1.71889824E12, 1802.4499999999998], [1.71889854E12, 1706.74], [1.71890076E12, 8858.77], [1.71890196E12, 32870.0], [1.71889974E12, 3579.7799999999997], [1.71890298E12, 39879.97], [1.71889872E12, 1773.1399999999996], [1.71890094E12, 8969.18], [1.71889992E12, 3730.11], [1.71890214E12, 32903.0], [1.71890316E12, 41007.98], [1.7188989E12, 1792.8899999999999], [1.71890112E12, 8948.18], [1.7189016E12, 35070.3], [1.71889818E12, 1806.4499999999998], [1.7189004E12, 9253.85], [1.71890262E12, 32912.0], [1.71889938E12, 3727.7799999999997], [1.71890142E12, 9053.59], [1.71890364E12, 41298.98], [1.71889836E12, 1684.0], [1.71890178E12, 32669.0], [1.71890058E12, 8327.9], [1.7189028E12, 47599.0], [1.71889956E12, 3725.59], [1.71890382E12, 40965.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71889884E12, 1565.0], [1.71890226E12, 32905.0], [1.71890106E12, 8829.5], [1.71890328E12, 40722.5], [1.71890004E12, 3495.0], [1.71889902E12, 1592.5], [1.71890124E12, 8830.0], [1.71890244E12, 32773.5], [1.718898E12, 1183.5], [1.71890022E12, 3510.0], [1.71890346E12, 40989.0], [1.7188992E12, 3514.0], [1.7188995E12, 3504.0], [1.71889848E12, 1665.0], [1.71890292E12, 38319.0], [1.7189007E12, 8730.5], [1.71890172E12, 32662.0], [1.71889968E12, 3510.0], [1.71890208E12, 32813.0], [1.71889866E12, 1653.0], [1.71890088E12, 8833.0], [1.7189031E12, 38535.0], [1.71889986E12, 3514.0], [1.7189019E12, 32769.5], [1.71890256E12, 32797.5], [1.71890358E12, 41188.5], [1.71889914E12, 3492.0], [1.71889812E12, 1665.0], [1.71890136E12, 8819.0], [1.71890034E12, 9251.0], [1.71890238E12, 33037.5], [1.71890274E12, 35850.0], [1.71889932E12, 3510.5], [1.7188983E12, 1666.0], [1.71890052E12, 7307.0], [1.71890154E12, 28413.0], [1.71890376E12, 40824.5], [1.71890322E12, 40901.5], [1.7188998E12, 3499.5], [1.71889878E12, 1646.0], [1.718901E12, 8832.0], [1.71890202E12, 32831.0], [1.71889998E12, 3508.0], [1.71889896E12, 1584.0], [1.7189034E12, 40954.0], [1.71890118E12, 8768.0], [1.7189022E12, 32845.5], [1.71889794E12, 1165.0], [1.71890016E12, 3518.0], [1.71890046E12, 7174.0], [1.71889944E12, 3514.0], [1.71890166E12, 30807.5], [1.71890388E12, 41004.0], [1.71890268E12, 32825.0], [1.71889842E12, 1655.0], [1.71890064E12, 7940.0], [1.71890304E12, 39057.5], [1.71889962E12, 3511.0], [1.7188986E12, 1654.5], [1.71890184E12, 32899.0], [1.71890082E12, 8797.0], [1.71890286E12, 40595.5], [1.71889788E12, 1133.5], [1.7189013E12, 8830.0], [1.71890352E12, 40986.5], [1.7189001E12, 3517.0], [1.71889908E12, 1569.0], [1.71890232E12, 32796.5], [1.71890334E12, 41211.5], [1.7189037E12, 40992.5], [1.71890028E12, 3504.5], [1.71889806E12, 1583.0], [1.71890148E12, 8838.0], [1.71889926E12, 3512.0], [1.7189025E12, 32797.0], [1.71889824E12, 1653.0], [1.71889854E12, 1578.5], [1.71890076E12, 8822.0], [1.71890196E12, 32833.0], [1.71889974E12, 3511.5], [1.71890298E12, 39113.0], [1.71889872E12, 1659.0], [1.71890094E12, 8725.0], [1.71889992E12, 3511.0], [1.71890214E12, 32806.5], [1.71890316E12, 40902.0], [1.7188989E12, 1662.0], [1.71890112E12, 8784.0], [1.7189016E12, 28917.5], [1.71889818E12, 1662.0], [1.7189004E12, 8306.0], [1.71890262E12, 32798.0], [1.71889938E12, 3515.0], [1.71890142E12, 8778.0], [1.71890364E12, 41206.5], [1.71889836E12, 1584.5], [1.71890178E12, 32559.0], [1.71890058E12, 7976.0], [1.7189028E12, 37601.0], [1.71889956E12, 3514.0], [1.71890382E12, 40925.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71889884E12, 1775.0], [1.71890226E12, 33153.9], [1.71890106E12, 8943.0], [1.71890328E12, 41044.0], [1.71890004E12, 3736.0], [1.71889902E12, 1690.0], [1.71890124E12, 8850.95], [1.71890244E12, 33032.5], [1.718898E12, 1282.25], [1.71890022E12, 3710.0], [1.71890346E12, 41033.0], [1.7188992E12, 3708.0], [1.7188995E12, 3537.0], [1.71889848E12, 1731.9999999999995], [1.71890292E12, 42432.9], [1.7189007E12, 8845.95], [1.71890172E12, 32827.95], [1.71889968E12, 3703.0], [1.71890208E12, 32864.0], [1.71889866E12, 1770.45], [1.71890088E12, 8910.95], [1.7189031E12, 41403.85], [1.71889986E12, 3700.0], [1.7189019E12, 32846.0], [1.71890256E12, 32819.0], [1.71890358E12, 41237.95], [1.71889914E12, 3610.0], [1.71889812E12, 1903.2999999999984], [1.71890136E12, 9048.0], [1.71890034E12, 9855.15], [1.71890238E12, 33123.95], [1.71890274E12, 45618.0], [1.71889932E12, 3713.85], [1.7188983E12, 1766.45], [1.71890052E12, 8021.0], [1.71890154E12, 38448.0], [1.71890376E12, 41004.95], [1.71890322E12, 40999.85], [1.7188998E12, 3709.75], [1.71889878E12, 1849.7], [1.718901E12, 8850.0], [1.71890202E12, 32877.75], [1.71889998E12, 3650.0], [1.71889896E12, 1686.45], [1.7189034E12, 41032.7], [1.71890118E12, 8845.95], [1.7189022E12, 33104.95], [1.71889794E12, 1255.35], [1.71890016E12, 3721.9], [1.71890046E12, 7803.099999999999], [1.71889944E12, 3612.0], [1.71890166E12, 39435.85], [1.71890388E12, 41465.899999999994], [1.71890268E12, 32904.0], [1.71889842E12, 1820.7499999999993], [1.71890064E12, 8211.45], [1.71890304E12, 40349.0], [1.71889962E12, 3531.0], [1.7188986E12, 1689.0], [1.71890184E12, 32925.95], [1.71890082E12, 8856.0], [1.71890286E12, 41010.6], [1.71889788E12, 1483.0], [1.7189013E12, 8940.95], [1.71890352E12, 41029.85], [1.7189001E12, 3719.0], [1.71889908E12, 1999.5], [1.71890232E12, 33196.75], [1.71890334E12, 41474.6], [1.7189037E12, 41304.95], [1.71890028E12, 4105.1499999999905], [1.71889806E12, 1755.1999999999998], [1.71890148E12, 14889.5], [1.71889926E12, 3815.0], [1.7189025E12, 32849.9], [1.71889824E12, 1791.45], [1.71889854E12, 1690.35], [1.71890076E12, 8849.0], [1.71890196E12, 32863.9], [1.71889974E12, 3567.0], [1.71890298E12, 39867.95], [1.71889872E12, 1705.9], [1.71890094E12, 8959.7], [1.71889992E12, 3716.0], [1.71890214E12, 32892.95], [1.71890316E12, 40997.0], [1.7188989E12, 1768.05], [1.71890112E12, 8943.95], [1.7189016E12, 35054.75], [1.71889818E12, 1781.8], [1.7189004E12, 9059.0], [1.71890262E12, 32909.95], [1.71889938E12, 3722.0], [1.71890142E12, 9048.95], [1.71890364E12, 41286.9], [1.71889836E12, 1679.0], [1.71890178E12, 32665.95], [1.71890058E12, 8124.0], [1.7189028E12, 46115.0], [1.71889956E12, 3716.95], [1.71890382E12, 40953.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71890388E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1245.5, "minX": 2.0, "maxY": 44938.0, "series": [{"data": [[2.0, 1505.5], [32.0, 42311.5], [36.0, 32802.5], [40.0, 8824.0], [42.0, 34215.5], [52.0, 40845.5], [54.0, 41193.0], [56.0, 42639.5], [4.0, 1245.5], [64.0, 35771.0], [68.0, 41752.5], [82.0, 31970.0], [84.0, 40201.0], [6.0, 1360.0], [116.0, 38961.0], [124.0, 29366.0], [8.0, 1487.5], [146.0, 41239.0], [158.0, 32761.0], [10.0, 1656.0], [160.0, 32807.0], [180.0, 41192.0], [12.0, 7641.5], [198.0, 40469.0], [200.0, 40977.0], [14.0, 7282.0], [16.0, 7021.5], [18.0, 3436.0], [20.0, 3513.0], [22.0, 7302.5], [24.0, 7512.5], [26.0, 7736.0], [28.0, 44938.0], [30.0, 7930.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 200.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1245.5, "minX": 2.0, "maxY": 44938.0, "series": [{"data": [[2.0, 1505.5], [32.0, 42311.5], [36.0, 32802.5], [40.0, 8824.0], [42.0, 34215.5], [52.0, 40845.5], [54.0, 41193.0], [56.0, 42639.5], [4.0, 1245.5], [64.0, 35771.0], [68.0, 41752.5], [82.0, 31970.0], [84.0, 40201.0], [6.0, 1360.0], [116.0, 38961.0], [124.0, 29366.0], [8.0, 1487.5], [146.0, 41239.0], [158.0, 32761.0], [10.0, 1656.0], [160.0, 32807.0], [180.0, 41192.0], [12.0, 7641.5], [198.0, 40469.0], [200.0, 40977.0], [14.0, 7282.0], [16.0, 7021.5], [18.0, 3436.0], [20.0, 3513.0], [22.0, 7302.5], [24.0, 7512.5], [26.0, 7736.0], [28.0, 44938.0], [30.0, 7930.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 200.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.71889788E12, "maxY": 6.666666666666667, "series": [{"data": [[1.71889884E12, 3.533333333333333], [1.71890226E12, 2.6666666666666665], [1.71890106E12, 4.0], [1.71890328E12, 3.3333333333333335], [1.71890004E12, 4.466666666666667], [1.71889902E12, 3.5], [1.71890124E12, 4.0], [1.71890244E12, 5.333333333333333], [1.718898E12, 4.2], [1.71890022E12, 4.366666666666666], [1.71890346E12, 6.666666666666667], [1.7188992E12, 4.333333333333333], [1.7188995E12, 4.4], [1.71889848E12, 3.5], [1.71890292E12, 6.666666666666667], [1.7189007E12, 4.0], [1.71890172E12, 2.6666666666666665], [1.71889968E12, 4.366666666666666], [1.71890208E12, 5.333333333333333], [1.71889866E12, 3.5], [1.71890088E12, 4.0], [1.7189031E12, 3.3333333333333335], [1.71889986E12, 4.333333333333333], [1.7189019E12, 5.333333333333333], [1.71890256E12, 5.333333333333333], [1.71890358E12, 6.666666666666667], [1.71889914E12, 4.5], [1.71889812E12, 3.5], [1.71890136E12, 4.0], [1.71890034E12, 3.8333333333333335], [1.71890238E12, 5.333333333333333], [1.71890274E12, 5.633333333333334], [1.71889932E12, 4.333333333333333], [1.7188983E12, 3.5], [1.71890052E12, 4.933333333333334], [1.71890154E12, 5.2], [1.71890376E12, 6.666666666666667], [1.71890322E12, 3.3333333333333335], [1.7188998E12, 4.4], [1.71889878E12, 3.533333333333333], [1.718901E12, 4.0], [1.71890202E12, 2.6666666666666665], [1.71889998E12, 4.366666666666666], [1.71889896E12, 3.6666666666666665], [1.7189034E12, 3.3333333333333335], [1.71890118E12, 4.0], [1.7189022E12, 5.333333333333333], [1.71889794E12, 4.166666666666667], [1.71890016E12, 4.0], [1.71890046E12, 4.8], [1.71889944E12, 4.0], [1.71890166E12, 5.333333333333333], [1.71890388E12, 3.3333333333333335], [1.71890268E12, 3.7333333333333334], [1.71889842E12, 3.5], [1.71890064E12, 4.833333333333333], [1.71890304E12, 6.666666666666667], [1.71889962E12, 4.333333333333333], [1.7188986E12, 3.5], [1.71890184E12, 5.333333333333333], [1.71890082E12, 4.0], [1.71890286E12, 3.3333333333333335], [1.71889788E12, 1.0666666666666667], [1.7189013E12, 4.0], [1.71890352E12, 3.3333333333333335], [1.7189001E12, 4.333333333333333], [1.71889908E12, 3.6333333333333333], [1.71890232E12, 5.333333333333333], [1.71890334E12, 6.666666666666667], [1.7189037E12, 3.3333333333333335], [1.71890028E12, 4.4], [1.71889806E12, 3.6666666666666665], [1.71890148E12, 4.966666666666667], [1.71889926E12, 4.0], [1.7189025E12, 2.6666666666666665], [1.71889824E12, 3.5], [1.71889854E12, 3.7], [1.71890076E12, 4.0], [1.71890196E12, 5.333333333333333], [1.71889974E12, 4.0], [1.71890298E12, 3.3333333333333335], [1.71889872E12, 3.6666666666666665], [1.71890094E12, 4.0], [1.71889992E12, 4.033333333333333], [1.71890214E12, 5.333333333333333], [1.71890316E12, 6.666666666666667], [1.7188989E12, 3.5], [1.71890112E12, 4.0], [1.7189016E12, 4.733333333333333], [1.71889818E12, 3.5], [1.7189004E12, 4.266666666666667], [1.71890262E12, 5.333333333333333], [1.71889938E12, 4.333333333333333], [1.71890142E12, 4.0], [1.71890364E12, 3.3333333333333335], [1.71889836E12, 3.5], [1.71890178E12, 5.333333333333333], [1.71890058E12, 4.233333333333333], [1.7189028E12, 5.266666666666667], [1.71889956E12, 4.333333333333333], [1.71890382E12, 3.3333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71890388E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71889788E12, "maxY": 6.666666666666667, "series": [{"data": [[1.71889884E12, 3.7], [1.71890226E12, 2.6666666666666665], [1.71890106E12, 4.0], [1.71890328E12, 6.666666666666667], [1.71890004E12, 4.433333333333334], [1.71889902E12, 3.6666666666666665], [1.71890124E12, 4.0], [1.71890244E12, 5.333333333333333], [1.718898E12, 4.2], [1.71890022E12, 4.366666666666666], [1.71890346E12, 6.666666666666667], [1.7188992E12, 4.333333333333333], [1.7188995E12, 4.4], [1.71889848E12, 3.5], [1.71890292E12, 6.666666666666667], [1.7189007E12, 4.0], [1.71890172E12, 5.333333333333333], [1.71889968E12, 4.366666666666666], [1.71890208E12, 5.333333333333333], [1.71889866E12, 3.5], [1.71890088E12, 4.0], [1.7189031E12, 3.3333333333333335], [1.71889986E12, 4.333333333333333], [1.7189019E12, 5.333333333333333], [1.71890256E12, 5.333333333333333], [1.71890358E12, 6.666666666666667], [1.71889914E12, 4.4], [1.71889812E12, 3.5], [1.71890136E12, 4.0], [1.71890034E12, 3.6333333333333333], [1.71890238E12, 5.333333333333333], [1.71890274E12, 3.1], [1.71889932E12, 4.0], [1.7188983E12, 3.5], [1.71890052E12, 4.933333333333334], [1.71890154E12, 4.6], [1.71890376E12, 6.666666666666667], [1.71890322E12, 3.3333333333333335], [1.7188998E12, 4.066666666666666], [1.71889878E12, 3.533333333333333], [1.718901E12, 4.0], [1.71890202E12, 2.6666666666666665], [1.71889998E12, 4.066666666666666], [1.71889896E12, 3.5], [1.7189034E12, 3.3333333333333335], [1.71890118E12, 4.0], [1.7189022E12, 5.333333333333333], [1.71889794E12, 4.2], [1.71890016E12, 4.0], [1.71890046E12, 4.7], [1.71889944E12, 4.333333333333333], [1.71890166E12, 5.333333333333333], [1.71890388E12, 6.666666666666667], [1.71890268E12, 5.6], [1.71889842E12, 3.5], [1.71890064E12, 4.833333333333333], [1.71890304E12, 6.666666666666667], [1.71889962E12, 4.333333333333333], [1.7188986E12, 3.6666666666666665], [1.71890184E12, 5.333333333333333], [1.71890082E12, 4.0], [1.71890286E12, 3.3333333333333335], [1.71889788E12, 1.0], [1.7189013E12, 4.0], [1.71890352E12, 3.3333333333333335], [1.7189001E12, 4.333333333333333], [1.71889908E12, 3.4], [1.71890232E12, 5.333333333333333], [1.71890334E12, 3.3333333333333335], [1.7189037E12, 3.3333333333333335], [1.71890028E12, 4.266666666666667], [1.71889806E12, 3.533333333333333], [1.71890148E12, 3.566666666666667], [1.71889926E12, 4.333333333333333], [1.7189025E12, 2.6666666666666665], [1.71889824E12, 3.5], [1.71889854E12, 3.533333333333333], [1.71890076E12, 4.0], [1.71890196E12, 5.333333333333333], [1.71889974E12, 4.333333333333333], [1.71890298E12, 3.3333333333333335], [1.71889872E12, 3.5], [1.71890094E12, 4.0], [1.71889992E12, 4.366666666666666], [1.71890214E12, 5.333333333333333], [1.71890316E12, 6.666666666666667], [1.7188989E12, 3.5], [1.71890112E12, 4.0], [1.7189016E12, 4.733333333333333], [1.71889818E12, 3.5], [1.7189004E12, 4.366666666666666], [1.71890262E12, 5.333333333333333], [1.71889938E12, 4.333333333333333], [1.71890142E12, 4.0], [1.71890364E12, 3.3333333333333335], [1.71889836E12, 3.6666666666666665], [1.71890178E12, 2.6666666666666665], [1.71890058E12, 4.233333333333333], [1.7189028E12, 5.266666666666667], [1.71889956E12, 4.0], [1.71890382E12, 3.3333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71890388E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71889788E12, "maxY": 6.666666666666667, "series": [{"data": [[1.71889884E12, 3.7], [1.71890226E12, 2.6666666666666665], [1.71890106E12, 4.0], [1.71890328E12, 6.666666666666667], [1.71890004E12, 4.433333333333334], [1.71889902E12, 3.6666666666666665], [1.71890124E12, 4.0], [1.71890244E12, 5.333333333333333], [1.718898E12, 4.2], [1.71890022E12, 4.366666666666666], [1.71890346E12, 6.666666666666667], [1.7188992E12, 4.333333333333333], [1.7188995E12, 4.4], [1.71889848E12, 3.5], [1.71890292E12, 6.666666666666667], [1.7189007E12, 4.0], [1.71890172E12, 5.333333333333333], [1.71889968E12, 4.366666666666666], [1.71890208E12, 5.333333333333333], [1.71889866E12, 3.5], [1.71890088E12, 4.0], [1.7189031E12, 3.3333333333333335], [1.71889986E12, 4.333333333333333], [1.7189019E12, 5.333333333333333], [1.71890256E12, 5.333333333333333], [1.71890358E12, 6.666666666666667], [1.71889914E12, 4.4], [1.71889812E12, 3.5], [1.71890136E12, 4.0], [1.71890034E12, 3.6333333333333333], [1.71890238E12, 5.333333333333333], [1.71890274E12, 3.1], [1.71889932E12, 4.0], [1.7188983E12, 3.5], [1.71890052E12, 4.933333333333334], [1.71890154E12, 4.6], [1.71890376E12, 6.666666666666667], [1.71890322E12, 3.3333333333333335], [1.7188998E12, 4.066666666666666], [1.71889878E12, 3.533333333333333], [1.718901E12, 4.0], [1.71890202E12, 2.6666666666666665], [1.71889998E12, 4.066666666666666], [1.71889896E12, 3.5], [1.7189034E12, 3.3333333333333335], [1.71890118E12, 4.0], [1.7189022E12, 5.333333333333333], [1.71889794E12, 4.2], [1.71890016E12, 4.0], [1.71890046E12, 4.7], [1.71889944E12, 4.333333333333333], [1.71890166E12, 5.333333333333333], [1.71890388E12, 6.666666666666667], [1.71890268E12, 5.6], [1.71889842E12, 3.5], [1.71890064E12, 4.833333333333333], [1.71890304E12, 6.666666666666667], [1.71889962E12, 4.333333333333333], [1.7188986E12, 3.6666666666666665], [1.71890184E12, 5.333333333333333], [1.71890082E12, 4.0], [1.71890286E12, 3.3333333333333335], [1.71889788E12, 1.0], [1.7189013E12, 4.0], [1.71890352E12, 3.3333333333333335], [1.7189001E12, 4.333333333333333], [1.71889908E12, 3.4], [1.71890232E12, 5.333333333333333], [1.71890334E12, 3.3333333333333335], [1.7189037E12, 3.3333333333333335], [1.71890028E12, 4.266666666666667], [1.71889806E12, 3.533333333333333], [1.71890148E12, 3.566666666666667], [1.71889926E12, 4.333333333333333], [1.7189025E12, 2.6666666666666665], [1.71889824E12, 3.5], [1.71889854E12, 3.533333333333333], [1.71890076E12, 4.0], [1.71890196E12, 5.333333333333333], [1.71889974E12, 4.333333333333333], [1.71890298E12, 3.3333333333333335], [1.71889872E12, 3.5], [1.71890094E12, 4.0], [1.71889992E12, 4.366666666666666], [1.71890214E12, 5.333333333333333], [1.71890316E12, 6.666666666666667], [1.7188989E12, 3.5], [1.71890112E12, 4.0], [1.7189016E12, 4.733333333333333], [1.71889818E12, 3.5], [1.7189004E12, 4.366666666666666], [1.71890262E12, 5.333333333333333], [1.71889938E12, 4.333333333333333], [1.71890142E12, 4.0], [1.71890364E12, 3.3333333333333335], [1.71889836E12, 3.6666666666666665], [1.71890178E12, 2.6666666666666665], [1.71890058E12, 4.233333333333333], [1.7189028E12, 5.266666666666667], [1.71889956E12, 4.0], [1.71890382E12, 3.3333333333333335]], "isOverall": false, "label": "Directors by name-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71890388E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71889788E12, "maxY": 6.666666666666667, "series": [{"data": [[1.71889884E12, 3.7], [1.71890226E12, 2.6666666666666665], [1.71890106E12, 4.0], [1.71890328E12, 6.666666666666667], [1.71890004E12, 4.433333333333334], [1.71889902E12, 3.6666666666666665], [1.71890124E12, 4.0], [1.71890244E12, 5.333333333333333], [1.718898E12, 4.2], [1.71890022E12, 4.366666666666666], [1.71890346E12, 6.666666666666667], [1.7188992E12, 4.333333333333333], [1.7188995E12, 4.4], [1.71889848E12, 3.5], [1.71890292E12, 6.666666666666667], [1.7189007E12, 4.0], [1.71890172E12, 5.333333333333333], [1.71889968E12, 4.366666666666666], [1.71890208E12, 5.333333333333333], [1.71889866E12, 3.5], [1.71890088E12, 4.0], [1.7189031E12, 3.3333333333333335], [1.71889986E12, 4.333333333333333], [1.7189019E12, 5.333333333333333], [1.71890256E12, 5.333333333333333], [1.71890358E12, 6.666666666666667], [1.71889914E12, 4.4], [1.71889812E12, 3.5], [1.71890136E12, 4.0], [1.71890034E12, 3.6333333333333333], [1.71890238E12, 5.333333333333333], [1.71890274E12, 3.1], [1.71889932E12, 4.0], [1.7188983E12, 3.5], [1.71890052E12, 4.933333333333334], [1.71890154E12, 4.6], [1.71890376E12, 6.666666666666667], [1.71890322E12, 3.3333333333333335], [1.7188998E12, 4.066666666666666], [1.71889878E12, 3.533333333333333], [1.718901E12, 4.0], [1.71890202E12, 2.6666666666666665], [1.71889998E12, 4.066666666666666], [1.71889896E12, 3.5], [1.7189034E12, 3.3333333333333335], [1.71890118E12, 4.0], [1.7189022E12, 5.333333333333333], [1.71889794E12, 4.2], [1.71890016E12, 4.0], [1.71890046E12, 4.7], [1.71889944E12, 4.333333333333333], [1.71890166E12, 5.333333333333333], [1.71890388E12, 6.666666666666667], [1.71890268E12, 5.6], [1.71889842E12, 3.5], [1.71890064E12, 4.833333333333333], [1.71890304E12, 6.666666666666667], [1.71889962E12, 4.333333333333333], [1.7188986E12, 3.6666666666666665], [1.71890184E12, 5.333333333333333], [1.71890082E12, 4.0], [1.71890286E12, 3.3333333333333335], [1.71889788E12, 1.0], [1.7189013E12, 4.0], [1.71890352E12, 3.3333333333333335], [1.7189001E12, 4.333333333333333], [1.71889908E12, 3.4], [1.71890232E12, 5.333333333333333], [1.71890334E12, 3.3333333333333335], [1.7189037E12, 3.3333333333333335], [1.71890028E12, 4.266666666666667], [1.71889806E12, 3.533333333333333], [1.71890148E12, 3.566666666666667], [1.71889926E12, 4.333333333333333], [1.7189025E12, 2.6666666666666665], [1.71889824E12, 3.5], [1.71889854E12, 3.533333333333333], [1.71890076E12, 4.0], [1.71890196E12, 5.333333333333333], [1.71889974E12, 4.333333333333333], [1.71890298E12, 3.3333333333333335], [1.71889872E12, 3.5], [1.71890094E12, 4.0], [1.71889992E12, 4.366666666666666], [1.71890214E12, 5.333333333333333], [1.71890316E12, 6.666666666666667], [1.7188989E12, 3.5], [1.71890112E12, 4.0], [1.7189016E12, 4.733333333333333], [1.71889818E12, 3.5], [1.7189004E12, 4.366666666666666], [1.71890262E12, 5.333333333333333], [1.71889938E12, 4.333333333333333], [1.71890142E12, 4.0], [1.71890364E12, 3.3333333333333335], [1.71889836E12, 3.6666666666666665], [1.71890178E12, 2.6666666666666665], [1.71890058E12, 4.233333333333333], [1.7189028E12, 5.266666666666667], [1.71889956E12, 4.0], [1.71890382E12, 3.3333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71890388E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

