/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 69568.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 868.0], [0.3, 909.0], [0.4, 937.0], [0.5, 952.0], [0.6, 958.0], [0.7, 971.0], [0.8, 981.0], [0.9, 991.0], [1.0, 1001.0], [1.1, 1013.0], [1.2, 1023.0], [1.3, 1035.0], [1.4, 1045.0], [1.5, 1056.0], [1.6, 1065.0], [1.7, 1081.0], [1.8, 1098.0], [1.9, 1109.0], [2.0, 1115.0], [2.1, 1125.0], [2.2, 1132.0], [2.3, 1143.0], [2.4, 1152.0], [2.5, 1162.0], [2.6, 1176.0], [2.7, 1188.0], [2.8, 1202.0], [2.9, 1211.0], [3.0, 1223.0], [3.1, 1236.0], [3.2, 1238.0], [3.3, 1249.0], [3.4, 1265.0], [3.5, 1270.0], [3.6, 1281.0], [3.7, 1298.0], [3.8, 1322.0], [3.9, 1334.0], [4.0, 1345.0], [4.1, 1353.0], [4.2, 1380.0], [4.3, 1398.0], [4.4, 1419.0], [4.5, 1431.0], [4.6, 1438.0], [4.7, 1441.0], [4.8, 1445.0], [4.9, 1448.0], [5.0, 1452.0], [5.1, 1457.0], [5.2, 1462.0], [5.3, 1464.0], [5.4, 1467.0], [5.5, 1471.0], [5.6, 1473.0], [5.7, 1474.0], [5.8, 1476.0], [5.9, 1478.0], [6.0, 1479.0], [6.1, 1481.0], [6.2, 1482.0], [6.3, 1484.0], [6.4, 1485.0], [6.5, 1486.0], [6.6, 1487.0], [6.7, 1488.0], [6.8, 1490.0], [6.9, 1491.0], [7.0, 1492.0], [7.1, 1493.0], [7.2, 1494.0], [7.3, 1496.0], [7.4, 1498.0], [7.5, 1498.0], [7.6, 1499.0], [7.7, 1501.0], [7.8, 1502.0], [7.9, 1503.0], [8.0, 1504.0], [8.1, 1506.0], [8.2, 1507.0], [8.3, 1508.0], [8.4, 1510.0], [8.5, 1511.0], [8.6, 1512.0], [8.7, 1514.0], [8.8, 1515.0], [8.9, 1516.0], [9.0, 1517.0], [9.1, 1519.0], [9.2, 1520.0], [9.3, 1522.0], [9.4, 1523.0], [9.5, 1524.0], [9.6, 1526.0], [9.7, 1527.0], [9.8, 1529.0], [9.9, 1529.0], [10.0, 1531.0], [10.1, 1532.0], [10.2, 1532.0], [10.3, 1533.0], [10.4, 1534.0], [10.5, 1535.0], [10.6, 1536.0], [10.7, 1536.0], [10.8, 1537.0], [10.9, 1538.0], [11.0, 1539.0], [11.1, 1540.0], [11.2, 1540.0], [11.3, 1541.0], [11.4, 1541.0], [11.5, 1542.0], [11.6, 1542.0], [11.7, 1543.0], [11.8, 1543.0], [11.9, 1544.0], [12.0, 1545.0], [12.1, 1545.0], [12.2, 1545.0], [12.3, 1546.0], [12.4, 1547.0], [12.5, 1547.0], [12.6, 1547.0], [12.7, 1548.0], [12.8, 1548.0], [12.9, 1549.0], [13.0, 1549.0], [13.1, 1550.0], [13.2, 1550.0], [13.3, 1551.0], [13.4, 1551.0], [13.5, 1552.0], [13.6, 1553.0], [13.7, 1553.0], [13.8, 1553.0], [13.9, 1554.0], [14.0, 1554.0], [14.1, 1555.0], [14.2, 1556.0], [14.3, 1557.0], [14.4, 1559.0], [14.5, 1561.0], [14.6, 1563.0], [14.7, 1564.0], [14.8, 1566.0], [14.9, 1569.0], [15.0, 1571.0], [15.1, 1574.0], [15.2, 1576.0], [15.3, 1578.0], [15.4, 1580.0], [15.5, 1583.0], [15.6, 1584.0], [15.7, 1587.0], [15.8, 1590.0], [15.9, 1593.0], [16.0, 1595.0], [16.1, 1597.0], [16.2, 1599.0], [16.3, 1601.0], [16.4, 1603.0], [16.5, 1604.0], [16.6, 1606.0], [16.7, 1608.0], [16.8, 1614.0], [16.9, 1617.0], [17.0, 1619.0], [17.1, 1623.0], [17.2, 1626.0], [17.3, 1627.0], [17.4, 1629.0], [17.5, 1631.0], [17.6, 1632.0], [17.7, 1634.0], [17.8, 1635.0], [17.9, 1636.0], [18.0, 1637.0], [18.1, 1637.0], [18.2, 1639.0], [18.3, 1640.0], [18.4, 1641.0], [18.5, 1642.0], [18.6, 1643.0], [18.7, 1643.0], [18.8, 1644.0], [18.9, 1645.0], [19.0, 1646.0], [19.1, 1646.0], [19.2, 1647.0], [19.3, 1648.0], [19.4, 1648.0], [19.5, 1649.0], [19.6, 1649.0], [19.7, 1650.0], [19.8, 1650.0], [19.9, 1651.0], [20.0, 1651.0], [20.1, 1652.0], [20.2, 1653.0], [20.3, 1653.0], [20.4, 1654.0], [20.5, 1654.0], [20.6, 1655.0], [20.7, 1656.0], [20.8, 1657.0], [20.9, 1658.0], [21.0, 1659.0], [21.1, 1660.0], [21.2, 1662.0], [21.3, 1664.0], [21.4, 1666.0], [21.5, 1671.0], [21.6, 1677.0], [21.7, 1687.0], [21.8, 1693.0], [21.9, 1698.0], [22.0, 1706.0], [22.1, 1726.0], [22.2, 1738.0], [22.3, 1742.0], [22.4, 1748.0], [22.5, 1750.0], [22.6, 1755.0], [22.7, 1767.0], [22.8, 1781.0], [22.9, 1788.0], [23.0, 1804.0], [23.1, 1846.0], [23.2, 1862.0], [23.3, 1977.0], [23.4, 2125.0], [23.5, 2257.0], [23.6, 2323.0], [23.7, 2555.0], [23.8, 2656.0], [23.9, 2826.0], [24.0, 2926.0], [24.1, 3010.0], [24.2, 3077.0], [24.3, 3169.0], [24.4, 3218.0], [24.5, 3245.0], [24.6, 3267.0], [24.7, 3280.0], [24.8, 3287.0], [24.9, 3292.0], [25.0, 3294.0], [25.1, 3298.0], [25.2, 3301.0], [25.3, 3304.0], [25.4, 3308.0], [25.5, 3310.0], [25.6, 3313.0], [25.7, 3315.0], [25.8, 3318.0], [25.9, 3320.0], [26.0, 3322.0], [26.1, 3324.0], [26.2, 3327.0], [26.3, 3329.0], [26.4, 3331.0], [26.5, 3338.0], [26.6, 3343.0], [26.7, 3348.0], [26.8, 3350.0], [26.9, 3353.0], [27.0, 3356.0], [27.1, 3358.0], [27.2, 3361.0], [27.3, 3363.0], [27.4, 3365.0], [27.5, 3368.0], [27.6, 3369.0], [27.7, 3370.0], [27.8, 3372.0], [27.9, 3373.0], [28.0, 3373.0], [28.1, 3374.0], [28.2, 3375.0], [28.3, 3376.0], [28.4, 3377.0], [28.5, 3378.0], [28.6, 3379.0], [28.7, 3380.0], [28.8, 3380.0], [28.9, 3381.0], [29.0, 3382.0], [29.1, 3383.0], [29.2, 3384.0], [29.3, 3384.0], [29.4, 3384.0], [29.5, 3385.0], [29.6, 3386.0], [29.7, 3386.0], [29.8, 3387.0], [29.9, 3388.0], [30.0, 3389.0], [30.1, 3389.0], [30.2, 3390.0], [30.3, 3390.0], [30.4, 3391.0], [30.5, 3392.0], [30.6, 3393.0], [30.7, 3393.0], [30.8, 3394.0], [30.9, 3395.0], [31.0, 3395.0], [31.1, 3396.0], [31.2, 3397.0], [31.3, 3397.0], [31.4, 3398.0], [31.5, 3399.0], [31.6, 3400.0], [31.7, 3401.0], [31.8, 3401.0], [31.9, 3402.0], [32.0, 3403.0], [32.1, 3404.0], [32.2, 3406.0], [32.3, 3409.0], [32.4, 3410.0], [32.5, 3411.0], [32.6, 3412.0], [32.7, 3414.0], [32.8, 3415.0], [32.9, 3417.0], [33.0, 3421.0], [33.1, 3424.0], [33.2, 3427.0], [33.3, 3429.0], [33.4, 3434.0], [33.5, 3439.0], [33.6, 3443.0], [33.7, 3450.0], [33.8, 3454.0], [33.9, 3458.0], [34.0, 3459.0], [34.1, 3462.0], [34.2, 3465.0], [34.3, 3468.0], [34.4, 3469.0], [34.5, 3471.0], [34.6, 3472.0], [34.7, 3473.0], [34.8, 3474.0], [34.9, 3475.0], [35.0, 3476.0], [35.1, 3477.0], [35.2, 3478.0], [35.3, 3479.0], [35.4, 3479.0], [35.5, 3480.0], [35.6, 3481.0], [35.7, 3482.0], [35.8, 3482.0], [35.9, 3482.0], [36.0, 3483.0], [36.1, 3483.0], [36.2, 3483.0], [36.3, 3484.0], [36.4, 3484.0], [36.5, 3484.0], [36.6, 3485.0], [36.7, 3485.0], [36.8, 3486.0], [36.9, 3486.0], [37.0, 3487.0], [37.1, 3487.0], [37.2, 3488.0], [37.3, 3488.0], [37.4, 3489.0], [37.5, 3489.0], [37.6, 3489.0], [37.7, 3490.0], [37.8, 3490.0], [37.9, 3490.0], [38.0, 3491.0], [38.1, 3491.0], [38.2, 3491.0], [38.3, 3491.0], [38.4, 3492.0], [38.5, 3492.0], [38.6, 3492.0], [38.7, 3492.0], [38.8, 3493.0], [38.9, 3493.0], [39.0, 3493.0], [39.1, 3494.0], [39.2, 3494.0], [39.3, 3494.0], [39.4, 3495.0], [39.5, 3495.0], [39.6, 3495.0], [39.7, 3496.0], [39.8, 3496.0], [39.9, 3497.0], [40.0, 3497.0], [40.1, 3498.0], [40.2, 3499.0], [40.3, 3499.0], [40.4, 3500.0], [40.5, 3500.0], [40.6, 3501.0], [40.7, 3502.0], [40.8, 3503.0], [40.9, 3504.0], [41.0, 3505.0], [41.1, 3505.0], [41.2, 3506.0], [41.3, 3507.0], [41.4, 3508.0], [41.5, 3509.0], [41.6, 3510.0], [41.7, 3513.0], [41.8, 3517.0], [41.9, 3526.0], [42.0, 3551.0], [42.1, 3569.0], [42.2, 3582.0], [42.3, 3588.0], [42.4, 3590.0], [42.5, 3593.0], [42.6, 3596.0], [42.7, 3600.0], [42.8, 3602.0], [42.9, 3609.0], [43.0, 3617.0], [43.1, 3626.0], [43.2, 3698.0], [43.3, 3720.0], [43.4, 4944.0], [43.5, 8400.0], [43.6, 8406.0], [43.7, 8411.0], [43.8, 8414.0], [43.9, 8420.0], [44.0, 8424.0], [44.1, 8437.0], [44.2, 8452.0], [44.3, 8465.0], [44.4, 8474.0], [44.5, 8479.0], [44.6, 8484.0], [44.7, 8486.0], [44.8, 8488.0], [44.9, 8489.0], [45.0, 8491.0], [45.1, 8493.0], [45.2, 8494.0], [45.3, 8495.0], [45.4, 8497.0], [45.5, 8498.0], [45.6, 8500.0], [45.7, 8501.0], [45.8, 8502.0], [45.9, 8502.0], [46.0, 8504.0], [46.1, 8504.0], [46.2, 8505.0], [46.3, 8505.0], [46.4, 8507.0], [46.5, 8508.0], [46.6, 8510.0], [46.7, 8511.0], [46.8, 8512.0], [46.9, 8513.0], [47.0, 8513.0], [47.1, 8514.0], [47.2, 8516.0], [47.3, 8516.0], [47.4, 8518.0], [47.5, 8518.0], [47.6, 8520.0], [47.7, 8521.0], [47.8, 8523.0], [47.9, 8524.0], [48.0, 8525.0], [48.1, 8528.0], [48.2, 8530.0], [48.3, 8533.0], [48.4, 8535.0], [48.5, 8538.0], [48.6, 8540.0], [48.7, 8542.0], [48.8, 8544.0], [48.9, 8547.0], [49.0, 8548.0], [49.1, 8550.0], [49.2, 8553.0], [49.3, 8555.0], [49.4, 8558.0], [49.5, 8560.0], [49.6, 8561.0], [49.7, 8565.0], [49.8, 8566.0], [49.9, 8569.0], [50.0, 8571.0], [50.1, 8573.0], [50.2, 8575.0], [50.3, 8578.0], [50.4, 8580.0], [50.5, 8581.0], [50.6, 8584.0], [50.7, 8585.0], [50.8, 8586.0], [50.9, 8588.0], [51.0, 8589.0], [51.1, 8590.0], [51.2, 8591.0], [51.3, 8592.0], [51.4, 8594.0], [51.5, 8595.0], [51.6, 8596.0], [51.7, 8597.0], [51.8, 8597.0], [51.9, 8599.0], [52.0, 8599.0], [52.1, 8600.0], [52.2, 8601.0], [52.3, 8601.0], [52.4, 8602.0], [52.5, 8603.0], [52.6, 8604.0], [52.7, 8604.0], [52.8, 8604.0], [52.9, 8605.0], [53.0, 8605.0], [53.1, 8606.0], [53.2, 8607.0], [53.3, 8607.0], [53.4, 8608.0], [53.5, 8609.0], [53.6, 8609.0], [53.7, 8610.0], [53.8, 8610.0], [53.9, 8610.0], [54.0, 8611.0], [54.1, 8612.0], [54.2, 8612.0], [54.3, 8613.0], [54.4, 8613.0], [54.5, 8613.0], [54.6, 8614.0], [54.7, 8614.0], [54.8, 8615.0], [54.9, 8615.0], [55.0, 8616.0], [55.1, 8616.0], [55.2, 8616.0], [55.3, 8617.0], [55.4, 8618.0], [55.5, 8618.0], [55.6, 8619.0], [55.7, 8619.0], [55.8, 8620.0], [55.9, 8621.0], [56.0, 8622.0], [56.1, 8623.0], [56.2, 8624.0], [56.3, 8624.0], [56.4, 8625.0], [56.5, 8627.0], [56.6, 8628.0], [56.7, 8630.0], [56.8, 8631.0], [56.9, 8633.0], [57.0, 8635.0], [57.1, 8637.0], [57.2, 8639.0], [57.3, 8642.0], [57.4, 8645.0], [57.5, 8649.0], [57.6, 8651.0], [57.7, 8656.0], [57.8, 8659.0], [57.9, 8669.0], [58.0, 8677.0], [58.1, 8686.0], [58.2, 8691.0], [58.3, 8699.0], [58.4, 8707.0], [58.5, 8709.0], [58.6, 8714.0], [58.7, 8719.0], [58.8, 8722.0], [58.9, 8724.0], [59.0, 8728.0], [59.1, 8731.0], [59.2, 8739.0], [59.3, 8751.0], [59.4, 8807.0], [59.5, 8814.0], [59.6, 8817.0], [59.7, 8821.0], [59.8, 8829.0], [59.9, 8928.0], [60.0, 8935.0], [60.1, 12470.0], [60.2, 16685.0], [60.3, 16992.0], [60.4, 17140.0], [60.5, 17248.0], [60.6, 17341.0], [60.7, 17462.0], [60.8, 17619.0], [60.9, 17678.0], [61.0, 17772.0], [61.1, 17871.0], [61.2, 18023.0], [61.3, 18363.0], [61.4, 18896.0], [61.5, 19419.0], [61.6, 20096.0], [61.7, 20108.0], [61.8, 20114.0], [61.9, 20117.0], [62.0, 20120.0], [62.1, 20122.0], [62.2, 20123.0], [62.3, 20126.0], [62.4, 20127.0], [62.5, 20128.0], [62.6, 20130.0], [62.7, 20131.0], [62.8, 20132.0], [62.9, 20133.0], [63.0, 20135.0], [63.1, 20136.0], [63.2, 20137.0], [63.3, 20139.0], [63.4, 20140.0], [63.5, 20141.0], [63.6, 20142.0], [63.7, 20143.0], [63.8, 20144.0], [63.9, 20145.0], [64.0, 20145.0], [64.1, 20146.0], [64.2, 20146.0], [64.3, 20148.0], [64.4, 20149.0], [64.5, 20150.0], [64.6, 20152.0], [64.7, 20154.0], [64.8, 20156.0], [64.9, 20158.0], [65.0, 20160.0], [65.1, 20163.0], [65.2, 20165.0], [65.3, 20166.0], [65.4, 20170.0], [65.5, 20172.0], [65.6, 20174.0], [65.7, 20176.0], [65.8, 20180.0], [65.9, 20181.0], [66.0, 20182.0], [66.1, 20185.0], [66.2, 20186.0], [66.3, 20187.0], [66.4, 20189.0], [66.5, 20190.0], [66.6, 20192.0], [66.7, 20193.0], [66.8, 20194.0], [66.9, 20196.0], [67.0, 20198.0], [67.1, 20200.0], [67.2, 20202.0], [67.3, 20204.0], [67.4, 20205.0], [67.5, 20207.0], [67.6, 20209.0], [67.7, 20212.0], [67.8, 20216.0], [67.9, 20219.0], [68.0, 20222.0], [68.1, 20226.0], [68.2, 20231.0], [68.3, 20233.0], [68.4, 20235.0], [68.5, 20238.0], [68.6, 20240.0], [68.7, 20243.0], [68.8, 20245.0], [68.9, 20248.0], [69.0, 20250.0], [69.1, 20252.0], [69.2, 20253.0], [69.3, 20254.0], [69.4, 20255.0], [69.5, 20257.0], [69.6, 20258.0], [69.7, 20259.0], [69.8, 20261.0], [69.9, 20262.0], [70.0, 20263.0], [70.1, 20265.0], [70.2, 20265.0], [70.3, 20267.0], [70.4, 20268.0], [70.5, 20268.0], [70.6, 20269.0], [70.7, 20270.0], [70.8, 20271.0], [70.9, 20271.0], [71.0, 20272.0], [71.1, 20273.0], [71.2, 20273.0], [71.3, 20274.0], [71.4, 20274.0], [71.5, 20275.0], [71.6, 20276.0], [71.7, 20277.0], [71.8, 20277.0], [71.9, 20278.0], [72.0, 20278.0], [72.1, 20279.0], [72.2, 20279.0], [72.3, 20280.0], [72.4, 20281.0], [72.5, 20281.0], [72.6, 20282.0], [72.7, 20282.0], [72.8, 20283.0], [72.9, 20283.0], [73.0, 20284.0], [73.1, 20284.0], [73.2, 20284.0], [73.3, 20285.0], [73.4, 20286.0], [73.5, 20287.0], [73.6, 20288.0], [73.7, 20289.0], [73.8, 20289.0], [73.9, 20290.0], [74.0, 20290.0], [74.1, 20291.0], [74.2, 20292.0], [74.3, 20293.0], [74.4, 20295.0], [74.5, 20295.0], [74.6, 20296.0], [74.7, 20296.0], [74.8, 20298.0], [74.9, 20299.0], [75.0, 20300.0], [75.1, 20301.0], [75.2, 20303.0], [75.3, 20305.0], [75.4, 20306.0], [75.5, 20309.0], [75.6, 20312.0], [75.7, 20315.0], [75.8, 20317.0], [75.9, 20321.0], [76.0, 20324.0], [76.1, 20326.0], [76.2, 20329.0], [76.3, 20331.0], [76.4, 20336.0], [76.5, 20340.0], [76.6, 20343.0], [76.7, 20348.0], [76.8, 20352.0], [76.9, 20355.0], [77.0, 20360.0], [77.1, 20363.0], [77.2, 20365.0], [77.3, 20369.0], [77.4, 20371.0], [77.5, 20373.0], [77.6, 20375.0], [77.7, 20378.0], [77.8, 20381.0], [77.9, 20384.0], [78.0, 20385.0], [78.1, 20387.0], [78.2, 20388.0], [78.3, 20388.0], [78.4, 20390.0], [78.5, 20391.0], [78.6, 20392.0], [78.7, 20394.0], [78.8, 20396.0], [78.9, 20397.0], [79.0, 20400.0], [79.1, 20401.0], [79.2, 20403.0], [79.3, 20405.0], [79.4, 20408.0], [79.5, 20413.0], [79.6, 20421.0], [79.7, 20429.0], [79.8, 20435.0], [79.9, 20438.0], [80.0, 20441.0], [80.1, 20451.0], [80.2, 32638.0], [80.3, 33869.0], [80.4, 33964.0], [80.5, 34072.0], [80.6, 34086.0], [80.7, 34105.0], [80.8, 34117.0], [80.9, 34120.0], [81.0, 34127.0], [81.1, 34139.0], [81.2, 34149.0], [81.3, 34168.0], [81.4, 34298.0], [81.5, 35009.0], [81.6, 35020.0], [81.7, 35026.0], [81.8, 35028.0], [81.9, 35031.0], [82.0, 35033.0], [82.1, 35034.0], [82.2, 35035.0], [82.3, 35039.0], [82.4, 35042.0], [82.5, 35049.0], [82.6, 35257.0], [82.7, 35275.0], [82.8, 35285.0], [82.9, 35292.0], [83.0, 35301.0], [83.1, 35317.0], [83.2, 35324.0], [83.3, 35328.0], [83.4, 35331.0], [83.5, 35336.0], [83.6, 35338.0], [83.7, 35341.0], [83.8, 35345.0], [83.9, 35351.0], [84.0, 35362.0], [84.1, 35371.0], [84.2, 35387.0], [84.3, 35431.0], [84.4, 35445.0], [84.5, 35452.0], [84.6, 35480.0], [84.7, 35495.0], [84.8, 35506.0], [84.9, 35512.0], [85.0, 35518.0], [85.1, 35527.0], [85.2, 35531.0], [85.3, 35548.0], [85.4, 35575.0], [85.5, 35600.0], [85.6, 35608.0], [85.7, 35618.0], [85.8, 35652.0], [85.9, 35968.0], [86.0, 35979.0], [86.1, 35984.0], [86.2, 35990.0], [86.3, 35997.0], [86.4, 36004.0], [86.5, 36013.0], [86.6, 36022.0], [86.7, 36038.0], [86.8, 36053.0], [86.9, 36059.0], [87.0, 36065.0], [87.1, 36073.0], [87.2, 36083.0], [87.3, 36090.0], [87.4, 36092.0], [87.5, 36096.0], [87.6, 36099.0], [87.7, 36103.0], [87.8, 36106.0], [87.9, 36109.0], [88.0, 36123.0], [88.1, 36565.0], [88.2, 36616.0], [88.3, 36639.0], [88.4, 36776.0], [88.5, 36805.0], [88.6, 36820.0], [88.7, 36826.0], [88.8, 36832.0], [88.9, 36836.0], [89.0, 36839.0], [89.1, 36845.0], [89.2, 36850.0], [89.3, 36856.0], [89.4, 36860.0], [89.5, 36863.0], [89.6, 36866.0], [89.7, 36868.0], [89.8, 36870.0], [89.9, 36875.0], [90.0, 36879.0], [90.1, 36884.0], [90.2, 36891.0], [90.3, 36902.0], [90.4, 36909.0], [90.5, 36911.0], [90.6, 36920.0], [90.7, 36924.0], [90.8, 36927.0], [90.9, 36929.0], [91.0, 36932.0], [91.1, 36935.0], [91.2, 36939.0], [91.3, 36943.0], [91.4, 36954.0], [91.5, 36965.0], [91.6, 36971.0], [91.7, 36984.0], [91.8, 37004.0], [91.9, 37012.0], [92.0, 37017.0], [92.1, 37022.0], [92.2, 37027.0], [92.3, 37034.0], [92.4, 37040.0], [92.5, 37046.0], [92.6, 37053.0], [92.7, 37058.0], [92.8, 37067.0], [92.9, 37078.0], [93.0, 37091.0], [93.1, 37114.0], [93.2, 37147.0], [93.3, 37167.0], [93.4, 37181.0], [93.5, 37204.0], [93.6, 37363.0], [93.7, 37651.0], [93.8, 37672.0], [93.9, 37683.0], [94.0, 37690.0], [94.1, 37697.0], [94.2, 37706.0], [94.3, 37716.0], [94.4, 37720.0], [94.5, 37724.0], [94.6, 37729.0], [94.7, 37737.0], [94.8, 37747.0], [94.9, 37756.0], [95.0, 37773.0], [95.1, 37797.0], [95.2, 37839.0], [95.3, 37860.0], [95.4, 37871.0], [95.5, 37879.0], [95.6, 37891.0], [95.7, 37900.0], [95.8, 37914.0], [95.9, 37966.0], [96.0, 38018.0], [96.1, 38552.0], [96.2, 38575.0], [96.3, 38590.0], [96.4, 38624.0], [96.5, 38638.0], [96.6, 38646.0], [96.7, 38662.0], [96.8, 38684.0], [96.9, 38721.0], [97.0, 38750.0], [97.1, 38830.0], [97.2, 40216.0], [97.3, 40230.0], [97.4, 40233.0], [97.5, 40236.0], [97.6, 40240.0], [97.7, 40244.0], [97.8, 40246.0], [97.9, 40249.0], [98.0, 40251.0], [98.1, 40255.0], [98.2, 40257.0], [98.3, 40260.0], [98.4, 40268.0], [98.5, 40344.0], [98.6, 40351.0], [98.7, 40354.0], [98.8, 40360.0], [98.9, 40366.0], [99.0, 40372.0], [99.1, 40375.0], [99.2, 40382.0], [99.3, 40388.0], [99.4, 40392.0], [99.5, 40397.0], [99.6, 40406.0], [99.7, 49511.0], [99.8, 51903.0], [99.9, 62301.0], [100.0, 69568.0]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1422.0, "series": [{"data": [[0.0, 22.0], [68300.0, 2.0], [69500.0, 4.0], [34300.0, 2.0], [33900.0, 18.0], [34100.0, 114.0], [33300.0, 2.0], [34700.0, 2.0], [33500.0, 2.0], [35500.0, 122.0], [36100.0, 60.0], [36500.0, 18.0], [36700.0, 26.0], [35900.0, 88.0], [35100.0, 2.0], [35300.0, 214.0], [38500.0, 44.0], [36900.0, 242.0], [37700.0, 156.0], [37900.0, 50.0], [38900.0, 2.0], [38700.0, 34.0], [37500.0, 2.0], [38300.0, 2.0], [37100.0, 72.0], [37300.0, 6.0], [40300.0, 176.0], [39100.0, 2.0], [50500.0, 2.0], [49700.0, 2.0], [50100.0, 2.0], [49500.0, 2.0], [49900.0, 2.0], [52900.0, 4.0], [52700.0, 2.0], [52100.0, 2.0], [51900.0, 2.0], [62300.0, 2.0], [67800.0, 2.0], [69400.0, 2.0], [800.0, 24.0], [900.0, 114.0], [1000.0, 132.0], [1100.0, 154.0], [1200.0, 152.0], [1300.0, 96.0], [1400.0, 532.0], [1500.0, 1394.0], [1600.0, 914.0], [1700.0, 170.0], [1800.0, 44.0], [1900.0, 10.0], [2000.0, 12.0], [2100.0, 16.0], [2300.0, 14.0], [2200.0, 10.0], [2400.0, 6.0], [2500.0, 12.0], [2600.0, 14.0], [2800.0, 14.0], [2700.0, 8.0], [2900.0, 18.0], [3000.0, 22.0], [3100.0, 24.0], [3300.0, 1028.0], [3200.0, 128.0], [3400.0, 1422.0], [3500.0, 374.0], [3600.0, 86.0], [3700.0, 18.0], [3800.0, 6.0], [3900.0, 2.0], [66900.0, 2.0], [68500.0, 2.0], [4700.0, 2.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 2.0], [6400.0, 2.0], [8600.0, 1006.0], [8500.0, 1042.0], [8400.0, 338.0], [8700.0, 164.0], [8300.0, 10.0], [8800.0, 80.0], [8900.0, 40.0], [12200.0, 2.0], [12400.0, 4.0], [12600.0, 2.0], [12300.0, 2.0], [13500.0, 2.0], [15000.0, 2.0], [16000.0, 2.0], [16200.0, 2.0], [17300.0, 18.0], [16800.0, 8.0], [16700.0, 2.0], [17400.0, 10.0], [16500.0, 2.0], [16900.0, 8.0], [17100.0, 16.0], [17200.0, 10.0], [17000.0, 10.0], [16600.0, 4.0], [17600.0, 26.0], [17700.0, 16.0], [18000.0, 12.0], [17800.0, 12.0], [18200.0, 4.0], [18300.0, 6.0], [18400.0, 2.0], [17900.0, 10.0], [17500.0, 10.0], [18100.0, 2.0], [18500.0, 2.0], [19000.0, 4.0], [19200.0, 2.0], [18600.0, 2.0], [18800.0, 6.0], [19100.0, 2.0], [18900.0, 6.0], [19400.0, 6.0], [20200.0, 1276.0], [20300.0, 644.0], [20100.0, 882.0], [20400.0, 194.0], [20000.0, 4.0], [19600.0, 2.0], [19500.0, 6.0], [32500.0, 2.0], [32600.0, 2.0], [32700.0, 2.0], [33600.0, 6.0], [34200.0, 2.0], [34400.0, 4.0], [33400.0, 2.0], [34000.0, 38.0], [33800.0, 6.0], [34800.0, 2.0], [36400.0, 2.0], [36800.0, 292.0], [35400.0, 76.0], [35600.0, 50.0], [35200.0, 64.0], [36000.0, 204.0], [36600.0, 28.0], [36200.0, 2.0], [35800.0, 2.0], [35000.0, 172.0], [38600.0, 82.0], [37600.0, 82.0], [37800.0, 92.0], [38800.0, 14.0], [38200.0, 2.0], [38000.0, 2.0], [38400.0, 6.0], [37000.0, 204.0], [37200.0, 14.0], [40200.0, 200.0], [40400.0, 24.0], [39000.0, 2.0], [45000.0, 2.0], [48800.0, 2.0], [50200.0, 2.0], [50600.0, 2.0], [49600.0, 2.0], [53000.0, 2.0], [52200.0, 2.0], [52000.0, 2.0], [64200.0, 2.0]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 69500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 648.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14408.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 648.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14408.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1064.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.71881268E12, "maxY": 100.0, "series": [{"data": [[1.71881484E12, 50.0], [1.71881454E12, 50.0], [1.71881502E12, 50.0], [1.71881496E12, 50.0], [1.71881466E12, 50.0], [1.71881514E12, 40.85999999999998], [1.7188146E12, 50.0], [1.71881508E12, 50.0], [1.71881478E12, 50.0], [1.71881472E12, 50.0], [1.7188149E12, 50.0]], "isOverall": false, "label": "Directors by name D", "isController": false}, {"data": [[1.71881436E12, 20.0], [1.71881388E12, 20.0], [1.71881406E12, 20.0], [1.71881448E12, 20.0], [1.718814E12, 20.0], [1.71881418E12, 20.0], [1.71881412E12, 20.0], [1.7188143E12, 20.0], [1.71881424E12, 20.0], [1.71881442E12, 20.0], [1.71881394E12, 20.0]], "isOverall": false, "label": "Directors by name C", "isController": false}, {"data": [[1.7188134E12, 10.0], [1.71881388E12, 10.0], [1.71881358E12, 10.0], [1.71881352E12, 10.0], [1.7188137E12, 10.0], [1.71881364E12, 10.0], [1.71881334E12, 10.0], [1.71881382E12, 10.0], [1.71881328E12, 10.0], [1.71881376E12, 10.0], [1.71881346E12, 10.0]], "isOverall": false, "label": "Directors by name B", "isController": false}, {"data": [[1.71881274E12, 5.0], [1.71881304E12, 5.0], [1.7188131E12, 5.0], [1.71881292E12, 5.0], [1.71881322E12, 5.0], [1.71881298E12, 5.0], [1.7188128E12, 5.0], [1.71881286E12, 5.0], [1.71881328E12, 5.0], [1.71881268E12, 5.0], [1.71881316E12, 5.0]], "isOverall": false, "label": "Directors by name A", "isController": false}, {"data": [[1.7188155E12, 100.0], [1.71881532E12, 100.0], [1.71881562E12, 100.0], [1.71881514E12, 100.0], [1.71881544E12, 100.0], [1.71881574E12, 87.75661375661376], [1.71881526E12, 100.0], [1.71881556E12, 100.0], [1.7188152E12, 100.0], [1.71881538E12, 100.0], [1.71881568E12, 100.0]], "isOverall": false, "label": "Directors by name E", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71881574E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1561.8275636838662, "minX": 1.0, "maxY": 64280.0, "series": [{"data": [[47.0, 20192.0], [3.0, 35032.5], [50.0, 20261.885212694073], [53.0, 35046.0], [55.0, 35031.5], [59.0, 35030.333333333336], [58.0, 35030.0], [61.0, 35031.0], [67.0, 35008.0], [66.0, 35031.0], [65.0, 35023.0], [64.0, 35034.0], [69.0, 35034.0], [74.0, 35039.0], [73.0, 35033.0], [79.0, 35027.666666666664], [78.0, 35035.0], [77.0, 35028.0], [76.0, 35042.0], [5.0, 1561.8275636838662], [81.0, 35034.0], [80.0, 35027.333333333336], [91.0, 17939.0], [90.0, 17330.0], [89.0, 64280.0], [88.0, 35499.91666666665], [95.0, 17314.0], [94.0, 49686.0], [93.0, 49980.0], [92.0, 17375.0], [99.0, 1754.0], [98.0, 48868.0], [97.0, 49511.0], [96.0, 17126.0], [100.0, 29194.17503729484], [10.0, 3418.335022165927], [1.0, 35324.0], [20.0, 8589.354477611943], [24.0, 20177.75], [25.0, 20176.57142857143]], "isOverall": false, "label": "Directors by name", "isController": false}, {"data": [[41.37382133995029, 13877.201116625256]], "isOverall": false, "label": "Directors by name-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 265.5, "minX": 1.71881268E12, "maxY": 1127406.1666666667, "series": [{"data": [[1.71881388E12, 6535.8], [1.7188155E12, 366438.13333333336], [1.71881448E12, 3736.8333333333335], [1.71881508E12, 5646.9], [1.71881286E12, 5918.266666666666], [1.71881346E12, 6427.633333333333], [1.71881568E12, 398341.0], [1.71881532E12, 1127406.1666666667], [1.7188131E12, 6456.033333333334], [1.7188137E12, 5746.566666666667], [1.7188143E12, 6081.466666666666], [1.71881328E12, 6815.0], [1.71881268E12, 1871.3666666666666], [1.7188149E12, 6157.833333333333], [1.71881484E12, 5584.2], [1.71881322E12, 5959.366666666667], [1.71881544E12, 625624.4666666667], [1.7188128E12, 6374.4], [1.71881382E12, 5968.266666666666], [1.71881442E12, 5447.8], [1.71881304E12, 6762.2], [1.71881406E12, 5431.7], [1.71881466E12, 5557.8], [1.71881364E12, 6394.133333333333], [1.71881526E12, 508987.7], [1.71881424E12, 4453.7], [1.71881358E12, 6109.8], [1.71881418E12, 5242.766666666666], [1.71881478E12, 5572.0], [1.71881376E12, 6491.8], [1.71881538E12, 430439.4666666667], [1.71881316E12, 6263.633333333333], [1.7188134E12, 6162.466666666666], [1.71881502E12, 6133.733333333334], [1.718814E12, 5218.3], [1.71881562E12, 380685.13333333336], [1.71881298E12, 6629.866666666667], [1.7188146E12, 5638.933333333333], [1.7188152E12, 899843.9666666667], [1.71881454E12, 5689.133333333333], [1.71881352E12, 6240.866666666667], [1.71881292E12, 6032.933333333333], [1.71881514E12, 5541.9], [1.71881412E12, 4862.933333333333], [1.71881574E12, 103016.53333333334], [1.71881472E12, 5649.1], [1.71881274E12, 5734.833333333333], [1.71881436E12, 5870.733333333334], [1.71881496E12, 4187.233333333334], [1.71881334E12, 5704.666666666667], [1.71881556E12, 381031.26666666666], [1.71881394E12, 5261.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71881388E12, 749.3333333333334], [1.7188155E12, 682.1], [1.71881448E12, 536.6666666666666], [1.71881508E12, 800.0], [1.71881286E12, 807.6], [1.71881346E12, 859.1666666666666], [1.71881568E12, 710.5666666666667], [1.71881532E12, 1580.6], [1.7188131E12, 796.4666666666667], [1.7188137E12, 806.3666666666667], [1.7188143E12, 744.0], [1.71881328E12, 829.0666666666667], [1.71881268E12, 265.5], [1.7188149E12, 808.3333333333334], [1.71881484E12, 806.6666666666666], [1.71881322E12, 808.8666666666667], [1.71881544E12, 1275.1], [1.7188128E12, 849.9], [1.71881382E12, 799.1333333333333], [1.71881442E12, 742.6666666666666], [1.71881304E12, 827.6], [1.71881406E12, 752.6666666666666], [1.71881466E12, 781.6666666666666], [1.71881364E12, 850.2666666666667], [1.71881526E12, 1286.5], [1.71881424E12, 647.3333333333334], [1.71881358E12, 861.3], [1.71881418E12, 754.6666666666666], [1.71881478E12, 813.3333333333334], [1.71881376E12, 854.2333333333333], [1.71881538E12, 681.4666666666667], [1.71881316E12, 796.8333333333334], [1.7188134E12, 855.7333333333333], [1.71881502E12, 803.3333333333334], [1.718814E12, 749.3333333333334], [1.71881562E12, 1139.4], [1.71881298E12, 832.8333333333334], [1.7188146E12, 813.3333333333334], [1.7188152E12, 966.1333333333333], [1.71881454E12, 795.0], [1.71881352E12, 830.9], [1.71881292E12, 809.8333333333334], [1.71881514E12, 810.0], [1.71881412E12, 639.3333333333334], [1.71881574E12, 1002.9333333333333], [1.71881472E12, 798.3333333333334], [1.71881274E12, 804.3333333333334], [1.71881436E12, 751.3333333333334], [1.71881496E12, 528.3333333333334], [1.71881334E12, 807.3], [1.71881556E12, 1164.9333333333334], [1.71881394E12, 744.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71881574E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1504.9496855345915, "minX": 1.71881268E12, "maxY": 34930.047619047655, "series": [{"data": [[1.71881388E12, 4192.007142857141], [1.7188155E12, 28494.53787878788], [1.71881448E12, 8629.800000000001], [1.71881508E12, 20320.013333333318], [1.71881286E12, 1560.6578947368423], [1.71881346E12, 3446.0312500000005], [1.71881568E12, 28108.389705882346], [1.71881532E12, 24864.698996655516], [1.7188131E12, 1589.9602649006615], [1.7188137E12, 3445.4200000000005], [1.7188143E12, 8531.57142857143], [1.71881328E12, 2161.3225806451605], [1.71881268E12, 1570.5199999999995], [1.7188149E12, 20217.713333333333], [1.71881484E12, 20323.373333333344], [1.71881322E12, 1551.9671052631566], [1.71881544E12, 29364.61728395061], [1.7188128E12, 1504.9496855345915], [1.71881382E12, 3448.400000000002], [1.71881442E12, 8615.250000000002], [1.71881304E12, 1532.9612903225807], [1.71881406E12, 8566.964285714284], [1.71881466E12, 20328.000000000004], [1.71881364E12, 3427.993750000001], [1.71881526E12, 30940.92499999999], [1.71881424E12, 8581.574999999999], [1.71881358E12, 3335.4012345679016], [1.71881418E12, 8625.214285714286], [1.71881478E12, 20245.75333333335], [1.71881376E12, 3458.918749999999], [1.71881538E12, 27420.912408759126], [1.71881316E12, 1583.1399999999999], [1.7188134E12, 3412.8124999999973], [1.71881502E12, 20170.820000000003], [1.718814E12, 8580.99285714286], [1.71881562E12, 30802.963470319643], [1.71881298E12, 1549.6025641025642], [1.7188146E12, 20268.893333333337], [1.7188152E12, 22482.40760869566], [1.71881454E12, 20247.87999999999], [1.71881352E12, 3321.9487179487173], [1.71881292E12, 1574.8145695364258], [1.71881514E12, 33555.326666666646], [1.71881412E12, 8598.050000000001], [1.71881574E12, 34930.047619047655], [1.71881472E12, 20294.066666666644], [1.71881274E12, 1606.333333333333], [1.71881436E12, 8592.592857142863], [1.71881496E12, 20200.060000000005], [1.71881334E12, 3446.5894039735076], [1.71881556E12, 31666.536796536813], [1.71881394E12, 8580.657142857133]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71881574E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1504.9308176100617, "minX": 1.71881268E12, "maxY": 34364.814814814854, "series": [{"data": [[1.71881388E12, 4191.9642857142835], [1.7188155E12, 27724.96969696969], [1.71881448E12, 8629.800000000001], [1.71881508E12, 20320.013333333318], [1.71881286E12, 1560.6578947368423], [1.71881346E12, 3446.025000000001], [1.71881568E12, 27221.117647058818], [1.71881532E12, 24577.872909699003], [1.7188131E12, 1589.92715231788], [1.7188137E12, 3445.413333333333], [1.7188143E12, 8531.48571428572], [1.71881328E12, 2161.2774193548394], [1.71881268E12, 1570.4999999999998], [1.7188149E12, 20217.713333333333], [1.71881484E12, 20323.366666666672], [1.71881322E12, 1551.9539473684201], [1.71881544E12, 28615.131687242803], [1.7188128E12, 1504.9308176100617], [1.71881382E12, 3448.400000000002], [1.71881442E12, 8615.228571428574], [1.71881304E12, 1531.3999999999992], [1.71881406E12, 8566.957142857138], [1.71881466E12, 20328.000000000004], [1.71881364E12, 3427.993750000001], [1.71881526E12, 30555.93750000002], [1.71881424E12, 8581.574999999999], [1.71881358E12, 3335.395061728394], [1.71881418E12, 8625.185714285713], [1.71881478E12, 20245.75333333335], [1.71881376E12, 3458.9124999999995], [1.71881538E12, 25548.562043795624], [1.71881316E12, 1583.1399999999999], [1.7188134E12, 3412.806249999999], [1.71881502E12, 20170.820000000003], [1.718814E12, 8580.99285714286], [1.71881562E12, 29843.164383561645], [1.71881298E12, 1549.576923076923], [1.7188146E12, 20268.893333333337], [1.7188152E12, 22269.21195652176], [1.71881454E12, 20247.87999999999], [1.71881352E12, 3321.942307692306], [1.71881292E12, 1574.8079470198675], [1.71881514E12, 33555.32], [1.71881412E12, 8598.050000000001], [1.71881574E12, 34364.814814814854], [1.71881472E12, 20294.066666666644], [1.71881274E12, 1606.319999999999], [1.71881436E12, 8592.592857142863], [1.71881496E12, 20200.060000000005], [1.71881334E12, 3446.569536423844], [1.71881556E12, 30199.05627705628], [1.71881394E12, 8580.642857142855]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71881574E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71881268E12, "maxY": 271.2205882352942, "series": [{"data": [[1.71881388E12, 5.192857142857142], [1.7188155E12, 4.840909090909089], [1.71881448E12, 7.3299999999999965], [1.71881508E12, 11.873333333333328], [1.71881286E12, 1.3092105263157905], [1.71881346E12, 2.181249999999999], [1.71881568E12, 271.2205882352942], [1.71881532E12, 12.812709030100331], [1.7188131E12, 1.3973509933774841], [1.7188137E12, 2.46], [1.7188143E12, 5.021428571428575], [1.71881328E12, 2.212903225806452], [1.71881268E12, 4.800000000000002], [1.7188149E12, 11.773333333333333], [1.71881484E12, 12.13333333333334], [1.71881322E12, 1.1710526315789476], [1.71881544E12, 15.872427983539094], [1.7188128E12, 1.2201257861635215], [1.71881382E12, 2.3466666666666662], [1.71881442E12, 4.992857142857143], [1.71881304E12, 1.7290322580645152], [1.71881406E12, 4.971428571428571], [1.71881466E12, 11.640000000000006], [1.71881364E12, 2.2874999999999996], [1.71881526E12, 157.1208333333333], [1.71881424E12, 5.874999999999998], [1.71881358E12, 2.1543209876543195], [1.71881418E12, 8.357142857142849], [1.71881478E12, 11.926666666666671], [1.71881376E12, 2.831250000000001], [1.71881538E12, 25.934306569343068], [1.71881316E12, 1.766666666666666], [1.7188134E12, 2.325], [1.71881502E12, 11.726666666666663], [1.718814E12, 5.4], [1.71881562E12, 244.86757990867548], [1.71881298E12, 1.461538461538462], [1.7188146E12, 11.75333333333333], [1.7188152E12, 0.9456521739130437], [1.71881454E12, 53.3466666666667], [1.71881352E12, 2.4935897435897436], [1.71881292E12, 1.3377483443708613], [1.71881514E12, 23.806666666666665], [1.71881412E12, 0.0], [1.71881574E12, 17.566137566137563], [1.71881472E12, 11.773333333333335], [1.71881274E12, 1.593333333333334], [1.71881436E12, 5.328571428571439], [1.71881496E12, 17.819999999999986], [1.71881334E12, 2.3443708609271523], [1.71881556E12, 113.90476190476186], [1.71881394E12, 6.914285714285715]], "isOverall": false, "label": "Directors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71881574E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1126.0, "minX": 1.71881268E12, "maxY": 69568.0, "series": [{"data": [[1.71881388E12, 8627.0], [1.7188155E12, 68535.0], [1.71881448E12, 8729.0], [1.71881508E12, 20412.0], [1.71881286E12, 1879.0], [1.71881346E12, 3524.0], [1.71881568E12, 69568.0], [1.71881532E12, 39155.0], [1.7188131E12, 1895.0], [1.7188137E12, 3628.0], [1.7188143E12, 8636.0], [1.71881328E12, 3513.0], [1.71881268E12, 1672.0], [1.7188149E12, 20354.0], [1.71881484E12, 20424.0], [1.71881322E12, 1761.0], [1.71881544E12, 53041.0], [1.7188128E12, 1661.0], [1.71881382E12, 3952.0], [1.71881442E12, 8945.0], [1.71881304E12, 1788.0], [1.71881406E12, 8752.0], [1.71881466E12, 20469.0], [1.71881364E12, 3577.0], [1.71881526E12, 38206.0], [1.71881424E12, 8636.0], [1.71881358E12, 3496.0], [1.71881418E12, 8750.0], [1.71881478E12, 20400.0], [1.71881376E12, 3617.0], [1.71881538E12, 67848.0], [1.71881316E12, 1761.0], [1.7188134E12, 3617.0], [1.71881502E12, 20296.0], [1.718814E12, 8637.0], [1.71881562E12, 69554.0], [1.71881298E12, 1750.0], [1.7188146E12, 20416.0], [1.7188152E12, 40427.0], [1.71881454E12, 20317.0], [1.71881352E12, 3882.0], [1.71881292E12, 1749.0], [1.71881514E12, 40273.0], [1.71881412E12, 8725.0], [1.71881574E12, 51903.0], [1.71881472E12, 20363.0], [1.71881274E12, 1860.0], [1.71881436E12, 8829.0], [1.71881496E12, 20285.0], [1.71881334E12, 3600.0], [1.71881556E12, 62301.0], [1.71881394E12, 8832.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71881388E12, 3290.0], [1.7188155E12, 36527.0], [1.71881448E12, 8558.0], [1.71881508E12, 20264.0], [1.71881286E12, 1155.0], [1.71881346E12, 3277.0], [1.71881568E12, 15021.0], [1.71881532E12, 17632.0], [1.7188131E12, 1200.0], [1.7188137E12, 3321.0], [1.7188143E12, 8381.0], [1.71881328E12, 1479.0], [1.71881268E12, 1488.0], [1.7188149E12, 20115.0], [1.71881484E12, 20167.0], [1.71881322E12, 1126.0], [1.71881544E12, 36029.0], [1.7188128E12, 1159.0], [1.71881382E12, 2860.0], [1.71881442E12, 8471.0], [1.71881304E12, 1148.0], [1.71881406E12, 8392.0], [1.71881466E12, 20240.0], [1.71881364E12, 3169.0], [1.71881526E12, 36943.0], [1.71881424E12, 8487.0], [1.71881358E12, 2166.0], [1.71881418E12, 8534.0], [1.71881478E12, 20126.0], [1.71881376E12, 3245.0], [1.71881538E12, 35268.0], [1.71881316E12, 1485.0], [1.7188134E12, 1767.0], [1.71881502E12, 20095.0], [1.718814E12, 8488.0], [1.71881562E12, 32560.0], [1.71881298E12, 1182.0], [1.7188146E12, 20096.0], [1.7188152E12, 40338.0], [1.71881454E12, 20161.0], [1.71881352E12, 1854.0], [1.71881292E12, 1204.0], [1.71881514E12, 20149.0], [1.71881412E12, 8492.0], [1.71881574E12, 35005.0], [1.71881472E12, 20231.0], [1.71881274E12, 1469.0], [1.71881436E12, 8408.0], [1.71881496E12, 20105.0], [1.71881334E12, 2893.0], [1.71881556E12, 35431.0], [1.71881394E12, 8407.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71881388E12, 8601.9], [1.7188155E12, 36909.1], [1.71881448E12, 8707.9], [1.71881508E12, 20392.0], [1.71881286E12, 1676.5], [1.71881346E12, 3504.8], [1.71881568E12, 37065.0], [1.71881532E12, 38732.0], [1.7188131E12, 1744.8999999999999], [1.7188137E12, 3602.0], [1.7188143E12, 8607.9], [1.71881328E12, 3429.0], [1.71881268E12, 1655.8], [1.7188149E12, 20329.0], [1.71881484E12, 20405.9], [1.71881322E12, 1659.0], [1.71881544E12, 37179.2], [1.7188128E12, 1645.0], [1.71881382E12, 3513.5], [1.71881442E12, 8927.9], [1.71881304E12, 1640.0], [1.71881406E12, 8681.5], [1.71881466E12, 20443.7], [1.71881364E12, 3498.0], [1.71881526E12, 37913.0], [1.71881424E12, 8617.9], [1.71881358E12, 3437.5], [1.71881418E12, 8732.9], [1.71881478E12, 20359.8], [1.71881376E12, 3506.9], [1.71881538E12, 35622.5], [1.71881316E12, 1659.8000000000002], [1.7188134E12, 3507.9], [1.71881502E12, 20258.9], [1.718814E12, 8620.0], [1.71881562E12, 35351.0], [1.71881298E12, 1666.0], [1.7188146E12, 20395.0], [1.7188152E12, 40401.9], [1.71881454E12, 20284.9], [1.71881352E12, 3667.0], [1.71881292E12, 1662.5], [1.71881514E12, 40257.9], [1.71881412E12, 8712.9], [1.71881574E12, 35456.0], [1.71881472E12, 20323.8], [1.71881274E12, 1700.7], [1.71881436E12, 8814.0], [1.71881496E12, 20273.7], [1.71881334E12, 3583.1], [1.71881556E12, 36997.4], [1.71881394E12, 8809.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71881388E12, 8620.52], [1.7188155E12, 68535.0], [1.71881448E12, 8728.95], [1.71881508E12, 20404.0], [1.71881286E12, 1862.0], [1.71881346E12, 3522.0], [1.71881568E12, 69568.0], [1.71881532E12, 38914.0], [1.7188131E12, 1794.0], [1.7188137E12, 3627.0], [1.7188143E12, 8628.71], [1.71881328E12, 3513.0], [1.71881268E12, 1672.0], [1.7188149E12, 20343.0], [1.71881484E12, 20421.0], [1.71881322E12, 1749.0], [1.71881544E12, 52985.0], [1.7188128E12, 1659.0], [1.71881382E12, 3721.0], [1.71881442E12, 8945.0], [1.71881304E12, 1785.0], [1.71881406E12, 8751.19], [1.71881466E12, 20466.0], [1.71881364E12, 3514.0], [1.71881526E12, 38018.0], [1.71881424E12, 8634.77], [1.71881358E12, 3491.0], [1.71881418E12, 8750.0], [1.71881478E12, 20382.0], [1.71881376E12, 3613.0], [1.71881538E12, 67848.0], [1.71881316E12, 1760.0], [1.7188134E12, 3616.0], [1.71881502E12, 20290.0], [1.718814E12, 8632.14], [1.71881562E12, 52158.0], [1.71881298E12, 1750.0], [1.7188146E12, 20412.0], [1.7188152E12, 40426.93], [1.71881454E12, 20315.0], [1.71881352E12, 3827.0], [1.71881292E12, 1745.0], [1.71881514E12, 40268.0], [1.71881412E12, 8725.0], [1.71881574E12, 35583.0], [1.71881472E12, 20352.0], [1.71881274E12, 1854.0], [1.71881436E12, 8824.95], [1.71881496E12, 20284.98], [1.71881334E12, 3600.0], [1.71881556E12, 39074.0], [1.71881394E12, 8827.14]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71881388E12, 3491.5], [1.7188155E12, 36845.0], [1.71881448E12, 8636.0], [1.71881508E12, 20293.5], [1.71881286E12, 1549.5], [1.71881346E12, 3480.0], [1.71881568E12, 36939.0], [1.71881532E12, 37601.0], [1.7188131E12, 1586.0], [1.7188137E12, 3408.0], [1.7188143E12, 8533.0], [1.71881328E12, 1627.0], [1.71881268E12, 1552.0], [1.7188149E12, 20187.0], [1.71881484E12, 20370.0], [1.71881322E12, 1552.5], [1.71881544E12, 36881.5], [1.7188128E12, 1513.0], [1.71881382E12, 3481.5], [1.71881442E12, 8599.5], [1.71881304E12, 1529.0], [1.71881406E12, 8583.5], [1.71881466E12, 20283.0], [1.71881364E12, 3472.5], [1.71881526E12, 37749.0], [1.71881424E12, 8599.0], [1.71881358E12, 3383.5], [1.71881418E12, 8606.0], [1.71881478E12, 20238.5], [1.71881376E12, 3483.5], [1.71881538E12, 35531.0], [1.71881316E12, 1553.0], [1.7188134E12, 3426.0], [1.71881502E12, 20142.5], [1.718814E12, 8604.5], [1.71881562E12, 35292.0], [1.71881298E12, 1525.0], [1.7188146E12, 20286.5], [1.7188152E12, 40374.0], [1.71881454E12, 20263.0], [1.71881352E12, 3392.0], [1.71881292E12, 1579.0], [1.71881514E12, 40235.5], [1.71881412E12, 8610.0], [1.71881574E12, 35239.0], [1.71881472E12, 20292.0], [1.71881274E12, 1604.5], [1.71881436E12, 8601.5], [1.71881496E12, 20199.5], [1.71881334E12, 3472.0], [1.71881556E12, 36783.0], [1.71881394E12, 8543.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71881388E12, 8614.75], [1.7188155E12, 36928.0], [1.71881448E12, 8716.85], [1.71881508E12, 20396.0], [1.71881286E12, 1814.0], [1.71881346E12, 3510.95], [1.71881568E12, 37136.0], [1.71881532E12, 38780.4], [1.7188131E12, 1765.0], [1.7188137E12, 3618.0], [1.7188143E12, 8618.85], [1.71881328E12, 3490.0], [1.71881268E12, 1659.0], [1.7188149E12, 20338.0], [1.71881484E12, 20411.0], [1.71881322E12, 1692.0], [1.71881544E12, 37208.95], [1.7188128E12, 1650.0], [1.71881382E12, 3596.0], [1.71881442E12, 8932.95], [1.71881304E12, 1655.0], [1.71881406E12, 8707.85], [1.71881466E12, 20451.0], [1.71881364E12, 3504.0], [1.71881526E12, 37966.0], [1.71881424E12, 8623.8], [1.71881358E12, 3458.0], [1.71881418E12, 8741.85], [1.71881478E12, 20370.0], [1.71881376E12, 3588.85], [1.71881538E12, 35631.0], [1.71881316E12, 1747.0], [1.7188134E12, 3593.0], [1.71881502E12, 20265.0], [1.718814E12, 8625.9], [1.71881562E12, 35358.0], [1.71881298E12, 1740.0], [1.7188146E12, 20401.0], [1.7188152E12, 40406.95], [1.71881454E12, 20298.0], [1.71881352E12, 3704.0], [1.71881292E12, 1695.0], [1.71881514E12, 40262.0], [1.71881412E12, 8718.95], [1.71881574E12, 35516.0], [1.71881472E12, 20330.0], [1.71881274E12, 1770.0], [1.71881436E12, 8819.85], [1.71881496E12, 20277.95], [1.71881334E12, 3593.0], [1.71881556E12, 37056.65], [1.71881394E12, 8820.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71881574E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 909.0, "minX": 2.0, "maxY": 40305.5, "series": [{"data": [[2.0, 1445.0], [8.0, 1539.0], [10.0, 1554.0], [40.0, 8597.0], [174.0, 34120.5], [180.0, 36800.0], [178.0, 35340.0], [176.0, 35033.0], [186.0, 38469.0], [184.0, 36920.0], [190.0, 36908.5], [12.0, 3497.0], [198.0, 37720.0], [194.0, 37870.0], [192.0, 36854.0], [200.0, 40305.5], [14.0, 3325.0], [4.0, 1480.0], [16.0, 3332.5], [18.0, 3384.0], [20.0, 3463.5], [6.0, 1577.0], [100.0, 20271.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1524.0], [8.0, 1245.0], [10.0, 2258.5], [174.0, 909.0], [184.0, 971.0], [190.0, 3308.5], [186.0, 25071.0], [198.0, 1141.0], [194.0, 8730.0], [12.0, 17337.5], [192.0, 9296.0], [14.0, 17316.5], [4.0, 1279.5], [16.0, 16945.0], [18.0, 19419.0], [6.0, 1238.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 200.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 617.0, "minX": 2.0, "maxY": 40305.5, "series": [{"data": [[2.0, 1445.0], [8.0, 1538.5], [10.0, 1554.0], [40.0, 8597.0], [174.0, 34120.5], [180.0, 36800.0], [178.0, 35340.0], [176.0, 35033.0], [186.0, 38469.0], [184.0, 36920.0], [190.0, 36908.5], [12.0, 3497.0], [198.0, 37720.0], [194.0, 37870.0], [192.0, 36854.0], [200.0, 40305.5], [14.0, 3325.0], [4.0, 1480.0], [16.0, 3332.5], [18.0, 3384.0], [20.0, 3463.5], [6.0, 1577.0], [100.0, 20271.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 713.0], [8.0, 710.5], [10.0, 762.0], [174.0, 691.0], [184.0, 641.0], [190.0, 714.0], [186.0, 16576.5], [198.0, 640.0], [194.0, 617.0], [12.0, 16607.0], [192.0, 8593.5], [14.0, 8428.0], [4.0, 716.5], [16.0, 16300.5], [18.0, 2550.0], [6.0, 697.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 200.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.8333333333333333, "minX": 1.71881268E12, "maxY": 9.966666666666667, "series": [{"data": [[1.71881388E12, 5.0], [1.7188155E12, 4.433333333333334], [1.71881448E12, 5.0], [1.71881508E12, 5.0], [1.71881286E12, 5.066666666666666], [1.71881346E12, 5.333333333333333], [1.71881568E12, 4.533333333333333], [1.71881532E12, 9.966666666666667], [1.7188131E12, 5.033333333333333], [1.7188137E12, 5.0], [1.7188143E12, 4.666666666666667], [1.71881328E12, 5.333333333333333], [1.71881268E12, 1.8333333333333333], [1.7188149E12, 5.0], [1.71881484E12, 5.0], [1.71881322E12, 5.066666666666666], [1.71881544E12, 8.133333333333333], [1.7188128E12, 5.3], [1.71881382E12, 5.0], [1.71881442E12, 4.0], [1.71881304E12, 5.166666666666667], [1.71881406E12, 4.0], [1.71881466E12, 5.0], [1.71881364E12, 5.333333333333333], [1.71881526E12, 8.033333333333333], [1.71881424E12, 4.0], [1.71881358E12, 5.4], [1.71881418E12, 4.666666666666667], [1.71881478E12, 5.0], [1.71881376E12, 5.333333333333333], [1.71881538E12, 4.5], [1.71881316E12, 5.0], [1.7188134E12, 5.333333333333333], [1.71881502E12, 5.0], [1.718814E12, 4.666666666666667], [1.71881562E12, 7.466666666666667], [1.71881298E12, 5.2], [1.7188146E12, 5.0], [1.7188152E12, 6.1], [1.71881454E12, 5.0], [1.71881352E12, 5.2], [1.71881292E12, 5.033333333333333], [1.71881514E12, 6.666666666666667], [1.71881412E12, 4.666666666666667], [1.71881574E12, 2.966666666666667], [1.71881472E12, 5.0], [1.71881274E12, 5.0], [1.71881436E12, 4.666666666666667], [1.71881496E12, 3.3333333333333335], [1.71881334E12, 5.033333333333333], [1.71881556E12, 7.533333333333333], [1.71881394E12, 4.666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71881574E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71881268E12, "maxY": 6.366666666666666, "series": [{"data": [[1.71881388E12, 4.666666666666667], [1.7188155E12, 3.1333333333333333], [1.71881448E12, 3.3333333333333335], [1.71881508E12, 5.0], [1.71881286E12, 5.066666666666666], [1.71881346E12, 5.333333333333333], [1.71881568E12, 3.1666666666666665], [1.71881532E12, 6.3], [1.7188131E12, 5.033333333333333], [1.7188137E12, 5.0], [1.7188143E12, 4.666666666666667], [1.71881328E12, 5.166666666666667], [1.71881268E12, 1.6666666666666667], [1.7188149E12, 5.0], [1.71881484E12, 5.0], [1.71881322E12, 5.066666666666666], [1.71881544E12, 6.133333333333334], [1.7188128E12, 5.3], [1.71881382E12, 5.0], [1.71881442E12, 4.666666666666667], [1.71881304E12, 5.166666666666667], [1.71881406E12, 4.666666666666667], [1.71881466E12, 5.0], [1.71881364E12, 5.333333333333333], [1.71881526E12, 6.366666666666666], [1.71881424E12, 4.0], [1.71881358E12, 5.4], [1.71881418E12, 4.666666666666667], [1.71881478E12, 5.0], [1.71881376E12, 5.333333333333333], [1.71881538E12, 3.0], [1.71881316E12, 5.0], [1.7188134E12, 5.333333333333333], [1.71881502E12, 5.0], [1.718814E12, 4.666666666666667], [1.71881562E12, 5.833333333333333], [1.71881298E12, 5.2], [1.7188146E12, 5.0], [1.7188152E12, 3.3333333333333335], [1.71881454E12, 5.0], [1.71881352E12, 5.2], [1.71881292E12, 5.033333333333333], [1.71881514E12, 5.0], [1.71881412E12, 4.0], [1.71881574E12, 5.9], [1.71881472E12, 5.0], [1.71881274E12, 5.0], [1.71881436E12, 4.666666666666667], [1.71881496E12, 3.3333333333333335], [1.71881334E12, 5.033333333333333], [1.71881556E12, 6.1], [1.71881394E12, 4.666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7188155E12, 1.1333333333333333], [1.71881532E12, 3.5], [1.71881562E12, 1.1666666666666667], [1.71881544E12, 1.9333333333333333], [1.71881574E12, 0.3], [1.71881526E12, 1.5666666666666667], [1.71881556E12, 1.1666666666666667], [1.7188152E12, 2.8], [1.71881538E12, 1.3333333333333333], [1.71881568E12, 1.2333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71881562E12, 0.1], [1.71881556E12, 0.13333333333333333], [1.71881538E12, 0.1], [1.71881568E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.7188155E12, 0.13333333333333333], [1.71881532E12, 0.16666666666666666], [1.71881562E12, 0.2], [1.71881544E12, 0.03333333333333333], [1.71881574E12, 0.1], [1.71881526E12, 0.06666666666666667], [1.71881556E12, 0.3], [1.71881538E12, 0.13333333333333333], [1.71881568E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71881574E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.71881268E12, "maxY": 6.366666666666666, "series": [{"data": [[1.7188155E12, 1.2666666666666666], [1.71881532E12, 3.6666666666666665], [1.71881562E12, 1.4666666666666666], [1.71881544E12, 1.9666666666666666], [1.71881574E12, 0.4], [1.71881526E12, 1.6333333333333333], [1.71881556E12, 1.6], [1.7188152E12, 2.8], [1.71881538E12, 1.5666666666666667], [1.71881568E12, 1.3666666666666667]], "isOverall": false, "label": "Directors by name-failure", "isController": false}, {"data": [[1.71881388E12, 4.666666666666667], [1.7188155E12, 3.1333333333333333], [1.71881448E12, 3.3333333333333335], [1.71881508E12, 5.0], [1.71881286E12, 5.066666666666666], [1.71881346E12, 5.333333333333333], [1.71881568E12, 3.1666666666666665], [1.71881532E12, 6.3], [1.7188131E12, 5.033333333333333], [1.7188137E12, 5.0], [1.7188143E12, 4.666666666666667], [1.71881328E12, 5.166666666666667], [1.71881268E12, 1.6666666666666667], [1.7188149E12, 5.0], [1.71881484E12, 5.0], [1.71881322E12, 5.066666666666666], [1.71881544E12, 6.133333333333334], [1.7188128E12, 5.3], [1.71881382E12, 5.0], [1.71881442E12, 4.666666666666667], [1.71881304E12, 5.166666666666667], [1.71881406E12, 4.666666666666667], [1.71881466E12, 5.0], [1.71881364E12, 5.333333333333333], [1.71881526E12, 6.366666666666666], [1.71881424E12, 4.0], [1.71881358E12, 5.4], [1.71881418E12, 4.666666666666667], [1.71881478E12, 5.0], [1.71881376E12, 5.333333333333333], [1.71881538E12, 3.0], [1.71881316E12, 5.0], [1.7188134E12, 5.333333333333333], [1.71881502E12, 5.0], [1.718814E12, 4.666666666666667], [1.71881562E12, 5.833333333333333], [1.71881298E12, 5.2], [1.7188146E12, 5.0], [1.7188152E12, 3.3333333333333335], [1.71881454E12, 5.0], [1.71881352E12, 5.2], [1.71881292E12, 5.033333333333333], [1.71881514E12, 5.0], [1.71881412E12, 4.0], [1.71881574E12, 5.9], [1.71881472E12, 5.0], [1.71881274E12, 5.0], [1.71881436E12, 4.666666666666667], [1.71881496E12, 3.3333333333333335], [1.71881334E12, 5.033333333333333], [1.71881556E12, 6.1], [1.71881394E12, 4.666666666666667]], "isOverall": false, "label": "Directors by name-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71881574E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.71881268E12, "maxY": 6.366666666666666, "series": [{"data": [[1.71881388E12, 4.666666666666667], [1.7188155E12, 3.1333333333333333], [1.71881448E12, 3.3333333333333335], [1.71881508E12, 5.0], [1.71881286E12, 5.066666666666666], [1.71881346E12, 5.333333333333333], [1.71881568E12, 3.1666666666666665], [1.71881532E12, 6.3], [1.7188131E12, 5.033333333333333], [1.7188137E12, 5.0], [1.7188143E12, 4.666666666666667], [1.71881328E12, 5.166666666666667], [1.71881268E12, 1.6666666666666667], [1.7188149E12, 5.0], [1.71881484E12, 5.0], [1.71881322E12, 5.066666666666666], [1.71881544E12, 6.133333333333334], [1.7188128E12, 5.3], [1.71881382E12, 5.0], [1.71881442E12, 4.666666666666667], [1.71881304E12, 5.166666666666667], [1.71881406E12, 4.666666666666667], [1.71881466E12, 5.0], [1.71881364E12, 5.333333333333333], [1.71881526E12, 6.366666666666666], [1.71881424E12, 4.0], [1.71881358E12, 5.4], [1.71881418E12, 4.666666666666667], [1.71881478E12, 5.0], [1.71881376E12, 5.333333333333333], [1.71881538E12, 3.0], [1.71881316E12, 5.0], [1.7188134E12, 5.333333333333333], [1.71881502E12, 5.0], [1.718814E12, 4.666666666666667], [1.71881562E12, 5.833333333333333], [1.71881298E12, 5.2], [1.7188146E12, 5.0], [1.7188152E12, 3.3333333333333335], [1.71881454E12, 5.0], [1.71881352E12, 5.2], [1.71881292E12, 5.033333333333333], [1.71881514E12, 5.0], [1.71881412E12, 4.0], [1.71881574E12, 5.9], [1.71881472E12, 5.0], [1.71881274E12, 5.0], [1.71881436E12, 4.666666666666667], [1.71881496E12, 3.3333333333333335], [1.71881334E12, 5.033333333333333], [1.71881556E12, 6.1], [1.71881394E12, 4.666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7188155E12, 1.2666666666666666], [1.71881532E12, 3.6666666666666665], [1.71881562E12, 1.4666666666666666], [1.71881544E12, 1.9666666666666666], [1.71881574E12, 0.4], [1.71881526E12, 1.6333333333333333], [1.71881556E12, 1.6], [1.7188152E12, 2.8], [1.71881538E12, 1.5666666666666667], [1.71881568E12, 1.3666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71881574E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

