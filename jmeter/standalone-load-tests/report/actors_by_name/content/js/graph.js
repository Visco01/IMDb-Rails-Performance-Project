/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5396.0, "minX": 0.0, "maxY": 81277.0, "series": [{"data": [[0.0, 5396.0], [0.1, 5396.0], [0.2, 5452.0], [0.3, 5474.0], [0.4, 5497.0], [0.5, 5497.0], [0.6, 5600.0], [0.7, 5621.0], [0.8, 5631.0], [0.9, 5652.0], [1.0, 5652.0], [1.1, 5711.0], [1.2, 5726.0], [1.3, 5739.0], [1.4, 5739.0], [1.5, 5757.0], [1.6, 5791.0], [1.7, 5791.0], [1.8, 5820.0], [1.9, 5820.0], [2.0, 5826.0], [2.1, 5828.0], [2.2, 5834.0], [2.3, 5834.0], [2.4, 5841.0], [2.5, 5843.0], [2.6, 5844.0], [2.7, 5864.0], [2.8, 5864.0], [2.9, 5889.0], [3.0, 5889.0], [3.1, 5914.0], [3.2, 5914.0], [3.3, 5936.0], [3.4, 5940.0], [3.5, 5962.0], [3.6, 5975.0], [3.7, 5975.0], [3.8, 5977.0], [3.9, 5992.0], [4.0, 5995.0], [4.1, 5995.0], [4.2, 6037.0], [4.3, 6053.0], [4.4, 6062.0], [4.5, 6115.0], [4.6, 6115.0], [4.7, 6138.0], [4.8, 6174.0], [4.9, 6181.0], [5.0, 6181.0], [5.1, 6203.0], [5.2, 6211.0], [5.3, 6238.0], [5.4, 6240.0], [5.5, 6240.0], [5.6, 6355.0], [5.7, 6371.0], [5.8, 6421.0], [5.9, 6421.0], [6.0, 6448.0], [6.1, 6498.0], [6.2, 6511.0], [6.3, 6585.0], [6.4, 6585.0], [6.5, 6587.0], [6.6, 6591.0], [6.7, 6640.0], [6.8, 6640.0], [6.9, 6662.0], [7.0, 6663.0], [7.1, 6677.0], [7.2, 6685.0], [7.3, 6685.0], [7.4, 6717.0], [7.5, 6765.0], [7.6, 6965.0], [7.7, 6965.0], [7.8, 6994.0], [7.9, 7062.0], [8.0, 7141.0], [8.1, 7150.0], [8.2, 7150.0], [8.3, 7190.0], [8.4, 7310.0], [8.5, 7486.0], [8.6, 7486.0], [8.7, 7550.0], [8.8, 7676.0], [8.9, 7807.0], [9.0, 7854.0], [9.1, 7854.0], [9.2, 7962.0], [9.3, 8005.0], [9.4, 8146.0], [9.5, 8169.0], [9.6, 8169.0], [9.7, 8178.0], [9.8, 8184.0], [9.9, 8213.0], [10.0, 8213.0], [10.1, 8228.0], [10.2, 8453.0], [10.3, 8483.0], [10.4, 8484.0], [10.5, 8484.0], [10.6, 8600.0], [10.7, 8601.0], [10.8, 8622.0], [10.9, 8622.0], [11.0, 8644.0], [11.1, 8702.0], [11.2, 8704.0], [11.3, 8814.0], [11.4, 8814.0], [11.5, 8909.0], [11.6, 8945.0], [11.7, 9084.0], [11.8, 9084.0], [11.9, 9165.0], [12.0, 9753.0], [12.1, 9862.0], [12.2, 10024.0], [12.3, 10024.0], [12.4, 10134.0], [12.5, 10226.0], [12.6, 10242.0], [12.7, 10242.0], [12.8, 10250.0], [12.9, 10279.0], [13.0, 10425.0], [13.1, 10500.0], [13.2, 10500.0], [13.3, 10548.0], [13.4, 10555.0], [13.5, 10564.0], [13.6, 10564.0], [13.7, 10667.0], [13.8, 10769.0], [13.9, 10962.0], [14.0, 10964.0], [14.1, 10964.0], [14.2, 10968.0], [14.3, 10969.0], [14.4, 10998.0], [14.5, 10998.0], [14.6, 11005.0], [14.7, 11042.0], [14.8, 11063.0], [14.9, 11100.0], [15.0, 11100.0], [15.1, 11192.0], [15.2, 11209.0], [15.3, 11396.0], [15.4, 11396.0], [15.5, 11536.0], [15.6, 11647.0], [15.7, 11659.0], [15.8, 11698.0], [15.9, 11698.0], [16.0, 11770.0], [16.1, 11793.0], [16.2, 11839.0], [16.3, 11839.0], [16.4, 11854.0], [16.5, 11901.0], [16.6, 11927.0], [16.7, 11974.0], [16.8, 11974.0], [16.9, 12046.0], [17.0, 12100.0], [17.1, 12312.0], [17.2, 12312.0], [17.3, 12352.0], [17.4, 12353.0], [17.5, 12412.0], [17.6, 12461.0], [17.7, 12461.0], [17.8, 12691.0], [17.9, 12847.0], [18.0, 12872.0], [18.1, 12872.0], [18.2, 12900.0], [18.3, 12919.0], [18.4, 12923.0], [18.5, 12924.0], [18.6, 12924.0], [18.7, 12929.0], [18.8, 13012.0], [18.9, 13230.0], [19.0, 13249.0], [19.1, 13249.0], [19.2, 13302.0], [19.3, 13369.0], [19.4, 13457.0], [19.5, 13457.0], [19.6, 13475.0], [19.7, 13573.0], [19.8, 13618.0], [19.9, 13627.0], [20.0, 13627.0], [20.1, 13632.0], [20.2, 13828.0], [20.3, 13840.0], [20.4, 13840.0], [20.5, 13841.0], [20.6, 13987.0], [20.7, 14119.0], [20.8, 14141.0], [20.9, 14141.0], [21.0, 14225.0], [21.1, 14234.0], [21.2, 14244.0], [21.3, 14244.0], [21.4, 14265.0], [21.5, 14487.0], [21.6, 14549.0], [21.7, 14567.0], [21.8, 14567.0], [21.9, 14571.0], [22.0, 14582.0], [22.1, 14666.0], [22.2, 14666.0], [22.3, 14751.0], [22.4, 14762.0], [22.5, 14980.0], [22.6, 14982.0], [22.7, 14982.0], [22.8, 14994.0], [22.9, 15024.0], [23.0, 15135.0], [23.1, 15135.0], [23.2, 15139.0], [23.3, 15182.0], [23.4, 15333.0], [23.5, 15589.0], [23.6, 15589.0], [23.7, 15601.0], [23.8, 15624.0], [23.9, 15660.0], [24.0, 15660.0], [24.1, 15775.0], [24.2, 15893.0], [24.3, 15954.0], [24.4, 16104.0], [24.5, 16104.0], [24.6, 16109.0], [24.7, 16116.0], [24.8, 16122.0], [24.9, 16122.0], [25.0, 16125.0], [25.1, 16136.0], [25.2, 16162.0], [25.3, 16162.0], [25.4, 16162.0], [25.5, 16169.0], [25.6, 16208.0], [25.7, 16267.0], [25.8, 16267.0], [25.9, 16290.0], [26.0, 16330.0], [26.1, 16514.0], [26.2, 16859.0], [26.3, 16859.0], [26.4, 16872.0], [26.5, 16874.0], [26.6, 16891.0], [26.7, 16891.0], [26.8, 17092.0], [26.9, 17104.0], [27.0, 17104.0], [27.1, 17105.0], [27.2, 17105.0], [27.3, 17111.0], [27.4, 17119.0], [27.5, 17120.0], [27.6, 17836.0], [27.7, 17836.0], [27.8, 18336.0], [27.9, 18338.0], [28.0, 18340.0], [28.1, 18340.0], [28.2, 18352.0], [28.3, 18359.0], [28.4, 18488.0], [28.5, 18488.0], [28.6, 18488.0], [28.7, 18531.0], [28.8, 18539.0], [28.9, 18539.0], [29.0, 18539.0], [29.1, 18544.0], [29.2, 18544.0], [29.3, 18549.0], [29.4, 18552.0], [29.5, 18552.0], [29.6, 18611.0], [29.7, 18629.0], [29.8, 18630.0], [29.9, 18630.0], [30.0, 18794.0], [30.1, 18797.0], [30.2, 18800.0], [30.3, 18810.0], [30.4, 18810.0], [30.5, 18812.0], [30.6, 18813.0], [30.7, 18828.0], [30.8, 18828.0], [30.9, 19149.0], [31.0, 19150.0], [31.1, 19150.0], [31.2, 19157.0], [31.3, 19157.0], [31.4, 19167.0], [31.5, 19178.0], [31.6, 19250.0], [31.7, 19250.0], [31.8, 19262.0], [31.9, 19986.0], [32.0, 19986.0], [32.1, 19986.0], [32.2, 19986.0], [32.3, 19989.0], [32.4, 19989.0], [32.5, 19994.0], [32.6, 19994.0], [32.7, 19996.0], [32.8, 20119.0], [32.9, 20119.0], [33.0, 20124.0], [33.1, 20124.0], [33.2, 20127.0], [33.3, 20141.0], [33.4, 20278.0], [33.5, 20278.0], [33.6, 20916.0], [33.7, 21067.0], [33.8, 21078.0], [33.9, 21090.0], [34.0, 21090.0], [34.1, 21102.0], [34.2, 21180.0], [34.3, 21191.0], [34.4, 21191.0], [34.5, 21201.0], [34.6, 21204.0], [34.7, 21204.0], [34.8, 21209.0], [34.9, 21209.0], [35.0, 21210.0], [35.1, 21211.0], [35.2, 21272.0], [35.3, 21272.0], [35.4, 21312.0], [35.5, 21319.0], [35.6, 21333.0], [35.7, 21337.0], [35.8, 21337.0], [35.9, 21342.0], [36.0, 21345.0], [36.1, 21478.0], [36.2, 21478.0], [36.3, 21723.0], [36.4, 22316.0], [36.5, 22316.0], [36.6, 22318.0], [36.7, 22318.0], [36.8, 22322.0], [36.9, 22332.0], [37.0, 22337.0], [37.1, 22337.0], [37.2, 22337.0], [37.3, 22345.0], [37.4, 23617.0], [37.5, 23642.0], [37.6, 23642.0], [37.7, 23644.0], [37.8, 23652.0], [37.9, 23652.0], [38.0, 23653.0], [38.1, 23653.0], [38.2, 23660.0], [38.3, 23665.0], [38.4, 23692.0], [38.5, 23692.0], [38.6, 23693.0], [38.7, 23703.0], [38.8, 23710.0], [38.9, 23711.0], [39.0, 23711.0], [39.1, 23718.0], [39.2, 23719.0], [39.3, 23726.0], [39.4, 23726.0], [39.5, 23730.0], [39.6, 23732.0], [39.7, 23733.0], [39.8, 23733.0], [39.9, 23733.0], [40.0, 23739.0], [40.1, 23750.0], [40.2, 23751.0], [40.3, 23751.0], [40.4, 24047.0], [40.5, 24047.0], [40.6, 24062.0], [40.7, 24065.0], [40.8, 24065.0], [40.9, 24065.0], [41.0, 24071.0], [41.1, 24073.0], [41.2, 24073.0], [41.3, 24524.0], [41.4, 25286.0], [41.5, 25386.0], [41.6, 25387.0], [41.7, 25387.0], [41.8, 25394.0], [41.9, 25395.0], [42.0, 25401.0], [42.1, 25401.0], [42.2, 25402.0], [42.3, 25402.0], [42.4, 25402.0], [42.5, 25410.0], [42.6, 25410.0], [42.7, 25416.0], [42.8, 25462.0], [42.9, 25639.0], [43.0, 25639.0], [43.1, 25652.0], [43.2, 25657.0], [43.3, 25660.0], [43.4, 25661.0], [43.5, 25661.0], [43.6, 25661.0], [43.7, 25666.0], [43.8, 25667.0], [43.9, 25667.0], [44.0, 25678.0], [44.1, 25724.0], [44.2, 26331.0], [44.3, 26820.0], [44.4, 26820.0], [44.5, 26830.0], [44.6, 26838.0], [44.7, 26840.0], [44.8, 26840.0], [44.9, 26841.0], [45.0, 26841.0], [45.1, 26854.0], [45.2, 27129.0], [45.3, 27129.0], [45.4, 27140.0], [45.5, 27143.0], [45.6, 27149.0], [45.7, 27150.0], [45.8, 27150.0], [45.9, 27150.0], [46.0, 27157.0], [46.1, 27160.0], [46.2, 27160.0], [46.3, 27552.0], [46.4, 28008.0], [46.5, 28015.0], [46.6, 28015.0], [46.7, 28015.0], [46.8, 28016.0], [46.9, 28017.0], [47.0, 28024.0], [47.1, 28024.0], [47.2, 28026.0], [47.3, 28029.0], [47.4, 28036.0], [47.5, 28036.0], [47.6, 28036.0], [47.7, 28040.0], [47.8, 28058.0], [47.9, 28059.0], [48.0, 28059.0], [48.1, 28060.0], [48.2, 28061.0], [48.3, 28063.0], [48.4, 28075.0], [48.5, 28075.0], [48.6, 28076.0], [48.7, 28100.0], [48.8, 28149.0], [48.9, 28149.0], [49.0, 28150.0], [49.1, 28152.0], [49.2, 28164.0], [49.3, 28164.0], [49.4, 28164.0], [49.5, 28164.0], [49.6, 28165.0], [49.7, 28169.0], [49.8, 28169.0], [49.9, 28178.0], [50.0, 28670.0], [50.1, 28967.0], [50.2, 28970.0], [50.3, 28970.0], [50.4, 28977.0], [50.5, 28986.0], [50.6, 28992.0], [50.7, 28992.0], [50.8, 28994.0], [50.9, 29000.0], [51.0, 29002.0], [51.1, 29012.0], [51.2, 29012.0], [51.3, 30331.0], [51.4, 30336.0], [51.5, 30347.0], [51.6, 30347.0], [51.7, 30348.0], [51.8, 30350.0], [51.9, 30351.0], [52.0, 30351.0], [52.1, 30351.0], [52.2, 30355.0], [52.3, 30355.0], [52.4, 30362.0], [52.5, 30362.0], [52.6, 30364.0], [52.7, 30364.0], [52.8, 30923.0], [52.9, 30924.0], [53.0, 30924.0], [53.1, 30930.0], [53.2, 30930.0], [53.3, 30931.0], [53.4, 30931.0], [53.5, 30933.0], [53.6, 30940.0], [53.7, 30940.0], [53.8, 30954.0], [53.9, 30954.0], [54.0, 31009.0], [54.1, 31010.0], [54.2, 31012.0], [54.3, 31012.0], [54.4, 31013.0], [54.5, 31027.0], [54.6, 31027.0], [54.7, 31032.0], [54.8, 31032.0], [54.9, 31033.0], [55.0, 31034.0], [55.1, 31035.0], [55.2, 31035.0], [55.3, 31035.0], [55.4, 31038.0], [55.5, 31044.0], [55.6, 31047.0], [55.7, 31047.0], [55.8, 31047.0], [55.9, 31048.0], [56.0, 31528.0], [56.1, 31533.0], [56.2, 31533.0], [56.3, 31540.0], [56.4, 31541.0], [56.5, 31546.0], [56.6, 31546.0], [56.7, 31552.0], [56.8, 31553.0], [56.9, 31553.0], [57.0, 31899.0], [57.1, 31899.0], [57.2, 32206.0], [57.3, 33023.0], [57.4, 33159.0], [57.5, 33159.0], [57.6, 33159.0], [57.7, 33159.0], [57.8, 33169.0], [57.9, 33176.0], [58.0, 33176.0], [58.1, 33176.0], [58.2, 33176.0], [58.3, 33178.0], [58.4, 33178.0], [58.5, 33178.0], [58.6, 33179.0], [58.7, 33182.0], [58.8, 33183.0], [58.9, 33183.0], [59.0, 33184.0], [59.1, 33184.0], [59.2, 33189.0], [59.3, 33189.0], [59.4, 33194.0], [59.5, 33198.0], [59.6, 33205.0], [59.7, 33804.0], [59.8, 33804.0], [59.9, 33893.0], [60.0, 34796.0], [60.1, 34797.0], [60.2, 34797.0], [60.3, 34809.0], [60.4, 34816.0], [60.5, 34816.0], [60.6, 34817.0], [60.7, 34817.0], [60.8, 34818.0], [60.9, 34822.0], [61.0, 34826.0], [61.1, 34826.0], [61.2, 34826.0], [61.3, 34826.0], [61.4, 34827.0], [61.5, 35776.0], [61.6, 35776.0], [61.7, 35803.0], [61.8, 35810.0], [61.9, 35827.0], [62.0, 35827.0], [62.1, 35828.0], [62.2, 35833.0], [62.3, 35833.0], [62.4, 35834.0], [62.5, 35834.0], [62.6, 35835.0], [62.7, 35836.0], [62.8, 35836.0], [62.9, 35836.0], [63.0, 35837.0], [63.1, 35840.0], [63.2, 35841.0], [63.3, 35849.0], [63.4, 35849.0], [63.5, 35854.0], [63.6, 35854.0], [63.7, 35870.0], [63.8, 35874.0], [63.9, 35874.0], [64.0, 35884.0], [64.1, 35903.0], [64.2, 36440.0], [64.3, 36440.0], [64.4, 36443.0], [64.5, 36443.0], [64.6, 36462.0], [64.7, 36474.0], [64.8, 36474.0], [64.9, 36476.0], [65.0, 36480.0], [65.1, 36480.0], [65.2, 36480.0], [65.3, 36481.0], [65.4, 36521.0], [65.5, 36527.0], [65.6, 37101.0], [65.7, 37101.0], [65.8, 37124.0], [65.9, 37135.0], [66.0, 37158.0], [66.1, 37158.0], [66.2, 37164.0], [66.3, 37176.0], [66.4, 37179.0], [66.5, 37191.0], [66.6, 37191.0], [66.7, 37192.0], [66.8, 37207.0], [66.9, 37216.0], [67.0, 37216.0], [67.1, 37252.0], [67.2, 37254.0], [67.3, 37255.0], [67.4, 37262.0], [67.5, 37262.0], [67.6, 37268.0], [67.7, 37270.0], [67.8, 37271.0], [67.9, 37271.0], [68.0, 37271.0], [68.1, 37275.0], [68.2, 37277.0], [68.3, 37283.0], [68.4, 37283.0], [68.5, 37289.0], [68.6, 37289.0], [68.7, 37289.0], [68.8, 37289.0], [68.9, 37290.0], [69.0, 37291.0], [69.1, 37296.0], [69.2, 37298.0], [69.3, 37298.0], [69.4, 37301.0], [69.5, 37321.0], [69.6, 37980.0], [69.7, 37980.0], [69.8, 38041.0], [69.9, 38843.0], [70.0, 39118.0], [70.1, 39316.0], [70.2, 39316.0], [70.3, 39316.0], [70.4, 39324.0], [70.5, 39326.0], [70.6, 39326.0], [70.7, 39328.0], [70.8, 39328.0], [70.9, 39328.0], [71.0, 39328.0], [71.1, 39328.0], [71.2, 39335.0], [71.3, 39335.0], [71.4, 39337.0], [71.5, 39337.0], [71.6, 39339.0], [71.7, 39339.0], [71.8, 39352.0], [71.9, 39953.0], [72.0, 39953.0], [72.1, 40273.0], [72.2, 40304.0], [72.3, 40305.0], [72.4, 40305.0], [72.5, 40310.0], [72.6, 40327.0], [72.7, 40328.0], [72.8, 40342.0], [72.9, 40342.0], [73.0, 40344.0], [73.1, 40344.0], [73.2, 40344.0], [73.3, 40347.0], [73.4, 40347.0], [73.5, 40347.0], [73.6, 40349.0], [73.7, 40349.0], [73.8, 40349.0], [73.9, 40350.0], [74.0, 40350.0], [74.1, 40350.0], [74.2, 40350.0], [74.3, 40350.0], [74.4, 40351.0], [74.5, 40351.0], [74.6, 40352.0], [74.7, 40352.0], [74.8, 40354.0], [74.9, 40355.0], [75.0, 40357.0], [75.1, 40357.0], [75.2, 40357.0], [75.3, 40359.0], [75.4, 40359.0], [75.5, 40361.0], [75.6, 40361.0], [75.7, 40362.0], [75.8, 40362.0], [75.9, 40365.0], [76.0, 40365.0], [76.1, 40365.0], [76.2, 40365.0], [76.3, 40366.0], [76.4, 40367.0], [76.5, 40367.0], [76.6, 40367.0], [76.7, 40369.0], [76.8, 40399.0], [76.9, 40412.0], [77.0, 40412.0], [77.1, 40419.0], [77.2, 40431.0], [77.3, 40431.0], [77.4, 40431.0], [77.5, 40443.0], [77.6, 40444.0], [77.7, 40445.0], [77.8, 40448.0], [77.9, 40448.0], [78.0, 40448.0], [78.1, 40455.0], [78.2, 40455.0], [78.3, 40455.0], [78.4, 40466.0], [78.5, 40470.0], [78.6, 40470.0], [78.7, 40741.0], [78.8, 40741.0], [78.9, 42181.0], [79.0, 43473.0], [79.1, 43655.0], [79.2, 43655.0], [79.3, 43676.0], [79.4, 43680.0], [79.5, 43698.0], [79.6, 43708.0], [79.7, 43708.0], [79.8, 43716.0], [79.9, 43718.0], [80.0, 43719.0], [80.1, 43719.0], [80.2, 43719.0], [80.3, 43720.0], [80.4, 43720.0], [80.5, 43720.0], [80.6, 43720.0], [80.7, 43721.0], [80.8, 43724.0], [80.9, 43724.0], [81.0, 43724.0], [81.1, 43724.0], [81.2, 43725.0], [81.3, 43725.0], [81.4, 43726.0], [81.5, 43726.0], [81.6, 43726.0], [81.7, 43727.0], [81.8, 43730.0], [81.9, 43730.0], [82.0, 43730.0], [82.1, 43730.0], [82.2, 43731.0], [82.3, 43731.0], [82.4, 43731.0], [82.5, 43731.0], [82.6, 43732.0], [82.7, 43732.0], [82.8, 43732.0], [82.9, 43732.0], [83.0, 43732.0], [83.1, 43734.0], [83.2, 43735.0], [83.3, 43735.0], [83.4, 43735.0], [83.5, 43735.0], [83.6, 43735.0], [83.7, 43736.0], [83.8, 43736.0], [83.9, 43737.0], [84.0, 43739.0], [84.1, 43740.0], [84.2, 43740.0], [84.3, 43741.0], [84.4, 43762.0], [84.5, 44044.0], [84.6, 44103.0], [84.7, 44103.0], [84.8, 45051.0], [84.9, 45462.0], [85.0, 45465.0], [85.1, 45465.0], [85.2, 45471.0], [85.3, 45471.0], [85.4, 45471.0], [85.5, 45472.0], [85.6, 45472.0], [85.7, 45473.0], [85.8, 45473.0], [85.9, 45474.0], [86.0, 45474.0], [86.1, 45474.0], [86.2, 45474.0], [86.3, 45474.0], [86.4, 45474.0], [86.5, 45474.0], [86.6, 45475.0], [86.7, 45475.0], [86.8, 45497.0], [86.9, 45497.0], [87.0, 45544.0], [87.1, 45848.0], [87.2, 45850.0], [87.3, 45851.0], [87.4, 45851.0], [87.5, 45852.0], [87.6, 45855.0], [87.7, 45857.0], [87.8, 45857.0], [87.9, 45857.0], [88.0, 45861.0], [88.1, 45864.0], [88.2, 45867.0], [88.3, 45867.0], [88.4, 45867.0], [88.5, 45868.0], [88.6, 45868.0], [88.7, 45868.0], [88.8, 45869.0], [88.9, 45871.0], [89.0, 45871.0], [89.1, 45871.0], [89.2, 45871.0], [89.3, 45873.0], [89.4, 45876.0], [89.5, 45876.0], [89.6, 45876.0], [89.7, 45877.0], [89.8, 45877.0], [89.9, 45877.0], [90.0, 45878.0], [90.1, 45878.0], [90.2, 45879.0], [90.3, 45880.0], [90.4, 45881.0], [90.5, 45881.0], [90.6, 45883.0], [90.7, 45884.0], [90.8, 45884.0], [90.9, 45884.0], [91.0, 45884.0], [91.1, 45884.0], [91.2, 45884.0], [91.3, 45885.0], [91.4, 45885.0], [91.5, 45885.0], [91.6, 45885.0], [91.7, 45886.0], [91.8, 45887.0], [91.9, 45887.0], [92.0, 45888.0], [92.1, 45888.0], [92.2, 45890.0], [92.3, 45890.0], [92.4, 45890.0], [92.5, 45890.0], [92.6, 45891.0], [92.7, 45891.0], [92.8, 45891.0], [92.9, 45892.0], [93.0, 45894.0], [93.1, 45894.0], [93.2, 45895.0], [93.3, 45895.0], [93.4, 45897.0], [93.5, 45898.0], [93.6, 45899.0], [93.7, 45899.0], [93.8, 45899.0], [93.9, 45900.0], [94.0, 45901.0], [94.1, 45902.0], [94.2, 45902.0], [94.3, 45904.0], [94.4, 45905.0], [94.5, 46383.0], [94.6, 46383.0], [94.7, 46595.0], [94.8, 47468.0], [94.9, 47527.0], [95.0, 48303.0], [95.1, 48303.0], [95.2, 48510.0], [95.3, 48528.0], [95.4, 48534.0], [95.5, 48534.0], [95.6, 48536.0], [95.7, 48536.0], [95.8, 48536.0], [95.9, 48537.0], [96.0, 48537.0], [96.1, 48538.0], [96.2, 48538.0], [96.3, 48540.0], [96.4, 48540.0], [96.5, 48542.0], [96.6, 48546.0], [96.7, 48553.0], [96.8, 48559.0], [96.9, 48559.0], [97.0, 48560.0], [97.1, 48562.0], [97.2, 51077.0], [97.3, 51077.0], [97.4, 51087.0], [97.5, 51087.0], [97.6, 51095.0], [97.7, 51100.0], [97.8, 51100.0], [97.9, 51107.0], [98.0, 51108.0], [98.1, 51109.0], [98.2, 51109.0], [98.3, 51110.0], [98.4, 51110.0], [98.5, 51110.0], [98.6, 51110.0], [98.7, 51110.0], [98.8, 51115.0], [98.9, 51116.0], [99.0, 51116.0], [99.1, 51116.0], [99.2, 53666.0], [99.3, 53800.0], [99.4, 54709.0], [99.5, 55817.0], [99.6, 55817.0], [99.7, 57315.0], [99.8, 65646.0], [99.9, 81277.0]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 5300.0, "maxY": 53.0, "series": [{"data": [[34700.0, 2.0], [33100.0, 17.0], [36500.0, 2.0], [35700.0, 1.0], [35900.0, 1.0], [37100.0, 9.0], [37300.0, 2.0], [37900.0, 1.0], [39100.0, 1.0], [39900.0, 1.0], [39300.0, 14.0], [40300.0, 37.0], [40700.0, 1.0], [42100.0, 1.0], [44100.0, 1.0], [43700.0, 38.0], [46500.0, 1.0], [46300.0, 1.0], [45500.0, 1.0], [45900.0, 5.0], [48300.0, 1.0], [47500.0, 1.0], [48500.0, 16.0], [51100.0, 11.0], [54700.0, 1.0], [57300.0, 1.0], [5300.0, 1.0], [5400.0, 3.0], [5600.0, 4.0], [5700.0, 6.0], [5800.0, 10.0], [5900.0, 8.0], [6000.0, 3.0], [6100.0, 4.0], [6200.0, 4.0], [6300.0, 2.0], [6600.0, 5.0], [6500.0, 4.0], [6400.0, 3.0], [6700.0, 2.0], [6900.0, 2.0], [7100.0, 3.0], [7000.0, 1.0], [7400.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7800.0, 2.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 4.0], [8600.0, 4.0], [8400.0, 3.0], [8700.0, 2.0], [8200.0, 2.0], [8800.0, 1.0], [9100.0, 1.0], [9000.0, 1.0], [8900.0, 2.0], [9700.0, 1.0], [9800.0, 1.0], [10200.0, 4.0], [10000.0, 1.0], [10100.0, 1.0], [10500.0, 4.0], [10700.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [10900.0, 5.0], [11000.0, 3.0], [11100.0, 2.0], [11200.0, 1.0], [11300.0, 1.0], [11600.0, 3.0], [11500.0, 1.0], [11700.0, 2.0], [11800.0, 2.0], [11900.0, 3.0], [12100.0, 1.0], [12000.0, 1.0], [12300.0, 3.0], [12400.0, 2.0], [12600.0, 1.0], [12800.0, 2.0], [12900.0, 5.0], [13000.0, 1.0], [13200.0, 2.0], [13300.0, 2.0], [13400.0, 2.0], [13800.0, 3.0], [13600.0, 3.0], [13500.0, 1.0], [13900.0, 1.0], [14100.0, 2.0], [14200.0, 4.0], [14600.0, 1.0], [14400.0, 1.0], [14700.0, 2.0], [14500.0, 4.0], [14900.0, 3.0], [15300.0, 1.0], [15100.0, 3.0], [15000.0, 1.0], [15800.0, 1.0], [15700.0, 1.0], [15500.0, 1.0], [15600.0, 3.0], [16200.0, 3.0], [16300.0, 1.0], [16100.0, 9.0], [15900.0, 1.0], [16500.0, 1.0], [16800.0, 4.0], [17100.0, 6.0], [17000.0, 1.0], [17800.0, 1.0], [18300.0, 5.0], [18400.0, 2.0], [18600.0, 3.0], [19200.0, 2.0], [18700.0, 2.0], [18800.0, 5.0], [18500.0, 7.0], [19100.0, 6.0], [19900.0, 7.0], [20200.0, 1.0], [20100.0, 5.0], [20900.0, 1.0], [21000.0, 3.0], [21100.0, 3.0], [21200.0, 7.0], [21300.0, 6.0], [21400.0, 1.0], [21700.0, 1.0], [22300.0, 8.0], [24500.0, 1.0], [23600.0, 10.0], [24000.0, 7.0], [23700.0, 13.0], [25400.0, 7.0], [25300.0, 4.0], [25200.0, 1.0], [25700.0, 1.0], [26300.0, 1.0], [25600.0, 9.0], [26800.0, 7.0], [27100.0, 8.0], [27500.0, 1.0], [28000.0, 18.0], [28100.0, 10.0], [28600.0, 1.0], [28900.0, 6.0], [29000.0, 3.0], [30300.0, 12.0], [31000.0, 16.0], [30900.0, 9.0], [31500.0, 8.0], [31800.0, 1.0], [32200.0, 1.0], [33000.0, 1.0], [33800.0, 2.0], [34800.0, 10.0], [33200.0, 1.0], [36400.0, 9.0], [35800.0, 19.0], [37200.0, 20.0], [38800.0, 1.0], [38000.0, 1.0], [40400.0, 14.0], [40200.0, 1.0], [44000.0, 1.0], [45000.0, 1.0], [43400.0, 1.0], [43600.0, 4.0], [45400.0, 16.0], [45800.0, 53.0], [47400.0, 1.0], [51000.0, 4.0], [53800.0, 1.0], [53600.0, 1.0], [55800.0, 1.0], [65600.0, 1.0], [81200.0, 1.0]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 81200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 779.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 779.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 779.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.4230769230769225, "minX": 1.71821484E12, "maxY": 60.0, "series": [{"data": [[1.7182152E12, 46.3768115942029], [1.7182149E12, 10.31944444444444], [1.71821538E12, 60.0], [1.71821508E12, 31.799999999999997], [1.71821526E12, 52.82608695652174], [1.71821496E12, 17.445945945945947], [1.71821544E12, 33.683333333333316], [1.71821514E12, 39.313253012048186], [1.71821484E12, 4.4230769230769225], [1.71821532E12, 59.24561403508771], [1.71821502E12, 24.688311688311696]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71821544E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5396.0, "minX": 1.0, "maxY": 45876.8, "series": [{"data": [[2.0, 5474.5], [3.0, 5586.75], [4.0, 5719.6], [5.0, 5815.833333333333], [6.0, 5886.000000000001], [7.0, 5969.571428571428], [8.0, 6496.4], [9.0, 6509.083333333334], [10.0, 6800.25], [11.0, 7914.272727272727], [12.0, 8574.818181818182], [13.0, 9089.22222222222], [14.0, 30595.04347826087], [15.0, 13648.272727272728], [16.0, 11366.538461538461], [17.0, 12108.8], [18.0, 12833.333333333334], [19.0, 13572.6], [20.0, 14033.888888888889], [21.0, 14981.400000000001], [22.0, 15154.733333333334], [23.0, 16309.300000000001], [24.0, 29244.857142857138], [25.0, 19196.5], [26.0, 19949.733333333334], [27.0, 27836.88888888889], [28.0, 21751.85714285714], [29.0, 19653.928571428576], [30.0, 20317.0], [31.0, 23044.687499999996], [32.0, 31990.818181818184], [33.0, 21587.9375], [34.0, 23699.555555555555], [35.0, 32551.600000000002], [36.0, 24718.117647058825], [38.0, 28169.181818181816], [39.0, 28962.83333333333], [40.0, 31381.45454545455], [41.0, 30051.000000000004], [42.0, 31356.150000000005], [43.0, 31061.1], [45.0, 30623.615384615383], [46.0, 32678.05], [47.0, 45867.5], [48.0, 38268.53333333333], [49.0, 34872.333333333336], [50.0, 33491.89473684211], [52.0, 38238.38461538461], [53.0, 45876.8], [54.0, 39962.9375], [55.0, 37945.28571428572], [57.0, 41940.666666666664], [58.0, 43008.666666666664], [59.0, 40738.299999999996], [60.0, 44858.68333333334], [1.0, 5396.0]], "isOverall": false, "label": "Actors by name", "isController": false}, {"data": [[37.1219512195122, 28374.327342747114]], "isOverall": false, "label": "Actors by name-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 67.9, "minX": 1.71821484E12, "maxY": 2659.883333333333, "series": [{"data": [[1.7182152E12, 1693.7666666666667], [1.7182149E12, 1732.1666666666667], [1.71821538E12, 1456.15], [1.71821508E12, 1746.9], [1.71821526E12, 1586.15], [1.71821496E12, 1652.9166666666667], [1.71821544E12, 1443.5666666666666], [1.71821514E12, 1987.4833333333333], [1.71821484E12, 582.8666666666667], [1.71821532E12, 2659.883333333333], [1.71821502E12, 1714.4166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7182152E12, 179.2], [1.7182149E12, 186.63333333333333], [1.71821538E12, 155.38333333333333], [1.71821508E12, 194.11666666666667], [1.71821526E12, 179.0], [1.71821496E12, 191.96666666666667], [1.71821544E12, 155.3], [1.71821514E12, 215.36666666666667], [1.71821484E12, 67.9], [1.71821532E12, 295.98333333333335], [1.71821502E12, 199.96666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71821544E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5741.2692307692305, "minX": 1.71821484E12, "maxY": 45878.43333333335, "series": [{"data": [[1.7182152E12, 32983.66666666667], [1.7182149E12, 7500.694444444445], [1.71821538E12, 45584.73333333335], [1.71821508E12, 22410.25333333333], [1.71821526E12, 37242.0724637681], [1.71821496E12, 12340.716216216215], [1.71821544E12, 45878.43333333335], [1.71821514E12, 27629.10843373494], [1.71821484E12, 5741.2692307692305], [1.71821532E12, 42556.36842105263], [1.71821502E12, 17432.31168831169]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71821544E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5741.230769230769, "minX": 1.71821484E12, "maxY": 45878.41666666667, "series": [{"data": [[1.7182152E12, 32983.6231884058], [1.7182149E12, 7500.652777777779], [1.71821538E12, 45584.61666666668], [1.71821508E12, 22410.173333333336], [1.71821526E12, 37242.0724637681], [1.71821496E12, 12340.702702702703], [1.71821544E12, 45878.41666666667], [1.71821514E12, 27629.072289156626], [1.71821484E12, 5741.230769230769], [1.71821532E12, 42556.333333333336], [1.71821502E12, 17432.246753246756]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71821544E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.180555555555556, "minX": 1.71821484E12, "maxY": 92.92, "series": [{"data": [[1.7182152E12, 18.42028985507247], [1.7182149E12, 7.180555555555556], [1.71821538E12, 24.566666666666666], [1.71821508E12, 92.92], [1.71821526E12, 31.0144927536232], [1.71821496E12, 9.986486486486486], [1.71821544E12, 23.05], [1.71821514E12, 14.879518072289159], [1.71821484E12, 10.269230769230768], [1.71821532E12, 23.228070175438596], [1.71821502E12, 11.35064935064935]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71821544E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5396.0, "minX": 1.71821484E12, "maxY": 81277.0, "series": [{"data": [[1.7182152E12, 44103.0], [1.7182149E12, 10769.0], [1.71821538E12, 81277.0], [1.71821508E12, 26854.0], [1.71821526E12, 48303.0], [1.71821496E12, 15333.0], [1.71821544E12, 53666.0], [1.71821514E12, 36443.0], [1.71821484E12, 5995.0], [1.71821532E12, 65646.0], [1.71821502E12, 25724.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7182152E12, 25410.0], [1.7182149E12, 5914.0], [1.71821538E12, 40741.0], [1.71821508E12, 19149.0], [1.71821526E12, 33159.0], [1.71821496E12, 8146.0], [1.71821544E12, 37980.0], [1.71821514E12, 23726.0], [1.71821484E12, 5396.0], [1.71821532E12, 28670.0], [1.71821502E12, 14549.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7182152E12, 36481.0], [1.7182149E12, 9652.900000000001], [1.71821538E12, 48545.6], [1.71821508E12, 26526.600000000002], [1.71821526E12, 39352.0], [1.71821496E12, 14239.0], [1.71821544E12, 45899.9], [1.71821514E12, 31036.4], [1.71821484E12, 5910.9], [1.71821532E12, 51110.0], [1.71821502E12, 19592.800000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7182152E12, 44103.0], [1.7182149E12, 10769.0], [1.71821538E12, 81277.0], [1.71821508E12, 26854.0], [1.71821526E12, 48303.0], [1.71821496E12, 15333.0], [1.71821544E12, 53666.0], [1.71821514E12, 36443.0], [1.71821484E12, 5995.0], [1.71821532E12, 64396.349999999955], [1.71821502E12, 25724.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7182152E12, 31540.0], [1.7182149E12, 7101.5], [1.71821538E12, 43732.0], [1.71821508E12, 22318.0], [1.71821526E12, 37270.0], [1.71821496E12, 12352.5], [1.71821544E12, 45884.0], [1.71821514E12, 28026.0], [1.71821484E12, 5791.0], [1.71821532E12, 40367.0], [1.71821502E12, 17104.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7182152E12, 38059.0], [1.7182149E12, 10375.599999999999], [1.71821538E12, 48559.95], [1.71821508E12, 26840.2], [1.71821526E12, 44262.0], [1.71821496E12, 14744.5], [1.71821544E12, 45903.9], [1.71821514E12, 31728.8], [1.71821484E12, 5983.45], [1.71821532E12, 51787.0], [1.71821502E12, 21091.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71821544E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8017.5, "minX": 1.0, "maxY": 51110.0, "series": [{"data": [[2.0, 10238.0], [8.0, 23728.0], [9.0, 26272.5], [39.0, 35903.0], [10.0, 30923.5], [42.0, 40353.0], [11.0, 36480.0], [3.0, 11647.0], [12.0, 28026.5], [13.0, 35497.0], [14.0, 34820.0], [59.0, 45872.0], [15.0, 40448.0], [1.0, 8017.5], [4.0, 14187.5], [16.0, 39320.0], [17.0, 51110.0], [19.0, 33159.0], [5.0, 31488.0], [6.0, 17530.5], [7.0, 19986.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 59.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8017.5, "minX": 1.0, "maxY": 51110.0, "series": [{"data": [[2.0, 10238.0], [8.0, 23728.0], [9.0, 26272.5], [39.0, 35903.0], [10.0, 30923.5], [42.0, 40353.0], [11.0, 36480.0], [3.0, 11647.0], [12.0, 28026.5], [13.0, 35497.0], [14.0, 34820.0], [59.0, 45872.0], [15.0, 40448.0], [1.0, 8017.5], [4.0, 14187.5], [16.0, 39320.0], [17.0, 51110.0], [19.0, 33159.0], [5.0, 31488.0], [6.0, 17530.5], [7.0, 19986.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 59.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.71821484E12, "maxY": 1.95, "series": [{"data": [[1.7182152E12, 1.2666666666666666], [1.7182149E12, 1.3166666666666667], [1.71821538E12, 1.0], [1.71821508E12, 1.3666666666666667], [1.71821526E12, 1.2666666666666666], [1.71821496E12, 1.35], [1.71821514E12, 1.5166666666666666], [1.71821484E12, 0.55], [1.71821532E12, 1.95], [1.71821502E12, 1.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71821538E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.71821484E12, "maxY": 1.9, "series": [{"data": [[1.7182152E12, 1.15], [1.7182149E12, 1.2], [1.71821538E12, 1.0], [1.71821508E12, 1.25], [1.71821526E12, 1.15], [1.71821496E12, 1.2333333333333334], [1.71821544E12, 1.0], [1.71821514E12, 1.3833333333333333], [1.71821484E12, 0.43333333333333335], [1.71821532E12, 1.9], [1.71821502E12, 1.2833333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71821544E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.71821484E12, "maxY": 1.9, "series": [{"data": [[1.7182152E12, 1.15], [1.7182149E12, 1.2], [1.71821538E12, 1.0], [1.71821508E12, 1.25], [1.71821526E12, 1.15], [1.71821496E12, 1.2333333333333334], [1.71821544E12, 1.0], [1.71821514E12, 1.3833333333333333], [1.71821484E12, 0.43333333333333335], [1.71821532E12, 1.9], [1.71821502E12, 1.2833333333333334]], "isOverall": false, "label": "Actors by name-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71821544E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.71821484E12, "maxY": 1.9, "series": [{"data": [[1.7182152E12, 1.15], [1.7182149E12, 1.2], [1.71821538E12, 1.0], [1.71821508E12, 1.25], [1.71821526E12, 1.15], [1.71821496E12, 1.2333333333333334], [1.71821544E12, 1.0], [1.71821514E12, 1.3833333333333333], [1.71821484E12, 0.43333333333333335], [1.71821532E12, 1.9], [1.71821502E12, 1.2833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71821544E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

