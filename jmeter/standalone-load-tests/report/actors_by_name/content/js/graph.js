/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1060.0, "minX": 0.0, "maxY": 64915.0, "series": [{"data": [[0.0, 1060.0], [0.1, 1060.0], [0.2, 1065.0], [0.3, 1089.0], [0.4, 1122.0], [0.5, 1129.0], [0.6, 1131.0], [0.7, 1132.0], [0.8, 1132.0], [0.9, 1133.0], [1.0, 1134.0], [1.1, 1139.0], [1.2, 1161.0], [1.3, 1162.0], [1.4, 1164.0], [1.5, 1176.0], [1.6, 1176.0], [1.7, 1198.0], [1.8, 1202.0], [1.9, 1205.0], [2.0, 1211.0], [2.1, 1228.0], [2.2, 1233.0], [2.3, 1235.0], [2.4, 1235.0], [2.5, 1236.0], [2.6, 1238.0], [2.7, 1239.0], [2.8, 1243.0], [2.9, 1248.0], [3.0, 1250.0], [3.1, 1250.0], [3.2, 1251.0], [3.3, 1260.0], [3.4, 1262.0], [3.5, 1263.0], [3.6, 1272.0], [3.7, 1275.0], [3.8, 1291.0], [3.9, 1291.0], [4.0, 1292.0], [4.1, 1300.0], [4.2, 1300.0], [4.3, 1301.0], [4.4, 1312.0], [4.5, 1326.0], [4.6, 1347.0], [4.7, 1347.0], [4.8, 1352.0], [4.9, 1357.0], [5.0, 1358.0], [5.1, 1365.0], [5.2, 1383.0], [5.3, 1389.0], [5.4, 1389.0], [5.5, 1399.0], [5.6, 1400.0], [5.7, 1414.0], [5.8, 1416.0], [5.9, 1423.0], [6.0, 1449.0], [6.1, 1515.0], [6.2, 1515.0], [6.3, 1536.0], [6.4, 1579.0], [6.5, 1699.0], [6.6, 1733.0], [6.7, 1766.0], [6.8, 1767.0], [6.9, 1773.0], [7.0, 1773.0], [7.1, 1826.0], [7.2, 1827.0], [7.3, 1832.0], [7.4, 1848.0], [7.5, 1850.0], [7.6, 1863.0], [7.7, 1863.0], [7.8, 1876.0], [7.9, 1884.0], [8.0, 1901.0], [8.1, 1990.0], [8.2, 2010.0], [8.3, 2013.0], [8.4, 2087.0], [8.5, 2087.0], [8.6, 2102.0], [8.7, 2110.0], [8.8, 2131.0], [8.9, 2199.0], [9.0, 2414.0], [9.1, 5634.0], [9.2, 5652.0], [9.3, 5652.0], [9.4, 5741.0], [9.5, 5741.0], [9.6, 5749.0], [9.7, 5762.0], [9.8, 5811.0], [9.9, 5822.0], [10.0, 5822.0], [10.1, 5842.0], [10.2, 5871.0], [10.3, 5873.0], [10.4, 5912.0], [10.5, 5913.0], [10.6, 5925.0], [10.7, 5939.0], [10.8, 5939.0], [10.9, 5943.0], [11.0, 5951.0], [11.1, 5954.0], [11.2, 5962.0], [11.3, 5962.0], [11.4, 5966.0], [11.5, 5985.0], [11.6, 5985.0], [11.7, 5987.0], [11.8, 6054.0], [11.9, 6116.0], [12.0, 6134.0], [12.1, 6140.0], [12.2, 6175.0], [12.3, 6247.0], [12.4, 6247.0], [12.5, 6266.0], [12.6, 6311.0], [12.7, 6358.0], [12.8, 6362.0], [12.9, 6364.0], [13.0, 6508.0], [13.1, 6508.0], [13.2, 6538.0], [13.3, 6550.0], [13.4, 6551.0], [13.5, 6553.0], [13.6, 6555.0], [13.7, 6559.0], [13.8, 6566.0], [13.9, 6566.0], [14.0, 6569.0], [14.1, 6583.0], [14.2, 6613.0], [14.3, 6667.0], [14.4, 6671.0], [14.5, 6765.0], [14.6, 6779.0], [14.7, 6779.0], [14.8, 6911.0], [14.9, 6945.0], [15.0, 6973.0], [15.1, 6980.0], [15.2, 6988.0], [15.3, 6993.0], [15.4, 6993.0], [15.5, 6998.0], [15.6, 7009.0], [15.7, 7068.0], [15.8, 7106.0], [15.9, 7110.0], [16.0, 7158.0], [16.1, 7162.0], [16.2, 7162.0], [16.3, 7184.0], [16.4, 7185.0], [16.5, 7206.0], [16.6, 7256.0], [16.7, 7267.0], [16.8, 7268.0], [16.9, 7308.0], [17.0, 7308.0], [17.1, 7385.0], [17.2, 7533.0], [17.3, 7577.0], [17.4, 7579.0], [17.5, 7779.0], [17.6, 7799.0], [17.7, 7799.0], [17.8, 8064.0], [17.9, 8131.0], [18.0, 8411.0], [18.1, 8614.0], [18.2, 8618.0], [18.3, 8834.0], [18.4, 8844.0], [18.5, 8844.0], [18.6, 8920.0], [18.7, 9006.0], [18.8, 9175.0], [18.9, 9220.0], [19.0, 9387.0], [19.1, 9420.0], [19.2, 9441.0], [19.3, 9441.0], [19.4, 9537.0], [19.5, 9633.0], [19.6, 9731.0], [19.7, 9824.0], [19.8, 9834.0], [19.9, 9856.0], [20.0, 9856.0], [20.1, 10154.0], [20.2, 10239.0], [20.3, 10409.0], [20.4, 10517.0], [20.5, 10599.0], [20.6, 10664.0], [20.7, 10729.0], [20.8, 10729.0], [20.9, 10735.0], [21.0, 10755.0], [21.1, 10824.0], [21.2, 10827.0], [21.3, 10843.0], [21.4, 11008.0], [21.5, 11062.0], [21.6, 11062.0], [21.7, 11113.0], [21.8, 11126.0], [21.9, 11187.0], [22.0, 11216.0], [22.1, 11274.0], [22.2, 11289.0], [22.3, 11294.0], [22.4, 11294.0], [22.5, 11400.0], [22.6, 11488.0], [22.7, 11589.0], [22.8, 11593.0], [22.9, 11647.0], [23.0, 11694.0], [23.1, 11694.0], [23.2, 11715.0], [23.3, 11800.0], [23.4, 11891.0], [23.5, 11897.0], [23.6, 11898.0], [23.7, 11981.0], [23.8, 12026.0], [23.9, 12026.0], [24.0, 12075.0], [24.1, 12083.0], [24.2, 12179.0], [24.3, 12339.0], [24.4, 12391.0], [24.5, 12416.0], [24.6, 12591.0], [24.7, 12591.0], [24.8, 12729.0], [24.9, 12755.0], [25.0, 12766.0], [25.1, 12926.0], [25.2, 12928.0], [25.3, 12949.0], [25.4, 12949.0], [25.5, 12968.0], [25.6, 12995.0], [25.7, 13031.0], [25.8, 13033.0], [25.9, 13115.0], [26.0, 13131.0], [26.1, 13291.0], [26.2, 13291.0], [26.3, 13307.0], [26.4, 13307.0], [26.5, 13313.0], [26.6, 13320.0], [26.7, 13328.0], [26.8, 13352.0], [26.9, 13408.0], [27.0, 13408.0], [27.1, 13529.0], [27.2, 13646.0], [27.3, 13767.0], [27.4, 13961.0], [27.5, 14035.0], [27.6, 14151.0], [27.7, 14151.0], [27.8, 14158.0], [27.9, 14161.0], [28.0, 14172.0], [28.1, 14248.0], [28.2, 14435.0], [28.3, 14472.0], [28.4, 14493.0], [28.5, 14493.0], [28.6, 14765.0], [28.7, 14767.0], [28.8, 14779.0], [28.9, 14788.0], [29.0, 14789.0], [29.1, 14805.0], [29.2, 14848.0], [29.3, 14848.0], [29.4, 14865.0], [29.5, 14942.0], [29.6, 15120.0], [29.7, 15219.0], [29.8, 15223.0], [29.9, 15278.0], [30.0, 15278.0], [30.1, 15312.0], [30.2, 16270.0], [30.3, 16317.0], [30.4, 16320.0], [30.5, 16320.0], [30.6, 16321.0], [30.7, 16321.0], [30.8, 16321.0], [30.9, 16322.0], [31.0, 16325.0], [31.1, 16330.0], [31.2, 16332.0], [31.3, 16346.0], [31.4, 16354.0], [31.5, 16356.0], [31.6, 16356.0], [31.7, 16402.0], [31.8, 16406.0], [31.9, 16406.0], [32.0, 16642.0], [32.1, 16644.0], [32.2, 16648.0], [32.3, 16656.0], [32.4, 16656.0], [32.5, 16660.0], [32.6, 16661.0], [32.7, 16662.0], [32.8, 16675.0], [32.9, 16736.0], [33.0, 17105.0], [33.1, 17105.0], [33.2, 17475.0], [33.3, 17569.0], [33.4, 17682.0], [33.5, 17682.0], [33.6, 17686.0], [33.7, 17688.0], [33.8, 17688.0], [33.9, 17688.0], [34.0, 17689.0], [34.1, 17699.0], [34.2, 17705.0], [34.3, 17712.0], [34.4, 17715.0], [34.5, 17833.0], [34.6, 18018.0], [34.7, 18018.0], [34.8, 18075.0], [34.9, 18205.0], [35.0, 18227.0], [35.1, 18230.0], [35.2, 18231.0], [35.3, 18231.0], [35.4, 18231.0], [35.5, 18232.0], [35.6, 18236.0], [35.7, 18240.0], [35.8, 18241.0], [35.9, 18244.0], [36.0, 18246.0], [36.1, 18252.0], [36.2, 18252.0], [36.3, 18358.0], [36.4, 18527.0], [36.5, 18757.0], [36.6, 19467.0], [36.7, 19480.0], [36.8, 19483.0], [36.9, 19488.0], [37.0, 19488.0], [37.1, 19488.0], [37.2, 19501.0], [37.3, 19502.0], [37.4, 19502.0], [37.5, 19507.0], [37.6, 19509.0], [37.7, 19509.0], [37.8, 19510.0], [37.9, 19511.0], [38.0, 19513.0], [38.1, 19878.0], [38.2, 20065.0], [38.3, 20070.0], [38.4, 20078.0], [38.5, 20078.0], [38.6, 20079.0], [38.7, 20082.0], [38.8, 20083.0], [38.9, 20088.0], [39.0, 20091.0], [39.1, 20093.0], [39.2, 20095.0], [39.3, 20095.0], [39.4, 20095.0], [39.5, 20100.0], [39.6, 21087.0], [39.7, 21185.0], [39.8, 21194.0], [39.9, 21194.0], [40.0, 21194.0], [40.1, 21196.0], [40.2, 21197.0], [40.3, 21198.0], [40.4, 21199.0], [40.5, 21200.0], [40.6, 21200.0], [40.7, 21200.0], [40.8, 21200.0], [40.9, 21204.0], [41.0, 21204.0], [41.1, 21205.0], [41.2, 21210.0], [41.3, 21312.0], [41.4, 22306.0], [41.5, 22315.0], [41.6, 22315.0], [41.7, 22318.0], [41.8, 22319.0], [41.9, 22319.0], [42.0, 22325.0], [42.1, 22327.0], [42.2, 22329.0], [42.3, 22332.0], [42.4, 22332.0], [42.5, 22337.0], [42.6, 22338.0], [42.7, 22343.0], [42.8, 22344.0], [42.9, 23151.0], [43.0, 23344.0], [43.1, 23344.0], [43.2, 23347.0], [43.3, 23349.0], [43.4, 23349.0], [43.5, 23350.0], [43.6, 23351.0], [43.7, 23353.0], [43.8, 23354.0], [43.9, 23354.0], [44.0, 23356.0], [44.1, 23358.0], [44.2, 23358.0], [44.3, 23359.0], [44.4, 23360.0], [44.5, 23367.0], [44.6, 23375.0], [44.7, 23375.0], [44.8, 24580.0], [44.9, 24585.0], [45.0, 24585.0], [45.1, 24587.0], [45.2, 24587.0], [45.3, 24588.0], [45.4, 24588.0], [45.5, 24588.0], [45.6, 24593.0], [45.7, 24594.0], [45.8, 24598.0], [45.9, 24598.0], [46.0, 24601.0], [46.1, 24601.0], [46.2, 24601.0], [46.3, 24606.0], [46.4, 24981.0], [46.5, 25596.0], [46.6, 25599.0], [46.7, 25601.0], [46.8, 25606.0], [46.9, 25608.0], [47.0, 25608.0], [47.1, 25611.0], [47.2, 25614.0], [47.3, 25616.0], [47.4, 25616.0], [47.5, 25616.0], [47.6, 25618.0], [47.7, 25618.0], [47.8, 25621.0], [47.9, 25622.0], [48.0, 25624.0], [48.1, 25624.0], [48.2, 25627.0], [48.3, 25634.0], [48.4, 26018.0], [48.5, 26018.0], [48.6, 26234.0], [48.7, 26417.0], [48.8, 26589.0], [48.9, 26817.0], [49.0, 26824.0], [49.1, 26826.0], [49.2, 26826.0], [49.3, 26826.0], [49.4, 26827.0], [49.5, 26827.0], [49.6, 26827.0], [49.7, 26829.0], [49.8, 26834.0], [49.9, 26835.0], [50.0, 26835.0], [50.1, 26836.0], [50.2, 26837.0], [50.3, 26843.0], [50.4, 26853.0], [50.5, 26853.0], [50.6, 27122.0], [50.7, 27124.0], [50.8, 27124.0], [50.9, 27649.0], [51.0, 27650.0], [51.1, 27652.0], [51.2, 27652.0], [51.3, 27652.0], [51.4, 27653.0], [51.5, 27655.0], [51.6, 27655.0], [51.7, 27655.0], [51.8, 27657.0], [51.9, 27657.0], [52.0, 27658.0], [52.1, 27658.0], [52.2, 27659.0], [52.3, 27660.0], [52.4, 27660.0], [52.5, 27660.0], [52.6, 27661.0], [52.7, 27664.0], [52.8, 27664.0], [52.9, 27665.0], [53.0, 27668.0], [53.1, 27668.0], [53.2, 27669.0], [53.3, 27669.0], [53.4, 27672.0], [53.5, 28154.0], [53.6, 28154.0], [53.7, 28155.0], [53.8, 28158.0], [53.9, 28158.0], [54.0, 28161.0], [54.1, 28164.0], [54.2, 28166.0], [54.3, 28166.0], [54.4, 28166.0], [54.5, 28173.0], [54.6, 28173.0], [54.7, 28173.0], [54.8, 28175.0], [54.9, 28177.0], [55.0, 28179.0], [55.1, 28180.0], [55.2, 28181.0], [55.3, 28182.0], [55.4, 28182.0], [55.5, 28182.0], [55.6, 28187.0], [55.7, 29283.0], [55.8, 29286.0], [55.9, 29288.0], [56.0, 29292.0], [56.1, 29292.0], [56.2, 29292.0], [56.3, 29293.0], [56.4, 29293.0], [56.5, 29298.0], [56.6, 29299.0], [56.7, 29300.0], [56.8, 29302.0], [56.9, 29302.0], [57.0, 29302.0], [57.1, 29302.0], [57.2, 29303.0], [57.3, 29308.0], [57.4, 29349.0], [57.5, 29570.0], [57.6, 29644.0], [57.7, 29644.0], [57.8, 30030.0], [57.9, 30453.0], [58.0, 30466.0], [58.1, 30469.0], [58.2, 30474.0], [58.3, 30475.0], [58.4, 30475.0], [58.5, 30475.0], [58.6, 30476.0], [58.7, 30476.0], [58.8, 30481.0], [58.9, 30489.0], [59.0, 30489.0], [59.1, 30490.0], [59.2, 30491.0], [59.3, 30491.0], [59.4, 30492.0], [59.5, 30493.0], [59.6, 30495.0], [59.7, 30496.0], [59.8, 30496.0], [59.9, 30515.0], [60.0, 30515.0], [60.1, 30527.0], [60.2, 30529.0], [60.3, 31126.0], [60.4, 32336.0], [60.5, 32345.0], [60.6, 32351.0], [60.7, 32352.0], [60.8, 32352.0], [60.9, 32352.0], [61.0, 32356.0], [61.1, 32357.0], [61.2, 32360.0], [61.3, 32364.0], [61.4, 32371.0], [61.5, 32371.0], [61.6, 32371.0], [61.7, 32371.0], [61.8, 32372.0], [61.9, 32373.0], [62.0, 32375.0], [62.1, 32384.0], [62.2, 32642.0], [62.3, 33321.0], [62.4, 33321.0], [62.5, 33368.0], [62.6, 33491.0], [62.7, 33679.0], [62.8, 33683.0], [62.9, 33721.0], [63.0, 33724.0], [63.1, 33724.0], [63.2, 33730.0], [63.3, 33730.0], [63.4, 33737.0], [63.5, 33738.0], [63.6, 33739.0], [63.7, 33743.0], [63.8, 33744.0], [63.9, 33744.0], [64.0, 33747.0], [64.1, 33747.0], [64.2, 33748.0], [64.3, 33748.0], [64.4, 33749.0], [64.5, 33750.0], [64.6, 33755.0], [64.7, 33755.0], [64.8, 33756.0], [64.9, 33757.0], [65.0, 33760.0], [65.1, 33762.0], [65.2, 34057.0], [65.3, 34340.0], [65.4, 34340.0], [65.5, 34561.0], [65.6, 34564.0], [65.7, 34566.0], [65.8, 34576.0], [65.9, 34583.0], [66.0, 34585.0], [66.1, 34586.0], [66.2, 34586.0], [66.3, 34588.0], [66.4, 34589.0], [66.5, 34590.0], [66.6, 34591.0], [66.7, 34596.0], [66.8, 34600.0], [66.9, 34601.0], [67.0, 34601.0], [67.1, 34602.0], [67.2, 34604.0], [67.3, 34608.0], [67.4, 34612.0], [67.5, 34619.0], [67.6, 35134.0], [67.7, 35134.0], [67.8, 35464.0], [67.9, 36271.0], [68.0, 36849.0], [68.1, 36854.0], [68.2, 36855.0], [68.3, 36857.0], [68.4, 36861.0], [68.5, 36861.0], [68.6, 36865.0], [68.7, 36867.0], [68.8, 36868.0], [68.9, 36869.0], [69.0, 36870.0], [69.1, 36875.0], [69.2, 36876.0], [69.3, 36876.0], [69.4, 36877.0], [69.5, 36877.0], [69.6, 36880.0], [69.7, 36880.0], [69.8, 36881.0], [69.9, 36881.0], [70.0, 36882.0], [70.1, 36882.0], [70.2, 36882.0], [70.3, 36883.0], [70.4, 36888.0], [70.5, 36888.0], [70.6, 36890.0], [70.7, 37904.0], [70.8, 37904.0], [70.9, 38394.0], [71.0, 38399.0], [71.1, 38403.0], [71.2, 38405.0], [71.3, 38406.0], [71.4, 38406.0], [71.5, 38409.0], [71.6, 38409.0], [71.7, 38411.0], [71.8, 38411.0], [71.9, 38414.0], [72.0, 38414.0], [72.1, 38417.0], [72.2, 38417.0], [72.3, 38418.0], [72.4, 38418.0], [72.5, 38418.0], [72.6, 38420.0], [72.7, 38424.0], [72.8, 38424.0], [72.9, 38430.0], [73.0, 38438.0], [73.1, 38438.0], [73.2, 38458.0], [73.3, 38499.0], [73.4, 38514.0], [73.5, 38525.0], [73.6, 38533.0], [73.7, 38540.0], [73.8, 38540.0], [73.9, 38540.0], [74.0, 38542.0], [74.1, 38544.0], [74.2, 38544.0], [74.3, 38544.0], [74.4, 38544.0], [74.5, 38546.0], [74.6, 38547.0], [74.7, 38547.0], [74.8, 38549.0], [74.9, 38549.0], [75.0, 38549.0], [75.1, 38551.0], [75.2, 38555.0], [75.3, 38555.0], [75.4, 38555.0], [75.5, 38569.0], [75.6, 38570.0], [75.7, 38697.0], [75.8, 40123.0], [75.9, 40135.0], [76.0, 40136.0], [76.1, 40137.0], [76.2, 40137.0], [76.3, 40137.0], [76.4, 40137.0], [76.5, 40141.0], [76.6, 40143.0], [76.7, 40143.0], [76.8, 40144.0], [76.9, 40144.0], [77.0, 40144.0], [77.1, 40144.0], [77.2, 40147.0], [77.3, 40149.0], [77.4, 40149.0], [77.5, 40149.0], [77.6, 40150.0], [77.7, 40150.0], [77.8, 40152.0], [77.9, 40153.0], [78.0, 40155.0], [78.1, 40155.0], [78.2, 40156.0], [78.3, 40156.0], [78.4, 40157.0], [78.5, 40157.0], [78.6, 40160.0], [78.7, 40169.0], [78.8, 40178.0], [78.9, 40214.0], [79.0, 40242.0], [79.1, 40249.0], [79.2, 40254.0], [79.3, 40254.0], [79.4, 40259.0], [79.5, 40262.0], [79.6, 40262.0], [79.7, 40265.0], [79.8, 40267.0], [79.9, 40268.0], [80.0, 40269.0], [80.1, 40269.0], [80.2, 40272.0], [80.3, 40272.0], [80.4, 40273.0], [80.5, 40273.0], [80.6, 40274.0], [80.7, 40277.0], [80.8, 40277.0], [80.9, 40279.0], [81.0, 40279.0], [81.1, 40280.0], [81.2, 40282.0], [81.3, 40285.0], [81.4, 40285.0], [81.5, 40287.0], [81.6, 40287.0], [81.7, 40292.0], [81.8, 40296.0], [81.9, 40298.0], [82.0, 40298.0], [82.1, 40310.0], [82.2, 40372.0], [82.3, 40426.0], [82.4, 40426.0], [82.5, 40761.0], [82.6, 41282.0], [82.7, 41369.0], [82.8, 41431.0], [82.9, 41432.0], [83.0, 41437.0], [83.1, 41437.0], [83.2, 41440.0], [83.3, 41441.0], [83.4, 41441.0], [83.5, 41442.0], [83.6, 41445.0], [83.7, 41449.0], [83.8, 41450.0], [83.9, 41450.0], [84.0, 41454.0], [84.1, 41457.0], [84.2, 41460.0], [84.3, 41461.0], [84.4, 41464.0], [84.5, 41468.0], [84.6, 41469.0], [84.7, 41469.0], [84.8, 41470.0], [84.9, 41471.0], [85.0, 41474.0], [85.1, 41475.0], [85.2, 41475.0], [85.3, 41476.0], [85.4, 41476.0], [85.5, 41479.0], [85.6, 41484.0], [85.7, 41486.0], [85.8, 41560.0], [85.9, 41766.0], [86.0, 41774.0], [86.1, 41777.0], [86.2, 41777.0], [86.3, 41777.0], [86.4, 41782.0], [86.5, 41783.0], [86.6, 41784.0], [86.7, 41785.0], [86.8, 41785.0], [86.9, 41786.0], [87.0, 41786.0], [87.1, 41789.0], [87.2, 41789.0], [87.3, 41791.0], [87.4, 41791.0], [87.5, 41792.0], [87.6, 41794.0], [87.7, 41794.0], [87.8, 41795.0], [87.9, 41795.0], [88.0, 41796.0], [88.1, 41804.0], [88.2, 41808.0], [88.3, 41826.0], [88.4, 42177.0], [88.5, 42177.0], [88.6, 42182.0], [88.7, 42184.0], [88.8, 42185.0], [88.9, 42185.0], [89.0, 42186.0], [89.1, 42187.0], [89.2, 42190.0], [89.3, 42190.0], [89.4, 42192.0], [89.5, 42193.0], [89.6, 42193.0], [89.7, 42194.0], [89.8, 42196.0], [89.9, 42196.0], [90.0, 42198.0], [90.1, 42198.0], [90.2, 42199.0], [90.3, 42200.0], [90.4, 42201.0], [90.5, 42201.0], [90.6, 42206.0], [90.7, 42206.0], [90.8, 42206.0], [90.9, 42207.0], [91.0, 42207.0], [91.1, 42212.0], [91.2, 42225.0], [91.3, 42706.0], [91.4, 43493.0], [91.5, 43808.0], [91.6, 43808.0], [91.7, 43820.0], [91.8, 43820.0], [91.9, 43826.0], [92.0, 43828.0], [92.1, 43829.0], [92.2, 43830.0], [92.3, 43831.0], [92.4, 43831.0], [92.5, 43832.0], [92.6, 43833.0], [92.7, 43834.0], [92.8, 43834.0], [92.9, 43835.0], [93.0, 43835.0], [93.1, 43835.0], [93.2, 43835.0], [93.3, 43836.0], [93.4, 43836.0], [93.5, 43837.0], [93.6, 43839.0], [93.7, 43839.0], [93.8, 43840.0], [93.9, 43840.0], [94.0, 43840.0], [94.1, 43840.0], [94.2, 43841.0], [94.3, 43843.0], [94.4, 43844.0], [94.5, 43847.0], [94.6, 43848.0], [94.7, 43848.0], [94.8, 43848.0], [94.9, 43853.0], [95.0, 44053.0], [95.1, 44599.0], [95.2, 47228.0], [95.3, 47434.0], [95.4, 47434.0], [95.5, 47528.0], [95.6, 47701.0], [95.7, 47711.0], [95.8, 47714.0], [95.9, 47718.0], [96.0, 47719.0], [96.1, 47720.0], [96.2, 47720.0], [96.3, 47725.0], [96.4, 47726.0], [96.5, 47727.0], [96.6, 47728.0], [96.7, 47729.0], [96.8, 47729.0], [96.9, 47731.0], [97.0, 47731.0], [97.1, 47731.0], [97.2, 47733.0], [97.3, 47734.0], [97.4, 47735.0], [97.5, 47736.0], [97.6, 47737.0], [97.7, 47737.0], [97.8, 47737.0], [97.9, 47739.0], [98.0, 47739.0], [98.1, 47739.0], [98.2, 47740.0], [98.3, 47744.0], [98.4, 47745.0], [98.5, 47745.0], [98.6, 47753.0], [98.7, 48541.0], [98.8, 49078.0], [98.9, 49627.0], [99.0, 50003.0], [99.1, 50283.0], [99.2, 55770.0], [99.3, 55770.0], [99.4, 56093.0], [99.5, 56906.0], [99.6, 57951.0], [99.7, 58342.0], [99.8, 64408.0], [99.9, 64915.0]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 30.0, "series": [{"data": [[33300.0, 2.0], [34300.0, 1.0], [33700.0, 20.0], [34500.0, 12.0], [35100.0, 1.0], [37900.0, 1.0], [38500.0, 20.0], [38300.0, 2.0], [40700.0, 1.0], [40100.0, 27.0], [40300.0, 2.0], [41700.0, 19.0], [42100.0, 16.0], [41300.0, 1.0], [41500.0, 1.0], [42700.0, 1.0], [44500.0, 1.0], [48500.0, 1.0], [47700.0, 27.0], [47500.0, 1.0], [55700.0, 1.0], [56900.0, 1.0], [57900.0, 1.0], [58300.0, 1.0], [64900.0, 1.0], [1000.0, 3.0], [1100.0, 12.0], [1200.0, 20.0], [1300.0, 13.0], [1400.0, 5.0], [1500.0, 3.0], [1600.0, 1.0], [1700.0, 4.0], [1800.0, 8.0], [1900.0, 2.0], [2000.0, 3.0], [2100.0, 4.0], [2400.0, 1.0], [5600.0, 2.0], [5700.0, 4.0], [5800.0, 5.0], [5900.0, 12.0], [6000.0, 1.0], [6100.0, 4.0], [6200.0, 2.0], [6300.0, 4.0], [6500.0, 10.0], [6600.0, 3.0], [6900.0, 7.0], [6700.0, 2.0], [7000.0, 2.0], [7100.0, 6.0], [7300.0, 2.0], [7200.0, 4.0], [7500.0, 3.0], [7700.0, 2.0], [8000.0, 1.0], [8100.0, 1.0], [8400.0, 1.0], [8600.0, 2.0], [9000.0, 1.0], [8900.0, 1.0], [9100.0, 1.0], [8800.0, 2.0], [9200.0, 1.0], [9300.0, 1.0], [9400.0, 2.0], [9600.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9800.0, 3.0], [10200.0, 1.0], [10100.0, 1.0], [10700.0, 3.0], [10500.0, 2.0], [10600.0, 1.0], [10400.0, 1.0], [10800.0, 3.0], [11000.0, 2.0], [11100.0, 3.0], [11200.0, 4.0], [11500.0, 2.0], [11600.0, 2.0], [11400.0, 2.0], [11700.0, 1.0], [11800.0, 4.0], [11900.0, 1.0], [12100.0, 1.0], [12000.0, 3.0], [12300.0, 2.0], [12400.0, 1.0], [12500.0, 1.0], [12700.0, 3.0], [12900.0, 5.0], [13100.0, 2.0], [13000.0, 2.0], [13300.0, 6.0], [13200.0, 1.0], [13400.0, 1.0], [13500.0, 1.0], [13600.0, 1.0], [13700.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14000.0, 1.0], [14100.0, 4.0], [14400.0, 3.0], [14800.0, 3.0], [14700.0, 5.0], [15100.0, 1.0], [14900.0, 1.0], [15200.0, 3.0], [15300.0, 1.0], [16200.0, 1.0], [16300.0, 12.0], [16400.0, 3.0], [17100.0, 1.0], [16700.0, 1.0], [16600.0, 8.0], [17400.0, 1.0], [17800.0, 1.0], [17600.0, 7.0], [18000.0, 2.0], [17700.0, 3.0], [18200.0, 12.0], [18300.0, 1.0], [17500.0, 1.0], [18700.0, 1.0], [19400.0, 5.0], [18500.0, 1.0], [19800.0, 1.0], [19500.0, 8.0], [20000.0, 11.0], [20100.0, 1.0], [21300.0, 1.0], [21000.0, 1.0], [21200.0, 7.0], [21100.0, 7.0], [22300.0, 13.0], [23300.0, 15.0], [23100.0, 1.0], [24500.0, 11.0], [24900.0, 1.0], [24600.0, 3.0], [25500.0, 2.0], [26400.0, 1.0], [26200.0, 1.0], [25600.0, 15.0], [26000.0, 1.0], [26500.0, 1.0], [27100.0, 2.0], [26800.0, 15.0], [27600.0, 23.0], [28100.0, 19.0], [29600.0, 1.0], [29300.0, 7.0], [29500.0, 1.0], [29200.0, 9.0], [30400.0, 18.0], [30500.0, 3.0], [30000.0, 1.0], [31100.0, 1.0], [32300.0, 16.0], [32600.0, 1.0], [34000.0, 1.0], [33400.0, 1.0], [33600.0, 2.0], [34600.0, 7.0], [35400.0, 1.0], [36200.0, 1.0], [36800.0, 24.0], [38400.0, 20.0], [38600.0, 1.0], [40200.0, 28.0], [40400.0, 1.0], [41800.0, 3.0], [41200.0, 1.0], [42200.0, 9.0], [41400.0, 26.0], [43800.0, 30.0], [43400.0, 1.0], [44000.0, 1.0], [49000.0, 1.0], [47400.0, 1.0], [47200.0, 1.0], [50200.0, 1.0], [49600.0, 1.0], [50000.0, 1.0], [56000.0, 1.0], [64400.0, 1.0]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 84.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 786.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 786.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 84.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.2, "minX": 1.71864792E12, "maxY": 60.0, "series": [{"data": [[1.71864798E12, 7.254545454545453], [1.71864846E12, 60.0], [1.71864828E12, 42.987500000000004], [1.71864858E12, 22.043478260869566], [1.7186481E12, 21.28205128205128], [1.71864792E12, 2.2], [1.7186484E12, 57.12987012987011], [1.71864822E12, 36.029850746268664], [1.71864804E12, 13.96], [1.71864852E12, 56.039370078740156], [1.71864834E12, 50.08108108108109], [1.71864816E12, 28.975]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71864858E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5699.0, "minX": 1.0, "maxY": 41519.5, "series": [{"data": [[2.0, 5741.0], [3.0, 5699.0], [4.0, 5839.333333333334], [5.0, 5924.4], [6.0, 6138.857142857142], [7.0, 6198.000000000001], [8.0, 6556.181818181818], [9.0, 6732.333333333333], [10.0, 7078.333333333334], [11.0, 7507.083333333334], [12.0, 8623.875], [13.0, 9353.545454545454], [14.0, 10076.583333333334], [15.0, 10654.555555555555], [16.0, 11377.272727272726], [17.0, 12089.0], [18.0, 12942.625], [19.0, 13355.363636363636], [20.0, 14425.4], [21.0, 14662.999999999998], [22.0, 15838.41666666667], [23.0, 27658.63636363636], [24.0, 17630.043478260868], [25.0, 38438.0], [26.0, 18453.166666666668], [27.0, 21118.499999999996], [28.0, 20353.57142857143], [29.0, 20162.0], [31.0, 21534.666666666668], [32.0, 22669.714285714283], [34.0, 24037.17647058823], [35.0, 24760.86666666667], [37.0, 26095.315789473687], [38.0, 26990.1875], [40.0, 28700.333333333332], [41.0, 23151.0], [42.0, 29593.625], [44.0, 31283.4347826087], [46.0, 36172.0], [47.0, 26589.0], [48.0, 35320.99999999999], [49.0, 31126.0], [50.0, 35206.59090909092], [51.0, 17569.0], [52.0, 36972.78571428571], [53.0, 24194.0], [54.0, 38229.39130434783], [55.0, 33631.333333333336], [57.0, 40938.034482758616], [56.0, 41519.5], [58.0, 32642.0], [59.0, 41453.5], [60.0, 29893.37860082304], [1.0, 17601.0]], "isOverall": false, "label": "Actors by name", "isController": false}, {"data": [[39.95057471264369, 25401.09655172412]], "isOverall": false, "label": "Actors by name-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13.216666666666667, "minX": 1.71864792E12, "maxY": 242290.56666666668, "series": [{"data": [[1.71864798E12, 1370.1333333333334], [1.71864846E12, 210098.36666666667], [1.71864828E12, 1853.1333333333334], [1.71864858E12, 536.2666666666667], [1.7186481E12, 1733.5166666666667], [1.71864792E12, 102.0], [1.7186484E12, 1839.7166666666667], [1.71864822E12, 1576.8333333333333], [1.71864804E12, 1666.2], [1.71864852E12, 242290.56666666668], [1.71864834E12, 1829.6833333333334], [1.71864816E12, 1818.7666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71864798E12, 142.35], [1.71864846E12, 334.6666666666667], [1.71864828E12, 207.8], [1.71864858E12, 59.71666666666667], [1.7186481E12, 202.4], [1.71864792E12, 13.216666666666667], [1.7186484E12, 199.83333333333334], [1.71864822E12, 173.7], [1.71864804E12, 194.93333333333334], [1.71864852E12, 328.2], [1.71864834E12, 192.03333333333333], [1.71864816E12, 207.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71864858E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6060.2, "minX": 1.71864792E12, "maxY": 41003.63636363636, "series": [{"data": [[1.71864798E12, 6403.127272727273], [1.71864846E12, 31487.294573643427], [1.71864828E12, 30631.012500000008], [1.71864858E12, 27659.086956521736], [1.7186481E12, 15022.346153846154], [1.71864792E12, 6060.2], [1.7186484E12, 41003.63636363636], [1.71864822E12, 25488.0447761194], [1.71864804E12, 9922.280000000002], [1.71864852E12, 27764.05511811024], [1.71864834E12, 35585.770270270266], [1.71864816E12, 20346.312499999996]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71864858E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6060.2, "minX": 1.71864792E12, "maxY": 41003.584415584424, "series": [{"data": [[1.71864798E12, 6403.072727272726], [1.71864846E12, 31406.961240310065], [1.71864828E12, 30630.987500000003], [1.71864858E12, 27659.043478260868], [1.7186481E12, 15022.346153846154], [1.71864792E12, 6060.2], [1.7186484E12, 41003.584415584424], [1.71864822E12, 25488.0447761194], [1.71864804E12, 9922.280000000002], [1.71864852E12, 27257.10236220473], [1.71864834E12, 35585.770270270266], [1.71864816E12, 20346.28749999999]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71864858E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.6000000000000005, "minX": 1.71864792E12, "maxY": 19.500000000000007, "series": [{"data": [[1.71864798E12, 5.6000000000000005], [1.71864846E12, 14.527131782945736], [1.71864828E12, 12.4875], [1.71864858E12, 16.782608695652172], [1.7186481E12, 8.92307692307692], [1.71864792E12, 13.6], [1.7186484E12, 18.116883116883127], [1.71864822E12, 18.850746268656717], [1.71864804E12, 6.466666666666665], [1.71864852E12, 11.519685039370081], [1.71864834E12, 19.500000000000007], [1.71864816E12, 11.162500000000003]], "isOverall": false, "label": "Actors by name", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71864858E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5634.0, "minX": 1.71864792E12, "maxY": 64915.0, "series": [{"data": [[1.71864798E12, 7799.0], [1.71864846E12, 64408.0], [1.71864828E12, 43808.0], [1.71864858E12, 27672.0], [1.7186481E12, 19878.0], [1.71864792E12, 7533.0], [1.7186484E12, 57951.0], [1.71864822E12, 34340.0], [1.71864804E12, 12416.0], [1.71864852E12, 64915.0], [1.71864834E12, 48541.0], [1.71864816E12, 29644.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71864798E12, 5749.0], [1.71864846E12, 40242.0], [1.71864828E12, 23151.0], [1.71864858E12, 27649.0], [1.7186481E12, 12591.0], [1.71864792E12, 5634.0], [1.7186484E12, 32642.0], [1.71864822E12, 23344.0], [1.71864804E12, 6671.0], [1.71864852E12, 31126.0], [1.71864834E12, 26589.0], [1.71864816E12, 17682.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71864798E12, 7032.6], [1.71864846E12, 47739.9], [1.71864828E12, 32383.1], [1.71864858E12, 27669.0], [1.7186481E12, 16663.3], [1.71864792E12, 7533.0], [1.7186484E12, 41804.8], [1.71864822E12, 26845.0], [1.71864804E12, 11999.0], [1.71864852E12, 42207.0], [1.71864834E12, 36888.0], [1.71864816E12, 22336.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71864798E12, 7799.0], [1.71864846E12, 64408.0], [1.71864828E12, 43808.0], [1.71864858E12, 27672.0], [1.7186481E12, 19878.0], [1.71864792E12, 7533.0], [1.7186484E12, 57951.0], [1.71864822E12, 34340.0], [1.71864804E12, 12416.0], [1.71864852E12, 64915.0], [1.71864834E12, 48541.0], [1.71864816E12, 29644.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71864798E12, 6358.0], [1.71864846E12, 43836.0], [1.71864828E12, 30474.5], [1.71864858E12, 27658.0], [1.7186481E12, 14797.0], [1.71864792E12, 5741.0], [1.7186484E12, 40152.0], [1.71864822E12, 25606.0], [1.71864804E12, 10409.0], [1.71864852E12, 41468.5], [1.71864834E12, 34600.5], [1.71864816E12, 20082.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71864798E12, 7577.4], [1.71864846E12, 52743.500000000015], [1.71864828E12, 37782.00000000001], [1.71864858E12, 27671.4], [1.7186481E12, 17879.199999999997], [1.71864792E12, 7533.0], [1.7186484E12, 49692.6], [1.71864822E12, 28458.199999999986], [1.71864804E12, 12211.0], [1.71864852E12, 46549.699999999975], [1.71864834E12, 43633.0], [1.71864816E12, 26039.50000000001]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71864858E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1238.0, "minX": 1.0, "maxY": 47712.5, "series": [{"data": [[2.0, 7579.0], [33.0, 40275.5], [10.0, 16499.0], [3.0, 8131.0], [12.0, 17694.0], [13.0, 20088.0], [14.0, 22310.5], [15.0, 24582.5], [1.0, 8665.5], [4.0, 12264.5], [16.0, 29284.5], [17.0, 23356.0], [19.0, 32340.5], [21.0, 34562.5], [22.0, 38546.5], [23.0, 29062.5], [24.0, 33747.0], [25.0, 41777.0], [27.0, 42182.0], [7.0, 14159.5], [28.0, 41460.5], [29.0, 47712.5], [31.0, 43836.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1297.5], [2.0, 1260.0], [33.0, 1238.0], [4.0, 1855.5], [3.0, 1579.0], [27.0, 1291.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 941.0, "minX": 1.0, "maxY": 47712.5, "series": [{"data": [[2.0, 7579.0], [33.0, 40275.5], [10.0, 16499.0], [3.0, 8131.0], [12.0, 17694.0], [13.0, 20088.0], [14.0, 22310.5], [15.0, 24582.5], [1.0, 8665.5], [4.0, 12264.5], [16.0, 29284.5], [17.0, 23356.0], [19.0, 32340.5], [21.0, 34562.5], [22.0, 38546.5], [23.0, 29062.5], [24.0, 33747.0], [25.0, 41777.0], [27.0, 42182.0], [7.0, 14159.5], [28.0, 41460.5], [29.0, 47712.5], [31.0, 43836.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1060.5], [2.0, 1000.0], [33.0, 941.0], [4.0, 1487.5], [3.0, 1245.0], [27.0, 994.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.71864792E12, "maxY": 2.1333333333333333, "series": [{"data": [[1.71864798E12, 1.0333333333333334], [1.71864846E12, 2.1333333333333333], [1.71864828E12, 1.45], [1.7186481E12, 1.4166666666666667], [1.71864792E12, 0.13333333333333333], [1.7186484E12, 1.3833333333333333], [1.71864822E12, 1.2333333333333334], [1.71864804E12, 1.3833333333333333], [1.71864852E12, 1.5166666666666666], [1.71864834E12, 1.3666666666666667], [1.71864816E12, 1.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71864852E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.71864792E12, "maxY": 1.5, "series": [{"data": [[1.71864798E12, 0.9166666666666666], [1.71864846E12, 1.5], [1.71864828E12, 1.3333333333333333], [1.71864858E12, 0.38333333333333336], [1.7186481E12, 1.3], [1.71864792E12, 0.08333333333333333], [1.7186484E12, 1.2833333333333334], [1.71864822E12, 1.1166666666666667], [1.71864804E12, 1.25], [1.71864852E12, 1.3666666666666667], [1.71864834E12, 1.2333333333333334], [1.71864816E12, 1.3333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71864846E12, 0.65], [1.71864852E12, 0.75]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71864858E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.71864792E12, "maxY": 1.5, "series": [{"data": [[1.71864846E12, 0.65], [1.71864852E12, 0.75]], "isOverall": false, "label": "Actors by name-failure", "isController": false}, {"data": [[1.71864798E12, 0.9166666666666666], [1.71864846E12, 1.5], [1.71864828E12, 1.3333333333333333], [1.71864858E12, 0.38333333333333336], [1.7186481E12, 1.3], [1.71864792E12, 0.08333333333333333], [1.7186484E12, 1.2833333333333334], [1.71864822E12, 1.1166666666666667], [1.71864804E12, 1.25], [1.71864852E12, 1.3666666666666667], [1.71864834E12, 1.2333333333333334], [1.71864816E12, 1.3333333333333333]], "isOverall": false, "label": "Actors by name-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71864858E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.71864792E12, "maxY": 1.5, "series": [{"data": [[1.71864798E12, 0.9166666666666666], [1.71864846E12, 1.5], [1.71864828E12, 1.3333333333333333], [1.71864858E12, 0.38333333333333336], [1.7186481E12, 1.3], [1.71864792E12, 0.08333333333333333], [1.7186484E12, 1.2833333333333334], [1.71864822E12, 1.1166666666666667], [1.71864804E12, 1.25], [1.71864852E12, 1.3666666666666667], [1.71864834E12, 1.2333333333333334], [1.71864816E12, 1.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71864846E12, 0.65], [1.71864852E12, 0.75]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71864858E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

