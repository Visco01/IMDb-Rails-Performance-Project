/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 25123.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 107.0], [0.4, 117.0], [0.5, 126.0], [0.6, 132.0], [0.7, 140.0], [0.8, 144.0], [0.9, 148.0], [1.0, 152.0], [1.1, 155.0], [1.2, 158.0], [1.3, 161.0], [1.4, 165.0], [1.5, 168.0], [1.6, 171.0], [1.7, 174.0], [1.8, 177.0], [1.9, 178.0], [2.0, 181.0], [2.1, 183.0], [2.2, 184.0], [2.3, 186.0], [2.4, 187.0], [2.5, 189.0], [2.6, 191.0], [2.7, 192.0], [2.8, 194.0], [2.9, 195.0], [3.0, 196.0], [3.1, 199.0], [3.2, 201.0], [3.3, 203.0], [3.4, 205.0], [3.5, 206.0], [3.6, 207.0], [3.7, 209.0], [3.8, 211.0], [3.9, 213.0], [4.0, 215.0], [4.1, 217.0], [4.2, 218.0], [4.3, 221.0], [4.4, 222.0], [4.5, 225.0], [4.6, 227.0], [4.7, 229.0], [4.8, 231.0], [4.9, 233.0], [5.0, 235.0], [5.1, 238.0], [5.2, 240.0], [5.3, 241.0], [5.4, 244.0], [5.5, 246.0], [5.6, 248.0], [5.7, 250.0], [5.8, 252.0], [5.9, 254.0], [6.0, 256.0], [6.1, 260.0], [6.2, 262.0], [6.3, 263.0], [6.4, 265.0], [6.5, 268.0], [6.6, 270.0], [6.7, 272.0], [6.8, 275.0], [6.9, 279.0], [7.0, 281.0], [7.1, 283.0], [7.2, 284.0], [7.3, 286.0], [7.4, 287.0], [7.5, 290.0], [7.6, 292.0], [7.7, 295.0], [7.8, 297.0], [7.9, 299.0], [8.0, 301.0], [8.1, 304.0], [8.2, 306.0], [8.3, 308.0], [8.4, 310.0], [8.5, 313.0], [8.6, 314.0], [8.7, 316.0], [8.8, 318.0], [8.9, 322.0], [9.0, 323.0], [9.1, 326.0], [9.2, 329.0], [9.3, 333.0], [9.4, 336.0], [9.5, 339.0], [9.6, 343.0], [9.7, 346.0], [9.8, 350.0], [9.9, 353.0], [10.0, 355.0], [10.1, 359.0], [10.2, 363.0], [10.3, 365.0], [10.4, 367.0], [10.5, 371.0], [10.6, 374.0], [10.7, 378.0], [10.8, 380.0], [10.9, 383.0], [11.0, 386.0], [11.1, 389.0], [11.2, 391.0], [11.3, 393.0], [11.4, 397.0], [11.5, 399.0], [11.6, 402.0], [11.7, 403.0], [11.8, 407.0], [11.9, 410.0], [12.0, 413.0], [12.1, 415.0], [12.2, 417.0], [12.3, 419.0], [12.4, 422.0], [12.5, 424.0], [12.6, 427.0], [12.7, 429.0], [12.8, 432.0], [12.9, 434.0], [13.0, 436.0], [13.1, 437.0], [13.2, 440.0], [13.3, 442.0], [13.4, 444.0], [13.5, 445.0], [13.6, 447.0], [13.7, 448.0], [13.8, 451.0], [13.9, 454.0], [14.0, 456.0], [14.1, 458.0], [14.2, 460.0], [14.3, 464.0], [14.4, 466.0], [14.5, 467.0], [14.6, 470.0], [14.7, 472.0], [14.8, 475.0], [14.9, 477.0], [15.0, 480.0], [15.1, 483.0], [15.2, 486.0], [15.3, 489.0], [15.4, 493.0], [15.5, 496.0], [15.6, 497.0], [15.7, 501.0], [15.8, 504.0], [15.9, 507.0], [16.0, 508.0], [16.1, 511.0], [16.2, 513.0], [16.3, 515.0], [16.4, 517.0], [16.5, 520.0], [16.6, 523.0], [16.7, 527.0], [16.8, 531.0], [16.9, 533.0], [17.0, 536.0], [17.1, 541.0], [17.2, 544.0], [17.3, 548.0], [17.4, 552.0], [17.5, 555.0], [17.6, 557.0], [17.7, 561.0], [17.8, 564.0], [17.9, 567.0], [18.0, 571.0], [18.1, 573.0], [18.2, 577.0], [18.3, 580.0], [18.4, 584.0], [18.5, 587.0], [18.6, 591.0], [18.7, 594.0], [18.8, 597.0], [18.9, 600.0], [19.0, 603.0], [19.1, 608.0], [19.2, 610.0], [19.3, 614.0], [19.4, 616.0], [19.5, 619.0], [19.6, 625.0], [19.7, 628.0], [19.8, 630.0], [19.9, 632.0], [20.0, 635.0], [20.1, 637.0], [20.2, 639.0], [20.3, 643.0], [20.4, 646.0], [20.5, 649.0], [20.6, 652.0], [20.7, 656.0], [20.8, 659.0], [20.9, 664.0], [21.0, 668.0], [21.1, 673.0], [21.2, 676.0], [21.3, 678.0], [21.4, 682.0], [21.5, 685.0], [21.6, 688.0], [21.7, 692.0], [21.8, 695.0], [21.9, 699.0], [22.0, 701.0], [22.1, 705.0], [22.2, 710.0], [22.3, 713.0], [22.4, 717.0], [22.5, 721.0], [22.6, 724.0], [22.7, 728.0], [22.8, 733.0], [22.9, 737.0], [23.0, 741.0], [23.1, 746.0], [23.2, 749.0], [23.3, 752.0], [23.4, 755.0], [23.5, 760.0], [23.6, 765.0], [23.7, 768.0], [23.8, 774.0], [23.9, 777.0], [24.0, 783.0], [24.1, 786.0], [24.2, 792.0], [24.3, 796.0], [24.4, 801.0], [24.5, 805.0], [24.6, 809.0], [24.7, 813.0], [24.8, 817.0], [24.9, 821.0], [25.0, 825.0], [25.1, 831.0], [25.2, 838.0], [25.3, 843.0], [25.4, 848.0], [25.5, 853.0], [25.6, 860.0], [25.7, 861.0], [25.8, 868.0], [25.9, 874.0], [26.0, 878.0], [26.1, 880.0], [26.2, 885.0], [26.3, 890.0], [26.4, 896.0], [26.5, 899.0], [26.6, 906.0], [26.7, 912.0], [26.8, 916.0], [26.9, 922.0], [27.0, 927.0], [27.1, 933.0], [27.2, 938.0], [27.3, 943.0], [27.4, 947.0], [27.5, 951.0], [27.6, 957.0], [27.7, 961.0], [27.8, 965.0], [27.9, 969.0], [28.0, 974.0], [28.1, 978.0], [28.2, 985.0], [28.3, 989.0], [28.4, 993.0], [28.5, 998.0], [28.6, 1002.0], [28.7, 1008.0], [28.8, 1011.0], [28.9, 1018.0], [29.0, 1022.0], [29.1, 1029.0], [29.2, 1034.0], [29.3, 1038.0], [29.4, 1042.0], [29.5, 1047.0], [29.6, 1053.0], [29.7, 1058.0], [29.8, 1063.0], [29.9, 1068.0], [30.0, 1073.0], [30.1, 1080.0], [30.2, 1084.0], [30.3, 1088.0], [30.4, 1092.0], [30.5, 1097.0], [30.6, 1104.0], [30.7, 1107.0], [30.8, 1112.0], [30.9, 1118.0], [31.0, 1122.0], [31.1, 1125.0], [31.2, 1130.0], [31.3, 1134.0], [31.4, 1138.0], [31.5, 1143.0], [31.6, 1147.0], [31.7, 1151.0], [31.8, 1155.0], [31.9, 1158.0], [32.0, 1162.0], [32.1, 1167.0], [32.2, 1169.0], [32.3, 1172.0], [32.4, 1176.0], [32.5, 1180.0], [32.6, 1182.0], [32.7, 1185.0], [32.8, 1191.0], [32.9, 1196.0], [33.0, 1199.0], [33.1, 1203.0], [33.2, 1206.0], [33.3, 1210.0], [33.4, 1214.0], [33.5, 1218.0], [33.6, 1223.0], [33.7, 1226.0], [33.8, 1229.0], [33.9, 1235.0], [34.0, 1238.0], [34.1, 1241.0], [34.2, 1245.0], [34.3, 1248.0], [34.4, 1252.0], [34.5, 1256.0], [34.6, 1261.0], [34.7, 1265.0], [34.8, 1268.0], [34.9, 1270.0], [35.0, 1277.0], [35.1, 1282.0], [35.2, 1287.0], [35.3, 1291.0], [35.4, 1298.0], [35.5, 1301.0], [35.6, 1306.0], [35.7, 1310.0], [35.8, 1313.0], [35.9, 1317.0], [36.0, 1320.0], [36.1, 1323.0], [36.2, 1327.0], [36.3, 1332.0], [36.4, 1336.0], [36.5, 1339.0], [36.6, 1344.0], [36.7, 1347.0], [36.8, 1351.0], [36.9, 1355.0], [37.0, 1359.0], [37.1, 1365.0], [37.2, 1368.0], [37.3, 1376.0], [37.4, 1384.0], [37.5, 1391.0], [37.6, 1395.0], [37.7, 1402.0], [37.8, 1405.0], [37.9, 1410.0], [38.0, 1415.0], [38.1, 1420.0], [38.2, 1427.0], [38.3, 1429.0], [38.4, 1438.0], [38.5, 1446.0], [38.6, 1451.0], [38.7, 1457.0], [38.8, 1462.0], [38.9, 1467.0], [39.0, 1475.0], [39.1, 1480.0], [39.2, 1485.0], [39.3, 1493.0], [39.4, 1499.0], [39.5, 1503.0], [39.6, 1508.0], [39.7, 1512.0], [39.8, 1518.0], [39.9, 1523.0], [40.0, 1527.0], [40.1, 1531.0], [40.2, 1538.0], [40.3, 1544.0], [40.4, 1548.0], [40.5, 1552.0], [40.6, 1558.0], [40.7, 1563.0], [40.8, 1572.0], [40.9, 1576.0], [41.0, 1583.0], [41.1, 1588.0], [41.2, 1593.0], [41.3, 1600.0], [41.4, 1603.0], [41.5, 1607.0], [41.6, 1616.0], [41.7, 1623.0], [41.8, 1626.0], [41.9, 1633.0], [42.0, 1639.0], [42.1, 1644.0], [42.2, 1648.0], [42.3, 1657.0], [42.4, 1660.0], [42.5, 1667.0], [42.6, 1672.0], [42.7, 1676.0], [42.8, 1682.0], [42.9, 1687.0], [43.0, 1691.0], [43.1, 1700.0], [43.2, 1707.0], [43.3, 1713.0], [43.4, 1720.0], [43.5, 1726.0], [43.6, 1732.0], [43.7, 1737.0], [43.8, 1741.0], [43.9, 1745.0], [44.0, 1751.0], [44.1, 1757.0], [44.2, 1763.0], [44.3, 1769.0], [44.4, 1774.0], [44.5, 1779.0], [44.6, 1787.0], [44.7, 1793.0], [44.8, 1798.0], [44.9, 1805.0], [45.0, 1810.0], [45.1, 1816.0], [45.2, 1824.0], [45.3, 1830.0], [45.4, 1838.0], [45.5, 1845.0], [45.6, 1851.0], [45.7, 1858.0], [45.8, 1865.0], [45.9, 1870.0], [46.0, 1878.0], [46.1, 1886.0], [46.2, 1893.0], [46.3, 1898.0], [46.4, 1905.0], [46.5, 1909.0], [46.6, 1915.0], [46.7, 1919.0], [46.8, 1925.0], [46.9, 1933.0], [47.0, 1940.0], [47.1, 1949.0], [47.2, 1954.0], [47.3, 1960.0], [47.4, 1967.0], [47.5, 1975.0], [47.6, 1981.0], [47.7, 1992.0], [47.8, 2001.0], [47.9, 2007.0], [48.0, 2011.0], [48.1, 2017.0], [48.2, 2023.0], [48.3, 2033.0], [48.4, 2040.0], [48.5, 2049.0], [48.6, 2055.0], [48.7, 2062.0], [48.8, 2067.0], [48.9, 2075.0], [49.0, 2084.0], [49.1, 2095.0], [49.2, 2102.0], [49.3, 2110.0], [49.4, 2117.0], [49.5, 2123.0], [49.6, 2133.0], [49.7, 2140.0], [49.8, 2148.0], [49.9, 2158.0], [50.0, 2164.0], [50.1, 2171.0], [50.2, 2175.0], [50.3, 2184.0], [50.4, 2191.0], [50.5, 2201.0], [50.6, 2209.0], [50.7, 2221.0], [50.8, 2225.0], [50.9, 2234.0], [51.0, 2241.0], [51.1, 2251.0], [51.2, 2259.0], [51.3, 2265.0], [51.4, 2271.0], [51.5, 2277.0], [51.6, 2284.0], [51.7, 2295.0], [51.8, 2306.0], [51.9, 2314.0], [52.0, 2324.0], [52.1, 2331.0], [52.2, 2337.0], [52.3, 2342.0], [52.4, 2349.0], [52.5, 2356.0], [52.6, 2361.0], [52.7, 2367.0], [52.8, 2375.0], [52.9, 2381.0], [53.0, 2386.0], [53.1, 2395.0], [53.2, 2402.0], [53.3, 2408.0], [53.4, 2418.0], [53.5, 2425.0], [53.6, 2435.0], [53.7, 2441.0], [53.8, 2451.0], [53.9, 2458.0], [54.0, 2465.0], [54.1, 2470.0], [54.2, 2476.0], [54.3, 2482.0], [54.4, 2489.0], [54.5, 2497.0], [54.6, 2504.0], [54.7, 2510.0], [54.8, 2519.0], [54.9, 2526.0], [55.0, 2534.0], [55.1, 2545.0], [55.2, 2553.0], [55.3, 2560.0], [55.4, 2568.0], [55.5, 2573.0], [55.6, 2580.0], [55.7, 2588.0], [55.8, 2597.0], [55.9, 2608.0], [56.0, 2616.0], [56.1, 2626.0], [56.2, 2635.0], [56.3, 2642.0], [56.4, 2652.0], [56.5, 2660.0], [56.6, 2668.0], [56.7, 2676.0], [56.8, 2684.0], [56.9, 2693.0], [57.0, 2703.0], [57.1, 2711.0], [57.2, 2720.0], [57.3, 2726.0], [57.4, 2743.0], [57.5, 2752.0], [57.6, 2761.0], [57.7, 2767.0], [57.8, 2778.0], [57.9, 2788.0], [58.0, 2798.0], [58.1, 2805.0], [58.2, 2817.0], [58.3, 2832.0], [58.4, 2841.0], [58.5, 2852.0], [58.6, 2861.0], [58.7, 2871.0], [58.8, 2884.0], [58.9, 2892.0], [59.0, 2900.0], [59.1, 2912.0], [59.2, 2924.0], [59.3, 2935.0], [59.4, 2944.0], [59.5, 2960.0], [59.6, 2978.0], [59.7, 2987.0], [59.8, 2995.0], [59.9, 3004.0], [60.0, 3015.0], [60.1, 3033.0], [60.2, 3045.0], [60.3, 3052.0], [60.4, 3064.0], [60.5, 3077.0], [60.6, 3090.0], [60.7, 3104.0], [60.8, 3115.0], [60.9, 3127.0], [61.0, 3137.0], [61.1, 3151.0], [61.2, 3164.0], [61.3, 3178.0], [61.4, 3194.0], [61.5, 3203.0], [61.6, 3210.0], [61.7, 3223.0], [61.8, 3235.0], [61.9, 3243.0], [62.0, 3259.0], [62.1, 3269.0], [62.2, 3275.0], [62.3, 3290.0], [62.4, 3303.0], [62.5, 3307.0], [62.6, 3320.0], [62.7, 3329.0], [62.8, 3340.0], [62.9, 3347.0], [63.0, 3356.0], [63.1, 3366.0], [63.2, 3376.0], [63.3, 3391.0], [63.4, 3402.0], [63.5, 3416.0], [63.6, 3427.0], [63.7, 3436.0], [63.8, 3448.0], [63.9, 3459.0], [64.0, 3468.0], [64.1, 3478.0], [64.2, 3488.0], [64.3, 3497.0], [64.4, 3505.0], [64.5, 3514.0], [64.6, 3523.0], [64.7, 3530.0], [64.8, 3536.0], [64.9, 3549.0], [65.0, 3555.0], [65.1, 3568.0], [65.2, 3575.0], [65.3, 3583.0], [65.4, 3591.0], [65.5, 3607.0], [65.6, 3616.0], [65.7, 3629.0], [65.8, 3638.0], [65.9, 3648.0], [66.0, 3656.0], [66.1, 3666.0], [66.2, 3676.0], [66.3, 3684.0], [66.4, 3692.0], [66.5, 3698.0], [66.6, 3708.0], [66.7, 3716.0], [66.8, 3726.0], [66.9, 3734.0], [67.0, 3744.0], [67.1, 3753.0], [67.2, 3764.0], [67.3, 3777.0], [67.4, 3788.0], [67.5, 3796.0], [67.6, 3805.0], [67.7, 3814.0], [67.8, 3833.0], [67.9, 3849.0], [68.0, 3861.0], [68.1, 3873.0], [68.2, 3885.0], [68.3, 3900.0], [68.4, 3911.0], [68.5, 3918.0], [68.6, 3926.0], [68.7, 3934.0], [68.8, 3949.0], [68.9, 3960.0], [69.0, 3973.0], [69.1, 3988.0], [69.2, 4003.0], [69.3, 4019.0], [69.4, 4030.0], [69.5, 4039.0], [69.6, 4061.0], [69.7, 4073.0], [69.8, 4085.0], [69.9, 4101.0], [70.0, 4113.0], [70.1, 4124.0], [70.2, 4143.0], [70.3, 4161.0], [70.4, 4169.0], [70.5, 4183.0], [70.6, 4197.0], [70.7, 4218.0], [70.8, 4240.0], [70.9, 4257.0], [71.0, 4268.0], [71.1, 4282.0], [71.2, 4295.0], [71.3, 4309.0], [71.4, 4321.0], [71.5, 4342.0], [71.6, 4361.0], [71.7, 4388.0], [71.8, 4404.0], [71.9, 4422.0], [72.0, 4440.0], [72.1, 4456.0], [72.2, 4470.0], [72.3, 4494.0], [72.4, 4504.0], [72.5, 4516.0], [72.6, 4537.0], [72.7, 4550.0], [72.8, 4570.0], [72.9, 4591.0], [73.0, 4607.0], [73.1, 4635.0], [73.2, 4653.0], [73.3, 4684.0], [73.4, 4705.0], [73.5, 4718.0], [73.6, 4732.0], [73.7, 4744.0], [73.8, 4769.0], [73.9, 4787.0], [74.0, 4804.0], [74.1, 4827.0], [74.2, 4849.0], [74.3, 4864.0], [74.4, 4889.0], [74.5, 4906.0], [74.6, 4927.0], [74.7, 4947.0], [74.8, 4968.0], [74.9, 4998.0], [75.0, 5027.0], [75.1, 5051.0], [75.2, 5068.0], [75.3, 5087.0], [75.4, 5112.0], [75.5, 5135.0], [75.6, 5160.0], [75.7, 5181.0], [75.8, 5211.0], [75.9, 5232.0], [76.0, 5249.0], [76.1, 5267.0], [76.2, 5288.0], [76.3, 5309.0], [76.4, 5328.0], [76.5, 5351.0], [76.6, 5373.0], [76.7, 5396.0], [76.8, 5416.0], [76.9, 5438.0], [77.0, 5462.0], [77.1, 5478.0], [77.2, 5503.0], [77.3, 5526.0], [77.4, 5557.0], [77.5, 5586.0], [77.6, 5616.0], [77.7, 5635.0], [77.8, 5654.0], [77.9, 5685.0], [78.0, 5703.0], [78.1, 5722.0], [78.2, 5736.0], [78.3, 5755.0], [78.4, 5780.0], [78.5, 5801.0], [78.6, 5826.0], [78.7, 5848.0], [78.8, 5863.0], [78.9, 5876.0], [79.0, 5890.0], [79.1, 5905.0], [79.2, 5921.0], [79.3, 5943.0], [79.4, 5971.0], [79.5, 5985.0], [79.6, 6003.0], [79.7, 6020.0], [79.8, 6035.0], [79.9, 6061.0], [80.0, 6080.0], [80.1, 6099.0], [80.2, 6124.0], [80.3, 6141.0], [80.4, 6163.0], [80.5, 6181.0], [80.6, 6205.0], [80.7, 6215.0], [80.8, 6232.0], [80.9, 6243.0], [81.0, 6257.0], [81.1, 6272.0], [81.2, 6288.0], [81.3, 6304.0], [81.4, 6317.0], [81.5, 6338.0], [81.6, 6349.0], [81.7, 6363.0], [81.8, 6375.0], [81.9, 6386.0], [82.0, 6401.0], [82.1, 6419.0], [82.2, 6431.0], [82.3, 6444.0], [82.4, 6457.0], [82.5, 6475.0], [82.6, 6488.0], [82.7, 6501.0], [82.8, 6511.0], [82.9, 6529.0], [83.0, 6543.0], [83.1, 6551.0], [83.2, 6564.0], [83.3, 6572.0], [83.4, 6579.0], [83.5, 6588.0], [83.6, 6595.0], [83.7, 6604.0], [83.8, 6615.0], [83.9, 6628.0], [84.0, 6637.0], [84.1, 6649.0], [84.2, 6662.0], [84.3, 6674.0], [84.4, 6683.0], [84.5, 6694.0], [84.6, 6706.0], [84.7, 6715.0], [84.8, 6723.0], [84.9, 6734.0], [85.0, 6743.0], [85.1, 6753.0], [85.2, 6763.0], [85.3, 6775.0], [85.4, 6783.0], [85.5, 6793.0], [85.6, 6804.0], [85.7, 6812.0], [85.8, 6827.0], [85.9, 6836.0], [86.0, 6847.0], [86.1, 6854.0], [86.2, 6861.0], [86.3, 6869.0], [86.4, 6880.0], [86.5, 6887.0], [86.6, 6894.0], [86.7, 6900.0], [86.8, 6910.0], [86.9, 6919.0], [87.0, 6926.0], [87.1, 6936.0], [87.2, 6944.0], [87.3, 6952.0], [87.4, 6960.0], [87.5, 6967.0], [87.6, 6975.0], [87.7, 6979.0], [87.8, 6987.0], [87.9, 6997.0], [88.0, 7003.0], [88.1, 7013.0], [88.2, 7024.0], [88.3, 7031.0], [88.4, 7037.0], [88.5, 7044.0], [88.6, 7052.0], [88.7, 7061.0], [88.8, 7069.0], [88.9, 7075.0], [89.0, 7084.0], [89.1, 7093.0], [89.2, 7099.0], [89.3, 7111.0], [89.4, 7118.0], [89.5, 7128.0], [89.6, 7135.0], [89.7, 7142.0], [89.8, 7151.0], [89.9, 7155.0], [90.0, 7163.0], [90.1, 7172.0], [90.2, 7179.0], [90.3, 7187.0], [90.4, 7193.0], [90.5, 7202.0], [90.6, 7210.0], [90.7, 7218.0], [90.8, 7224.0], [90.9, 7229.0], [91.0, 7237.0], [91.1, 7243.0], [91.2, 7248.0], [91.3, 7253.0], [91.4, 7260.0], [91.5, 7267.0], [91.6, 7275.0], [91.7, 7283.0], [91.8, 7291.0], [91.9, 7299.0], [92.0, 7307.0], [92.1, 7317.0], [92.2, 7324.0], [92.3, 7331.0], [92.4, 7337.0], [92.5, 7344.0], [92.6, 7352.0], [92.7, 7365.0], [92.8, 7376.0], [92.9, 7388.0], [93.0, 7394.0], [93.1, 7400.0], [93.2, 7408.0], [93.3, 7417.0], [93.4, 7427.0], [93.5, 7436.0], [93.6, 7443.0], [93.7, 7450.0], [93.8, 7456.0], [93.9, 7464.0], [94.0, 7472.0], [94.1, 7484.0], [94.2, 7493.0], [94.3, 7502.0], [94.4, 7506.0], [94.5, 7517.0], [94.6, 7532.0], [94.7, 7541.0], [94.8, 7559.0], [94.9, 7568.0], [95.0, 7581.0], [95.1, 7588.0], [95.2, 7606.0], [95.3, 7619.0], [95.4, 7628.0], [95.5, 7635.0], [95.6, 7645.0], [95.7, 7656.0], [95.8, 7665.0], [95.9, 7680.0], [96.0, 7692.0], [96.1, 7703.0], [96.2, 7718.0], [96.3, 7729.0], [96.4, 7745.0], [96.5, 7756.0], [96.6, 7770.0], [96.7, 7782.0], [96.8, 7793.0], [96.9, 7804.0], [97.0, 7825.0], [97.1, 7841.0], [97.2, 7860.0], [97.3, 7872.0], [97.4, 7885.0], [97.5, 7906.0], [97.6, 7930.0], [97.7, 7955.0], [97.8, 7976.0], [97.9, 7989.0], [98.0, 8019.0], [98.1, 8040.0], [98.2, 8057.0], [98.3, 8080.0], [98.4, 8123.0], [98.5, 8162.0], [98.6, 8184.0], [98.7, 8240.0], [98.8, 8314.0], [98.9, 8398.0], [99.0, 8494.0], [99.1, 8698.0], [99.2, 9012.0], [99.3, 11476.0], [99.4, 12487.0], [99.5, 14062.0], [99.6, 16600.0], [99.7, 18817.0], [99.8, 20052.0], [99.9, 22476.0]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 752.0, "series": [{"data": [[0.0, 42.0], [100.0, 442.0], [200.0, 752.0], [300.0, 557.0], [400.0, 640.0], [500.0, 502.0], [600.0, 474.0], [700.0, 384.0], [800.0, 330.0], [900.0, 316.0], [1000.0, 309.0], [1100.0, 386.0], [1200.0, 381.0], [1300.0, 341.0], [1400.0, 276.0], [1500.0, 290.0], [1600.0, 281.0], [1700.0, 269.0], [1800.0, 231.0], [1900.0, 230.0], [2000.0, 214.0], [2100.0, 206.0], [2200.0, 196.0], [2300.0, 220.0], [2400.0, 212.0], [2500.0, 199.0], [2600.0, 182.0], [2700.0, 162.0], [2800.0, 152.0], [2900.0, 136.0], [3000.0, 122.0], [3100.0, 120.0], [3300.0, 155.0], [3200.0, 147.0], [3400.0, 148.0], [3500.0, 174.0], [3600.0, 168.0], [3700.0, 163.0], [3800.0, 115.0], [3900.0, 138.0], [4000.0, 110.0], [4200.0, 97.0], [4300.0, 84.0], [4100.0, 110.0], [4500.0, 92.0], [4400.0, 94.0], [4600.0, 62.0], [4800.0, 76.0], [4700.0, 95.0], [4900.0, 69.0], [5000.0, 72.0], [5100.0, 63.0], [5300.0, 72.0], [5200.0, 73.0], [5400.0, 76.0], [5500.0, 57.0], [5600.0, 65.0], [5800.0, 86.0], [5700.0, 81.0], [6000.0, 79.0], [6100.0, 76.0], [5900.0, 85.0], [6200.0, 105.0], [6300.0, 111.0], [6500.0, 151.0], [6400.0, 109.0], [6600.0, 138.0], [6700.0, 159.0], [6800.0, 177.0], [6900.0, 191.0], [7100.0, 196.0], [7000.0, 199.0], [7200.0, 225.0], [7300.0, 184.0], [7400.0, 181.0], [7500.0, 140.0], [7600.0, 137.0], [7700.0, 129.0], [7800.0, 92.0], [7900.0, 71.0], [8000.0, 68.0], [8100.0, 44.0], [8200.0, 25.0], [8400.0, 16.0], [8300.0, 17.0], [8500.0, 9.0], [8700.0, 9.0], [8600.0, 7.0], [9100.0, 1.0], [8900.0, 2.0], [9000.0, 4.0], [8800.0, 1.0], [9900.0, 1.0], [10100.0, 2.0], [10700.0, 2.0], [10800.0, 3.0], [11100.0, 1.0], [11200.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [11300.0, 2.0], [11500.0, 2.0], [11900.0, 2.0], [12100.0, 3.0], [11800.0, 2.0], [12200.0, 1.0], [12400.0, 2.0], [12600.0, 1.0], [12300.0, 2.0], [12500.0, 1.0], [13300.0, 3.0], [13100.0, 1.0], [12900.0, 2.0], [13800.0, 3.0], [13500.0, 1.0], [14100.0, 1.0], [13900.0, 1.0], [14000.0, 3.0], [14300.0, 1.0], [14500.0, 2.0], [14800.0, 1.0], [15200.0, 1.0], [15700.0, 1.0], [16200.0, 1.0], [16300.0, 1.0], [16000.0, 1.0], [17100.0, 1.0], [16500.0, 3.0], [17000.0, 1.0], [16400.0, 1.0], [16600.0, 1.0], [18100.0, 1.0], [17800.0, 2.0], [17600.0, 2.0], [17700.0, 2.0], [18000.0, 1.0], [18400.0, 2.0], [17500.0, 2.0], [18800.0, 3.0], [19300.0, 1.0], [18600.0, 1.0], [18900.0, 1.0], [19200.0, 1.0], [19100.0, 1.0], [19500.0, 2.0], [19900.0, 2.0], [19800.0, 1.0], [19600.0, 2.0], [20300.0, 2.0], [20400.0, 1.0], [20000.0, 2.0], [21100.0, 2.0], [21300.0, 1.0], [21200.0, 1.0], [20900.0, 1.0], [21000.0, 1.0], [22200.0, 1.0], [22100.0, 2.0], [22400.0, 1.0], [22000.0, 2.0], [21800.0, 1.0], [23000.0, 2.0], [23200.0, 2.0], [22700.0, 2.0], [22800.0, 1.0], [22900.0, 2.0], [22600.0, 1.0], [23300.0, 1.0], [23600.0, 1.0], [23800.0, 1.0], [23700.0, 1.0], [25100.0, 1.0]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 866.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9030.0, "series": [{"data": [[0.0, 2396.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3263.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9030.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 866.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.888372093023255, "minX": 1.71810804E12, "maxY": 60.0, "series": [{"data": [[1.71810924E12, 48.4575163398693], [1.71810894E12, 60.0], [1.71810888E12, 60.0], [1.71810828E12, 26.820707070707055], [1.71810858E12, 56.81280788177341], [1.71810816E12, 14.85250737463127], [1.71810918E12, 60.0], [1.71810822E12, 20.790909090909075], [1.71810912E12, 60.0], [1.71810852E12, 50.79783393501812], [1.71810882E12, 60.0], [1.7181081E12, 9.011194029850744], [1.71810876E12, 60.0], [1.7181084E12, 38.77125000000002], [1.71810846E12, 44.74790919952213], [1.71810906E12, 60.0], [1.71810834E12, 32.836809815950936], [1.718109E12, 60.0], [1.7181087E12, 60.0], [1.71810864E12, 60.0], [1.71810804E12, 3.888372093023255]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71810924E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 394.0615384615385, "minX": 1.0, "maxY": 4005.452554744525, "series": [{"data": [[2.0, 484.48148148148147], [3.0, 417.1219512195122], [4.0, 426.1481481481482], [5.0, 394.0615384615385], [6.0, 531.6268656716418], [7.0, 489.22784810126586], [8.0, 571.829545454545], [9.0, 589.5416666666664], [10.0, 629.9900990099009], [11.0, 694.9903846153845], [12.0, 812.638095238095], [13.0, 790.1775700934579], [14.0, 930.1327433628319], [15.0, 912.9401709401707], [16.0, 1048.5575221238932], [17.0, 974.8770491803276], [18.0, 1058.912698412698], [19.0, 1103.9393939393935], [20.0, 1210.7851239669421], [21.0, 1184.575539568345], [22.0, 1369.7539682539684], [23.0, 1436.3464566929133], [24.0, 1525.5680000000002], [25.0, 1375.525179856116], [26.0, 1587.0526315789468], [27.0, 1739.3984962406007], [28.0, 1733.6899224806205], [29.0, 1718.7266187050361], [30.0, 1790.1376811594198], [31.0, 1952.2812500000005], [32.0, 1974.4714285714288], [33.0, 2022.0601503759403], [34.0, 2144.639097744361], [35.0, 2070.264285714286], [36.0, 2205.5602836879434], [37.0, 2333.135338345865], [38.0, 2234.028169014084], [39.0, 2431.72794117647], [40.0, 2642.894736842106], [41.0, 2770.529411764707], [42.0, 2491.7945205479446], [43.0, 2801.8294573643407], [44.0, 2483.046666666666], [45.0, 2996.947761194029], [46.0, 2887.0656934306553], [47.0, 2947.7152777777787], [48.0, 2920.830985915494], [49.0, 3221.85401459854], [50.0, 3324.9848484848494], [51.0, 3178.3777777777773], [52.0, 3427.943661971831], [53.0, 3373.020833333334], [54.0, 3239.802919708029], [55.0, 3832.4705882352955], [56.0, 3747.0676691729323], [57.0, 3725.14705882353], [58.0, 4005.452554744525], [59.0, 3700.3884892086335], [60.0, 3918.230505265647], [1.0, 559.1538461538462]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}, {"data": [[47.762070073931554, 3087.84783027964]], "isOverall": false, "label": "TitleBasics by primary_title-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 435.9, "minX": 1.71810804E12, "maxY": 668506.3166666667, "series": [{"data": [[1.71810924E12, 72778.68333333333], [1.71810894E12, 490142.13333333336], [1.71810888E12, 508666.35], [1.71810828E12, 64368.45], [1.71810858E12, 66129.9], [1.71810816E12, 54433.333333333336], [1.71810918E12, 477569.6666666667], [1.71810822E12, 62583.933333333334], [1.71810912E12, 345776.75], [1.71810852E12, 67445.9], [1.71810882E12, 558619.3], [1.7181081E12, 44288.0], [1.71810876E12, 668506.3166666667], [1.7181084E12, 64944.75], [1.71810846E12, 68466.15], [1.71810906E12, 209755.88333333333], [1.71810834E12, 66655.8], [1.718109E12, 630203.0666666667], [1.7181087E12, 451405.4666666667], [1.71810864E12, 463137.7166666667], [1.71810804E12, 18353.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71810924E12, 435.9], [1.71810894E12, 2364.7], [1.71810888E12, 2095.366666666667], [1.71810828E12, 2220.7833333333333], [1.71810858E12, 2280.35], [1.71810816E12, 1904.2166666666667], [1.71810918E12, 2426.9333333333334], [1.71810822E12, 2157.4333333333334], [1.71810912E12, 2424.6], [1.71810852E12, 2327.2166666666667], [1.71810882E12, 1998.3333333333333], [1.7181081E12, 1506.95], [1.71810876E12, 2419.75], [1.7181084E12, 2239.983333333333], [1.71810846E12, 2344.983333333333], [1.71810906E12, 2382.6833333333334], [1.71810834E12, 2281.55], [1.718109E12, 2362.0833333333335], [1.7181087E12, 2378.8], [1.71810864E12, 2363.7], [1.71810804E12, 605.3166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71810924E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 355.4697674418605, "minX": 1.71810804E12, "maxY": 5158.9443708609315, "series": [{"data": [[1.71810924E12, 3921.0718954248373], [1.71810894E12, 3883.0507674144064], [1.71810888E12, 5158.9443708609315], [1.71810828E12, 1585.7967171717182], [1.71810858E12, 3737.752463054191], [1.71810816E12, 881.616519174041], [1.71810918E12, 3745.301149425286], [1.71810822E12, 1206.6545454545458], [1.71810912E12, 3741.7223502304155], [1.71810852E12, 3235.9855595667923], [1.71810882E12, 3749.270308123249], [1.7181081E12, 575.065298507463], [1.71810876E12, 3770.7868663594454], [1.7181084E12, 2457.6075000000023], [1.71810846E12, 2773.9510155316616], [1.71810906E12, 3857.505263157892], [1.71810834E12, 1998.4294478527615], [1.718109E12, 3781.9456264775436], [1.7181087E12, 3832.5566037735844], [1.71810864E12, 3828.897041420118], [1.71810804E12, 355.4697674418605]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71810924E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 354.43255813953493, "minX": 1.71810804E12, "maxY": 4970.30198675496, "series": [{"data": [[1.71810924E12, 3898.81045751634], [1.71810894E12, 3785.7709563164126], [1.71810888E12, 4970.30198675496], [1.71810828E12, 1584.6717171717155], [1.71810858E12, 3736.501231527092], [1.71810816E12, 880.4247787610623], [1.71810918E12, 3709.4965517241344], [1.71810822E12, 1205.4090909090896], [1.71810912E12, 3718.0760368663614], [1.71810852E12, 3234.914560770156], [1.71810882E12, 3691.9411764705883], [1.7181081E12, 573.8749999999998], [1.71810876E12, 3706.2223502304178], [1.7181084E12, 2456.4500000000044], [1.71810846E12, 2772.6929510155323], [1.71810906E12, 3841.6888888888943], [1.71810834E12, 1997.2944785276081], [1.718109E12, 3712.197399527192], [1.7181087E12, 3795.1084905660387], [1.71810864E12, 3788.521893491122], [1.71810804E12, 354.43255813953493]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71810924E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.2651162790697679, "minX": 1.71810804E12, "maxY": 21.296340023612753, "series": [{"data": [[1.71810924E12, 5.045751633986926], [1.71810894E12, 21.296340023612753], [1.71810888E12, 5.413245033112585], [1.71810828E12, 2.4633838383838405], [1.71810858E12, 4.2401477832512295], [1.71810816E12, 2.4395280235988195], [1.71810918E12, 4.480459770114938], [1.71810822E12, 3.116883116883116], [1.71810912E12, 3.884792626728109], [1.71810852E12, 4.48856799037305], [1.71810882E12, 3.719887955182072], [1.7181081E12, 3.7369402985074633], [1.71810876E12, 4.71082949308756], [1.7181084E12, 2.9149999999999974], [1.71810846E12, 3.1182795698924735], [1.71810906E12, 6.59415204678363], [1.71810834E12, 3.9766871165644186], [1.718109E12, 5.055555555555549], [1.7181087E12, 4.455188679245283], [1.71810864E12, 2.874556213017757], [1.71810804E12, 1.2651162790697679]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71810924E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 99.0, "minX": 1.71810804E12, "maxY": 25123.0, "series": [{"data": [[1.71810924E12, 8692.0], [1.71810894E12, 11829.0], [1.71810888E12, 25123.0], [1.71810828E12, 4081.0], [1.71810858E12, 9106.0], [1.71810816E12, 3157.0], [1.71810918E12, 8857.0], [1.71810822E12, 3585.0], [1.71810912E12, 9012.0], [1.71810852E12, 7117.0], [1.71810882E12, 9051.0], [1.7181081E12, 2052.0], [1.71810876E12, 8943.0], [1.7181084E12, 5468.0], [1.71810846E12, 6344.0], [1.71810906E12, 8421.0], [1.71810834E12, 4965.0], [1.718109E12, 9011.0], [1.7181087E12, 8545.0], [1.71810864E12, 8740.0], [1.71810804E12, 674.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71810924E12, 172.0], [1.71810894E12, 143.0], [1.71810888E12, 110.0], [1.71810828E12, 153.0], [1.71810858E12, 143.0], [1.71810816E12, 113.0], [1.71810918E12, 137.0], [1.71810822E12, 108.0], [1.71810912E12, 116.0], [1.71810852E12, 147.0], [1.71810882E12, 147.0], [1.7181081E12, 104.0], [1.71810876E12, 154.0], [1.7181084E12, 141.0], [1.71810846E12, 167.0], [1.71810906E12, 139.0], [1.71810834E12, 130.0], [1.718109E12, 160.0], [1.7181087E12, 174.0], [1.71810864E12, 142.0], [1.71810804E12, 99.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71810924E12, 7436.6], [1.71810894E12, 7399.200000000001], [1.71810888E12, 14103.4], [1.71810828E12, 3152.9], [1.71810858E12, 6930.0], [1.71810816E12, 1769.0], [1.71810918E12, 7505.100000000001], [1.71810822E12, 2461.3], [1.71810912E12, 7454.0], [1.71810852E12, 6117.0], [1.71810882E12, 7666.900000000001], [1.7181081E12, 1225.3], [1.71810876E12, 7720.4], [1.7181084E12, 4697.8], [1.71810846E12, 5376.6], [1.71810906E12, 7331.5], [1.71810834E12, 3821.4], [1.718109E12, 7599.0], [1.7181087E12, 7570.800000000001], [1.71810864E12, 7488.200000000001], [1.71810804E12, 490.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71810924E12, 8475.280000000006], [1.71810894E12, 8146.26], [1.71810888E12, 23284.07], [1.71810828E12, 3591.890000000001], [1.71810858E12, 7736.24], [1.71810816E12, 2576.9400000000005], [1.71810918E12, 8419.81], [1.71810822E12, 3054.959999999999], [1.71810912E12, 8032.2], [1.71810852E12, 6788.800000000001], [1.71810882E12, 8584.570000000003], [1.7181081E12, 1810.79], [1.71810876E12, 8416.93], [1.7181084E12, 5230.24], [1.71810846E12, 6061.78], [1.71810906E12, 7986.5], [1.71810834E12, 4301.0], [1.718109E12, 8430.85], [1.7181087E12, 8185.68], [1.71810864E12, 8179.920000000001], [1.71810804E12, 662.48]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71810924E12, 4071.0], [1.71810894E12, 3760.0], [1.71810888E12, 3212.0], [1.71810828E12, 1288.5], [1.71810858E12, 3411.0], [1.71810816E12, 711.0], [1.71810918E12, 3612.5], [1.71810822E12, 984.0], [1.71810912E12, 3578.0], [1.71810852E12, 2919.0], [1.71810882E12, 3822.5], [1.7181081E12, 484.0], [1.71810876E12, 3581.0], [1.7181084E12, 2122.0], [1.71810846E12, 2412.0], [1.71810906E12, 3645.5], [1.71810834E12, 1812.0], [1.718109E12, 3785.0], [1.7181087E12, 3682.0], [1.71810864E12, 3824.0], [1.71810804E12, 403.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71810924E12, 7662.500000000001], [1.71810894E12, 7678.2], [1.71810888E12, 19692.949999999997], [1.71810828E12, 3333.35], [1.71810858E12, 7178.4], [1.71810816E12, 1918.0], [1.71810918E12, 7868.6], [1.71810822E12, 2668.55], [1.71810912E12, 7692.5], [1.71810852E12, 6355.0], [1.71810882E12, 8026.0], [1.7181081E12, 1457.6], [1.71810876E12, 8021.799999999999], [1.7181084E12, 4846.299999999999], [1.71810846E12, 5643.75], [1.71810906E12, 7682.75], [1.71810834E12, 4063.2], [1.718109E12, 7894.0], [1.7181087E12, 7779.2], [1.71810864E12, 7750.3], [1.71810804E12, 520.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71810924E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 411.0, "minX": 1.0, "maxY": 6815.0, "series": [{"data": [[2.0, 424.0], [3.0, 411.0], [4.0, 433.0], [5.0, 661.0], [6.0, 492.0], [7.0, 851.0], [8.0, 1204.0], [9.0, 1518.0], [10.0, 1614.5], [11.0, 1711.5], [12.0, 2105.0], [13.0, 2126.0], [14.0, 2449.0], [15.0, 2882.0], [1.0, 411.0], [16.0, 2742.0], [17.0, 2692.0], [18.0, 2846.0], [19.0, 3022.5], [20.0, 3275.0], [21.0, 2948.0], [22.0, 3868.0], [23.0, 2762.0], [24.0, 3750.0], [25.0, 6815.0], [26.0, 3471.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 1360.0], [2.0, 1752.0], [9.0, 1373.0], [10.0, 1288.5], [11.0, 1327.0], [12.0, 1336.5], [13.0, 1546.0], [14.0, 1472.0], [15.0, 1573.0], [16.0, 1366.0], [4.0, 1269.0], [17.0, 1318.0], [18.0, 1384.0], [19.0, 1490.5], [20.0, 1367.0], [21.0, 1605.5], [22.0, 1877.0], [23.0, 1977.0], [24.0, 1351.0], [6.0, 1194.0], [25.0, 759.0], [26.0, 1690.0], [7.0, 1252.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 410.5, "minX": 1.0, "maxY": 6815.0, "series": [{"data": [[2.0, 424.0], [3.0, 410.5], [4.0, 431.0], [5.0, 659.5], [6.0, 492.0], [7.0, 848.0], [8.0, 1203.0], [9.0, 1516.0], [10.0, 1614.0], [11.0, 1710.0], [12.0, 2103.5], [13.0, 2124.0], [14.0, 2444.0], [15.0, 2879.0], [1.0, 411.0], [16.0, 2734.0], [17.0, 2691.0], [18.0, 2846.0], [19.0, 3021.5], [20.0, 3275.0], [21.0, 2945.5], [22.0, 3867.0], [23.0, 2761.0], [24.0, 3749.0], [25.0, 6815.0], [26.0, 3468.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 949.0], [2.0, 1013.0], [9.0, 947.0], [10.0, 946.5], [11.0, 937.0], [12.0, 958.5], [13.0, 959.0], [14.0, 1004.0], [15.0, 1049.0], [16.0, 949.0], [4.0, 1015.0], [17.0, 938.5], [18.0, 1001.0], [19.0, 963.5], [20.0, 981.0], [21.0, 1123.5], [22.0, 931.0], [23.0, 1057.0], [24.0, 1041.5], [6.0, 909.5], [25.0, 440.0], [26.0, 885.0], [7.0, 916.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.71810804E12, "maxY": 14.45, "series": [{"data": [[1.71810924E12, 1.6666666666666667], [1.71810894E12, 14.066666666666666], [1.71810888E12, 12.533333333333333], [1.71810828E12, 13.3], [1.71810858E12, 13.583333333333334], [1.71810816E12, 11.45], [1.71810918E12, 14.433333333333334], [1.71810822E12, 12.85], [1.71810912E12, 14.45], [1.71810852E12, 14.016666666666667], [1.71810882E12, 11.966666666666667], [1.7181081E12, 8.95], [1.71810876E12, 14.45], [1.7181084E12, 13.5], [1.71810846E12, 13.983333333333333], [1.71810906E12, 14.283333333333333], [1.71810834E12, 13.683333333333334], [1.718109E12, 14.133333333333333], [1.7181087E12, 14.166666666666666], [1.71810864E12, 14.1], [1.71810804E12, 3.683333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71810924E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71810804E12, "maxY": 13.933333333333334, "series": [{"data": [[1.71810924E12, 2.35], [1.71810894E12, 12.683333333333334], [1.71810888E12, 11.0], [1.71810828E12, 13.166666666666666], [1.71810858E12, 13.516666666666667], [1.71810816E12, 11.3], [1.71810918E12, 13.1], [1.71810822E12, 12.8], [1.71810912E12, 13.483333333333333], [1.71810852E12, 13.816666666666666], [1.71810882E12, 10.266666666666667], [1.7181081E12, 8.933333333333334], [1.71810876E12, 12.466666666666667], [1.7181084E12, 13.283333333333333], [1.71810846E12, 13.933333333333334], [1.71810906E12, 13.733333333333333], [1.71810834E12, 13.55], [1.718109E12, 12.233333333333333], [1.7181087E12, 12.85], [1.71810864E12, 12.766666666666667], [1.71810804E12, 3.5833333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71810876E12, 1.95], [1.71810924E12, 0.2], [1.71810894E12, 1.3833333333333333], [1.71810888E12, 1.4666666666666666], [1.71810906E12, 0.4666666666666667], [1.718109E12, 1.8333333333333333], [1.7181087E12, 1.25], [1.71810918E12, 1.3333333333333333], [1.71810864E12, 1.2833333333333334], [1.71810912E12, 0.9], [1.71810882E12, 1.6333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71810894E12, 0.05], [1.71810888E12, 0.06666666666666667], [1.71810828E12, 0.03333333333333333], [1.71810858E12, 0.016666666666666666], [1.71810918E12, 0.06666666666666667], [1.71810822E12, 0.03333333333333333], [1.71810912E12, 0.08333333333333333], [1.71810852E12, 0.03333333333333333], [1.71810876E12, 0.05], [1.7181084E12, 0.05], [1.71810846E12, 0.016666666666666666], [1.71810906E12, 0.05], [1.71810834E12, 0.03333333333333333], [1.718109E12, 0.03333333333333333], [1.7181087E12, 0.03333333333333333], [1.71810864E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.URISyntaxException", "isController": false}, {"data": [[1.71810888E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71810924E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71810804E12, "maxY": 13.933333333333334, "series": [{"data": [[1.71810924E12, 2.35], [1.71810894E12, 12.683333333333334], [1.71810888E12, 11.0], [1.71810828E12, 13.166666666666666], [1.71810858E12, 13.516666666666667], [1.71810816E12, 11.3], [1.71810918E12, 13.1], [1.71810822E12, 12.8], [1.71810912E12, 13.483333333333333], [1.71810852E12, 13.816666666666666], [1.71810882E12, 10.266666666666667], [1.7181081E12, 8.933333333333334], [1.71810876E12, 12.466666666666667], [1.7181084E12, 13.283333333333333], [1.71810846E12, 13.933333333333334], [1.71810906E12, 13.733333333333333], [1.71810834E12, 13.55], [1.718109E12, 12.233333333333333], [1.7181087E12, 12.85], [1.71810864E12, 12.766666666666667], [1.71810804E12, 3.5833333333333335]], "isOverall": false, "label": "TitleBasics by primary_title-success", "isController": false}, {"data": [[1.71810924E12, 0.2], [1.71810894E12, 1.4333333333333333], [1.71810888E12, 1.5833333333333333], [1.71810828E12, 0.03333333333333333], [1.71810858E12, 0.016666666666666666], [1.71810918E12, 1.4], [1.71810822E12, 0.03333333333333333], [1.71810912E12, 0.9833333333333333], [1.71810852E12, 0.03333333333333333], [1.71810882E12, 1.6333333333333333], [1.71810876E12, 2.0], [1.7181084E12, 0.05], [1.71810846E12, 0.016666666666666666], [1.71810906E12, 0.5166666666666667], [1.71810834E12, 0.03333333333333333], [1.718109E12, 1.8666666666666667], [1.7181087E12, 1.2833333333333334], [1.71810864E12, 1.3166666666666667]], "isOverall": false, "label": "TitleBasics by primary_title-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71810924E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71810804E12, "maxY": 13.933333333333334, "series": [{"data": [[1.71810924E12, 2.35], [1.71810894E12, 12.683333333333334], [1.71810888E12, 11.0], [1.71810828E12, 13.166666666666666], [1.71810858E12, 13.516666666666667], [1.71810816E12, 11.3], [1.71810918E12, 13.1], [1.71810822E12, 12.8], [1.71810912E12, 13.483333333333333], [1.71810852E12, 13.816666666666666], [1.71810882E12, 10.266666666666667], [1.7181081E12, 8.933333333333334], [1.71810876E12, 12.466666666666667], [1.7181084E12, 13.283333333333333], [1.71810846E12, 13.933333333333334], [1.71810906E12, 13.733333333333333], [1.71810834E12, 13.55], [1.718109E12, 12.233333333333333], [1.7181087E12, 12.85], [1.71810864E12, 12.766666666666667], [1.71810804E12, 3.5833333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71810924E12, 0.2], [1.71810894E12, 1.4333333333333333], [1.71810888E12, 1.5833333333333333], [1.71810828E12, 0.03333333333333333], [1.71810858E12, 0.016666666666666666], [1.71810918E12, 1.4], [1.71810822E12, 0.03333333333333333], [1.71810912E12, 0.9833333333333333], [1.71810852E12, 0.03333333333333333], [1.71810882E12, 1.6333333333333333], [1.71810876E12, 2.0], [1.7181084E12, 0.05], [1.71810846E12, 0.016666666666666666], [1.71810906E12, 0.5166666666666667], [1.71810834E12, 0.03333333333333333], [1.718109E12, 1.8666666666666667], [1.7181087E12, 1.2833333333333334], [1.71810864E12, 1.3166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71810924E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

