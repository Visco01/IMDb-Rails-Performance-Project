/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 107.0, "minX": 0.0, "maxY": 32387.0, "series": [{"data": [[0.0, 107.0], [0.1, 114.0], [0.2, 116.0], [0.3, 123.0], [0.4, 129.0], [0.5, 142.0], [0.6, 144.0], [0.7, 157.0], [0.8, 177.0], [0.9, 198.0], [1.0, 201.0], [1.1, 211.0], [1.2, 218.0], [1.3, 221.0], [1.4, 227.0], [1.5, 231.0], [1.6, 249.0], [1.7, 265.0], [1.8, 274.0], [1.9, 277.0], [2.0, 282.0], [2.1, 291.0], [2.2, 304.0], [2.3, 305.0], [2.4, 312.0], [2.5, 314.0], [2.6, 317.0], [2.7, 326.0], [2.8, 329.0], [2.9, 342.0], [3.0, 349.0], [3.1, 365.0], [3.2, 379.0], [3.3, 382.0], [3.4, 389.0], [3.5, 395.0], [3.6, 403.0], [3.7, 405.0], [3.8, 412.0], [3.9, 417.0], [4.0, 420.0], [4.1, 423.0], [4.2, 430.0], [4.3, 441.0], [4.4, 444.0], [4.5, 446.0], [4.6, 447.0], [4.7, 452.0], [4.8, 455.0], [4.9, 458.0], [5.0, 464.0], [5.1, 475.0], [5.2, 476.0], [5.3, 481.0], [5.4, 485.0], [5.5, 485.0], [5.6, 489.0], [5.7, 496.0], [5.8, 499.0], [5.9, 503.0], [6.0, 506.0], [6.1, 510.0], [6.2, 512.0], [6.3, 514.0], [6.4, 516.0], [6.5, 518.0], [6.6, 521.0], [6.7, 525.0], [6.8, 528.0], [6.9, 532.0], [7.0, 538.0], [7.1, 545.0], [7.2, 549.0], [7.3, 567.0], [7.4, 573.0], [7.5, 577.0], [7.6, 579.0], [7.7, 580.0], [7.8, 586.0], [7.9, 590.0], [8.0, 591.0], [8.1, 593.0], [8.2, 593.0], [8.3, 597.0], [8.4, 599.0], [8.5, 600.0], [8.6, 602.0], [8.7, 603.0], [8.8, 605.0], [8.9, 605.0], [9.0, 608.0], [9.1, 610.0], [9.2, 612.0], [9.3, 614.0], [9.4, 616.0], [9.5, 618.0], [9.6, 620.0], [9.7, 625.0], [9.8, 628.0], [9.9, 631.0], [10.0, 635.0], [10.1, 644.0], [10.2, 650.0], [10.3, 653.0], [10.4, 655.0], [10.5, 659.0], [10.6, 660.0], [10.7, 676.0], [10.8, 685.0], [10.9, 687.0], [11.0, 691.0], [11.1, 695.0], [11.2, 699.0], [11.3, 705.0], [11.4, 706.0], [11.5, 711.0], [11.6, 711.0], [11.7, 717.0], [11.8, 719.0], [11.9, 720.0], [12.0, 721.0], [12.1, 722.0], [12.2, 725.0], [12.3, 731.0], [12.4, 732.0], [12.5, 734.0], [12.6, 737.0], [12.7, 740.0], [12.8, 740.0], [12.9, 749.0], [13.0, 762.0], [13.1, 771.0], [13.2, 772.0], [13.3, 776.0], [13.4, 783.0], [13.5, 788.0], [13.6, 789.0], [13.7, 790.0], [13.8, 794.0], [13.9, 800.0], [14.0, 804.0], [14.1, 807.0], [14.2, 818.0], [14.3, 819.0], [14.4, 825.0], [14.5, 828.0], [14.6, 831.0], [14.7, 848.0], [14.8, 852.0], [14.9, 857.0], [15.0, 862.0], [15.1, 866.0], [15.2, 877.0], [15.3, 885.0], [15.4, 888.0], [15.5, 890.0], [15.6, 891.0], [15.7, 894.0], [15.8, 906.0], [15.9, 909.0], [16.0, 913.0], [16.1, 915.0], [16.2, 921.0], [16.3, 924.0], [16.4, 927.0], [16.5, 932.0], [16.6, 941.0], [16.7, 951.0], [16.8, 956.0], [16.9, 970.0], [17.0, 975.0], [17.1, 983.0], [17.2, 989.0], [17.3, 992.0], [17.4, 999.0], [17.5, 1008.0], [17.6, 1013.0], [17.7, 1015.0], [17.8, 1018.0], [17.9, 1022.0], [18.0, 1024.0], [18.1, 1027.0], [18.2, 1036.0], [18.3, 1039.0], [18.4, 1043.0], [18.5, 1049.0], [18.6, 1053.0], [18.7, 1061.0], [18.8, 1068.0], [18.9, 1070.0], [19.0, 1081.0], [19.1, 1088.0], [19.2, 1094.0], [19.3, 1095.0], [19.4, 1098.0], [19.5, 1109.0], [19.6, 1112.0], [19.7, 1117.0], [19.8, 1127.0], [19.9, 1129.0], [20.0, 1138.0], [20.1, 1142.0], [20.2, 1151.0], [20.3, 1157.0], [20.4, 1168.0], [20.5, 1174.0], [20.6, 1186.0], [20.7, 1190.0], [20.8, 1191.0], [20.9, 1194.0], [21.0, 1198.0], [21.1, 1217.0], [21.2, 1218.0], [21.3, 1220.0], [21.4, 1239.0], [21.5, 1240.0], [21.6, 1247.0], [21.7, 1263.0], [21.8, 1267.0], [21.9, 1274.0], [22.0, 1284.0], [22.1, 1293.0], [22.2, 1301.0], [22.3, 1306.0], [22.4, 1315.0], [22.5, 1326.0], [22.6, 1333.0], [22.7, 1341.0], [22.8, 1345.0], [22.9, 1345.0], [23.0, 1352.0], [23.1, 1366.0], [23.2, 1388.0], [23.3, 1392.0], [23.4, 1396.0], [23.5, 1402.0], [23.6, 1407.0], [23.7, 1409.0], [23.8, 1415.0], [23.9, 1426.0], [24.0, 1442.0], [24.1, 1445.0], [24.2, 1458.0], [24.3, 1461.0], [24.4, 1481.0], [24.5, 1491.0], [24.6, 1495.0], [24.7, 1501.0], [24.8, 1510.0], [24.9, 1517.0], [25.0, 1519.0], [25.1, 1545.0], [25.2, 1563.0], [25.3, 1577.0], [25.4, 1591.0], [25.5, 1593.0], [25.6, 1599.0], [25.7, 1606.0], [25.8, 1609.0], [25.9, 1636.0], [26.0, 1651.0], [26.1, 1667.0], [26.2, 1677.0], [26.3, 1682.0], [26.4, 1692.0], [26.5, 1693.0], [26.6, 1706.0], [26.7, 1723.0], [26.8, 1743.0], [26.9, 1751.0], [27.0, 1758.0], [27.1, 1769.0], [27.2, 1779.0], [27.3, 1790.0], [27.4, 1793.0], [27.5, 1801.0], [27.6, 1805.0], [27.7, 1813.0], [27.8, 1825.0], [27.9, 1830.0], [28.0, 1837.0], [28.1, 1843.0], [28.2, 1849.0], [28.3, 1868.0], [28.4, 1873.0], [28.5, 1887.0], [28.6, 1894.0], [28.7, 1900.0], [28.8, 1904.0], [28.9, 1920.0], [29.0, 1940.0], [29.1, 1957.0], [29.2, 1975.0], [29.3, 1995.0], [29.4, 1999.0], [29.5, 2012.0], [29.6, 2044.0], [29.7, 2052.0], [29.8, 2063.0], [29.9, 2068.0], [30.0, 2073.0], [30.1, 2085.0], [30.2, 2097.0], [30.3, 2109.0], [30.4, 2120.0], [30.5, 2126.0], [30.6, 2131.0], [30.7, 2137.0], [30.8, 2149.0], [30.9, 2173.0], [31.0, 2181.0], [31.1, 2192.0], [31.2, 2205.0], [31.3, 2207.0], [31.4, 2212.0], [31.5, 2236.0], [31.6, 2242.0], [31.7, 2256.0], [31.8, 2262.0], [31.9, 2271.0], [32.0, 2282.0], [32.1, 2293.0], [32.2, 2312.0], [32.3, 2319.0], [32.4, 2329.0], [32.5, 2342.0], [32.6, 2374.0], [32.7, 2383.0], [32.8, 2398.0], [32.9, 2403.0], [33.0, 2406.0], [33.1, 2422.0], [33.2, 2447.0], [33.3, 2454.0], [33.4, 2487.0], [33.5, 2492.0], [33.6, 2501.0], [33.7, 2506.0], [33.8, 2509.0], [33.9, 2529.0], [34.0, 2538.0], [34.1, 2547.0], [34.2, 2585.0], [34.3, 2590.0], [34.4, 2607.0], [34.5, 2622.0], [34.6, 2643.0], [34.7, 2660.0], [34.8, 2666.0], [34.9, 2668.0], [35.0, 2684.0], [35.1, 2691.0], [35.2, 2693.0], [35.3, 2703.0], [35.4, 2709.0], [35.5, 2716.0], [35.6, 2737.0], [35.7, 2739.0], [35.8, 2767.0], [35.9, 2769.0], [36.0, 2778.0], [36.1, 2788.0], [36.2, 2793.0], [36.3, 2802.0], [36.4, 2808.0], [36.5, 2817.0], [36.6, 2850.0], [36.7, 2874.0], [36.8, 2878.0], [36.9, 2892.0], [37.0, 2897.0], [37.1, 2922.0], [37.2, 2940.0], [37.3, 2965.0], [37.4, 2989.0], [37.5, 3034.0], [37.6, 3074.0], [37.7, 3079.0], [37.8, 3080.0], [37.9, 3099.0], [38.0, 3103.0], [38.1, 3115.0], [38.2, 3178.0], [38.3, 3186.0], [38.4, 3200.0], [38.5, 3225.0], [38.6, 3233.0], [38.7, 3278.0], [38.8, 3284.0], [38.9, 3294.0], [39.0, 3309.0], [39.1, 3317.0], [39.2, 3353.0], [39.3, 3358.0], [39.4, 3381.0], [39.5, 3388.0], [39.6, 3390.0], [39.7, 3395.0], [39.8, 3416.0], [39.9, 3475.0], [40.0, 3497.0], [40.1, 3500.0], [40.2, 3504.0], [40.3, 3513.0], [40.4, 3523.0], [40.5, 3537.0], [40.6, 3582.0], [40.7, 3591.0], [40.8, 3610.0], [40.9, 3622.0], [41.0, 3662.0], [41.1, 3676.0], [41.2, 3684.0], [41.3, 3687.0], [41.4, 3698.0], [41.5, 3707.0], [41.6, 3718.0], [41.7, 3739.0], [41.8, 3786.0], [41.9, 3810.0], [42.0, 3825.0], [42.1, 3843.0], [42.2, 3863.0], [42.3, 3871.0], [42.4, 3881.0], [42.5, 3887.0], [42.6, 3892.0], [42.7, 3945.0], [42.8, 3964.0], [42.9, 3984.0], [43.0, 4018.0], [43.1, 4059.0], [43.2, 4083.0], [43.3, 4092.0], [43.4, 4118.0], [43.5, 4133.0], [43.6, 4150.0], [43.7, 4183.0], [43.8, 4196.0], [43.9, 4203.0], [44.0, 4231.0], [44.1, 4268.0], [44.2, 4276.0], [44.3, 4294.0], [44.4, 4297.0], [44.5, 4300.0], [44.6, 4310.0], [44.7, 4324.0], [44.8, 4378.0], [44.9, 4389.0], [45.0, 4403.0], [45.1, 4430.0], [45.2, 4436.0], [45.3, 4453.0], [45.4, 4487.0], [45.5, 4492.0], [45.6, 4522.0], [45.7, 4534.0], [45.8, 4552.0], [45.9, 4582.0], [46.0, 4599.0], [46.1, 4611.0], [46.2, 4680.0], [46.3, 4694.0], [46.4, 4708.0], [46.5, 4718.0], [46.6, 4722.0], [46.7, 4733.0], [46.8, 4741.0], [46.9, 4785.0], [47.0, 4800.0], [47.1, 4808.0], [47.2, 4830.0], [47.3, 4847.0], [47.4, 4869.0], [47.5, 4897.0], [47.6, 4921.0], [47.7, 4924.0], [47.8, 4979.0], [47.9, 5007.0], [48.0, 5032.0], [48.1, 5086.0], [48.2, 5089.0], [48.3, 5103.0], [48.4, 5114.0], [48.5, 5145.0], [48.6, 5165.0], [48.7, 5187.0], [48.8, 5240.0], [48.9, 5284.0], [49.0, 5294.0], [49.1, 5324.0], [49.2, 5382.0], [49.3, 5384.0], [49.4, 5404.0], [49.5, 5411.0], [49.6, 5416.0], [49.7, 5432.0], [49.8, 5452.0], [49.9, 5483.0], [50.0, 5501.0], [50.1, 5512.0], [50.2, 5560.0], [50.3, 5574.0], [50.4, 5626.0], [50.5, 5632.0], [50.6, 5665.0], [50.7, 5678.0], [50.8, 5688.0], [50.9, 5716.0], [51.0, 5747.0], [51.1, 5769.0], [51.2, 5792.0], [51.3, 5818.0], [51.4, 5825.0], [51.5, 5869.0], [51.6, 5911.0], [51.7, 5922.0], [51.8, 5933.0], [51.9, 5954.0], [52.0, 5973.0], [52.1, 5993.0], [52.2, 6007.0], [52.3, 6054.0], [52.4, 6063.0], [52.5, 6079.0], [52.6, 6085.0], [52.7, 6098.0], [52.8, 6120.0], [52.9, 6197.0], [53.0, 6198.0], [53.1, 6223.0], [53.2, 6236.0], [53.3, 6283.0], [53.4, 6339.0], [53.5, 6374.0], [53.6, 6383.0], [53.7, 6396.0], [53.8, 6420.0], [53.9, 6450.0], [54.0, 6470.0], [54.1, 6477.0], [54.2, 6540.0], [54.3, 6560.0], [54.4, 6594.0], [54.5, 6598.0], [54.6, 6613.0], [54.7, 6650.0], [54.8, 6680.0], [54.9, 6700.0], [55.0, 6739.0], [55.1, 6762.0], [55.2, 6809.0], [55.3, 6882.0], [55.4, 6914.0], [55.5, 6960.0], [55.6, 6996.0], [55.7, 7062.0], [55.8, 7122.0], [55.9, 7154.0], [56.0, 7182.0], [56.1, 7189.0], [56.2, 7199.0], [56.3, 7239.0], [56.4, 7253.0], [56.5, 7261.0], [56.6, 7302.0], [56.7, 7310.0], [56.8, 7358.0], [56.9, 7380.0], [57.0, 7397.0], [57.1, 7425.0], [57.2, 7460.0], [57.3, 7463.0], [57.4, 7512.0], [57.5, 7520.0], [57.6, 7573.0], [57.7, 7591.0], [57.8, 7602.0], [57.9, 7678.0], [58.0, 7686.0], [58.1, 7692.0], [58.2, 7743.0], [58.3, 7786.0], [58.4, 7805.0], [58.5, 7826.0], [58.6, 7877.0], [58.7, 7889.0], [58.8, 7938.0], [58.9, 7957.0], [59.0, 7980.0], [59.1, 7988.0], [59.2, 8011.0], [59.3, 8016.0], [59.4, 8020.0], [59.5, 8172.0], [59.6, 8191.0], [59.7, 8204.0], [59.8, 8216.0], [59.9, 8268.0], [60.0, 8302.0], [60.1, 8315.0], [60.2, 8338.0], [60.3, 8402.0], [60.4, 8427.0], [60.5, 8496.0], [60.6, 8512.0], [60.7, 8513.0], [60.8, 8571.0], [60.9, 8594.0], [61.0, 8605.0], [61.1, 8637.0], [61.2, 8664.0], [61.3, 8702.0], [61.4, 8721.0], [61.5, 8733.0], [61.6, 8774.0], [61.7, 8831.0], [61.8, 8843.0], [61.9, 8903.0], [62.0, 8992.0], [62.1, 9010.0], [62.2, 9021.0], [62.3, 9038.0], [62.4, 9101.0], [62.5, 9112.0], [62.6, 9122.0], [62.7, 9156.0], [62.8, 9167.0], [62.9, 9188.0], [63.0, 9224.0], [63.1, 9259.0], [63.2, 9290.0], [63.3, 9305.0], [63.4, 9321.0], [63.5, 9348.0], [63.6, 9425.0], [63.7, 9470.0], [63.8, 9543.0], [63.9, 9582.0], [64.0, 9597.0], [64.1, 9599.0], [64.2, 9614.0], [64.3, 9688.0], [64.4, 9724.0], [64.5, 9743.0], [64.6, 9788.0], [64.7, 9807.0], [64.8, 9840.0], [64.9, 9867.0], [65.0, 9887.0], [65.1, 9964.0], [65.2, 9986.0], [65.3, 10009.0], [65.4, 10067.0], [65.5, 10078.0], [65.6, 10095.0], [65.7, 10116.0], [65.8, 10174.0], [65.9, 10202.0], [66.0, 10239.0], [66.1, 10280.0], [66.2, 10287.0], [66.3, 10307.0], [66.4, 10330.0], [66.5, 10371.0], [66.6, 10392.0], [66.7, 10407.0], [66.8, 10466.0], [66.9, 10502.0], [67.0, 10588.0], [67.1, 10611.0], [67.2, 10617.0], [67.3, 10646.0], [67.4, 10734.0], [67.5, 10754.0], [67.6, 10758.0], [67.7, 10785.0], [67.8, 10859.0], [67.9, 10897.0], [68.0, 10984.0], [68.1, 10995.0], [68.2, 11009.0], [68.3, 11113.0], [68.4, 11156.0], [68.5, 11192.0], [68.6, 11210.0], [68.7, 11231.0], [68.8, 11263.0], [68.9, 11294.0], [69.0, 11313.0], [69.1, 11393.0], [69.2, 11473.0], [69.3, 11476.0], [69.4, 11512.0], [69.5, 11601.0], [69.6, 11660.0], [69.7, 11683.0], [69.8, 11752.0], [69.9, 11802.0], [70.0, 11829.0], [70.1, 11863.0], [70.2, 11877.0], [70.3, 11901.0], [70.4, 11926.0], [70.5, 11974.0], [70.6, 11992.0], [70.7, 12014.0], [70.8, 12070.0], [70.9, 12078.0], [71.0, 12116.0], [71.1, 12192.0], [71.2, 12262.0], [71.3, 12306.0], [71.4, 12336.0], [71.5, 12402.0], [71.6, 12412.0], [71.7, 12482.0], [71.8, 12510.0], [71.9, 12621.0], [72.0, 12675.0], [72.1, 12680.0], [72.2, 12717.0], [72.3, 12806.0], [72.4, 12850.0], [72.5, 12887.0], [72.6, 12926.0], [72.7, 12988.0], [72.8, 13016.0], [72.9, 13048.0], [73.0, 13099.0], [73.1, 13142.0], [73.2, 13160.0], [73.3, 13172.0], [73.4, 13192.0], [73.5, 13211.0], [73.6, 13286.0], [73.7, 13305.0], [73.8, 13317.0], [73.9, 13418.0], [74.0, 13421.0], [74.1, 13455.0], [74.2, 13492.0], [74.3, 13513.0], [74.4, 13584.0], [74.5, 13627.0], [74.6, 13646.0], [74.7, 13690.0], [74.8, 13716.0], [74.9, 13730.0], [75.0, 13776.0], [75.1, 13783.0], [75.2, 13874.0], [75.3, 13886.0], [75.4, 13895.0], [75.5, 13990.0], [75.6, 14015.0], [75.7, 14023.0], [75.8, 14111.0], [75.9, 14149.0], [76.0, 14194.0], [76.1, 14269.0], [76.2, 14290.0], [76.3, 14301.0], [76.4, 14314.0], [76.5, 14348.0], [76.6, 14408.0], [76.7, 14417.0], [76.8, 14499.0], [76.9, 14592.0], [77.0, 14655.0], [77.1, 14711.0], [77.2, 14751.0], [77.3, 14792.0], [77.4, 14888.0], [77.5, 15008.0], [77.6, 15062.0], [77.7, 15096.0], [77.8, 15102.0], [77.9, 15116.0], [78.0, 15130.0], [78.1, 15203.0], [78.2, 15233.0], [78.3, 15286.0], [78.4, 15310.0], [78.5, 15377.0], [78.6, 15417.0], [78.7, 15476.0], [78.8, 15500.0], [78.9, 15575.0], [79.0, 15611.0], [79.1, 15630.0], [79.2, 15657.0], [79.3, 15676.0], [79.4, 15693.0], [79.5, 15714.0], [79.6, 15810.0], [79.7, 15832.0], [79.8, 16008.0], [79.9, 16037.0], [80.0, 16091.0], [80.1, 16103.0], [80.2, 16228.0], [80.3, 16291.0], [80.4, 16328.0], [80.5, 16387.0], [80.6, 16415.0], [80.7, 16470.0], [80.8, 16543.0], [80.9, 16566.0], [81.0, 16673.0], [81.1, 16693.0], [81.2, 16705.0], [81.3, 16771.0], [81.4, 16857.0], [81.5, 16921.0], [81.6, 16999.0], [81.7, 17141.0], [81.8, 17192.0], [81.9, 17219.0], [82.0, 17232.0], [82.1, 17290.0], [82.2, 17396.0], [82.3, 17439.0], [82.4, 17512.0], [82.5, 17551.0], [82.6, 17590.0], [82.7, 17707.0], [82.8, 17745.0], [82.9, 17756.0], [83.0, 17876.0], [83.1, 17949.0], [83.2, 18004.0], [83.3, 18113.0], [83.4, 18186.0], [83.5, 18254.0], [83.6, 18306.0], [83.7, 18480.0], [83.8, 18604.0], [83.9, 18621.0], [84.0, 18707.0], [84.1, 18731.0], [84.2, 18782.0], [84.3, 18889.0], [84.4, 18913.0], [84.5, 18994.0], [84.6, 19171.0], [84.7, 19217.0], [84.8, 19294.0], [84.9, 19395.0], [85.0, 19480.0], [85.1, 19608.0], [85.2, 19701.0], [85.3, 19759.0], [85.4, 19819.0], [85.5, 19833.0], [85.6, 19880.0], [85.7, 19911.0], [85.8, 19935.0], [85.9, 20097.0], [86.0, 20288.0], [86.1, 20338.0], [86.2, 20385.0], [86.3, 20431.0], [86.4, 20591.0], [86.5, 20627.0], [86.6, 20676.0], [86.7, 20699.0], [86.8, 20722.0], [86.9, 20795.0], [87.0, 20824.0], [87.1, 20886.0], [87.2, 20981.0], [87.3, 21087.0], [87.4, 21103.0], [87.5, 21208.0], [87.6, 21221.0], [87.7, 21270.0], [87.8, 21317.0], [87.9, 21381.0], [88.0, 21482.0], [88.1, 21514.0], [88.2, 21559.0], [88.3, 21779.0], [88.4, 21802.0], [88.5, 21883.0], [88.6, 22100.0], [88.7, 22138.0], [88.8, 22237.0], [88.9, 22288.0], [89.0, 22346.0], [89.1, 22493.0], [89.2, 22522.0], [89.3, 22586.0], [89.4, 22703.0], [89.5, 22751.0], [89.6, 22782.0], [89.7, 22876.0], [89.8, 22949.0], [89.9, 23003.0], [90.0, 23014.0], [90.1, 23150.0], [90.2, 23187.0], [90.3, 23263.0], [90.4, 23404.0], [90.5, 23428.0], [90.6, 23481.0], [90.7, 23504.0], [90.8, 23515.0], [90.9, 23550.0], [91.0, 23616.0], [91.1, 23703.0], [91.2, 23749.0], [91.3, 23941.0], [91.4, 23992.0], [91.5, 24105.0], [91.6, 24275.0], [91.7, 24297.0], [91.8, 24391.0], [91.9, 24407.0], [92.0, 24525.0], [92.1, 24540.0], [92.2, 24554.0], [92.3, 24607.0], [92.4, 24685.0], [92.5, 24701.0], [92.6, 24966.0], [92.7, 24988.0], [92.8, 25105.0], [92.9, 25137.0], [93.0, 25298.0], [93.1, 25335.0], [93.2, 25385.0], [93.3, 25410.0], [93.4, 25510.0], [93.5, 25685.0], [93.6, 25766.0], [93.7, 25784.0], [93.8, 25850.0], [93.9, 26057.0], [94.0, 26149.0], [94.1, 26189.0], [94.2, 26216.0], [94.3, 26238.0], [94.4, 26298.0], [94.5, 26360.0], [94.6, 26408.0], [94.7, 26449.0], [94.8, 26511.0], [94.9, 26612.0], [95.0, 26627.0], [95.1, 26693.0], [95.2, 26709.0], [95.3, 26794.0], [95.4, 26804.0], [95.5, 26851.0], [95.6, 26880.0], [95.7, 26957.0], [95.8, 26989.0], [95.9, 27011.0], [96.0, 27091.0], [96.1, 27116.0], [96.2, 27184.0], [96.3, 27312.0], [96.4, 27406.0], [96.5, 27466.0], [96.6, 27524.0], [96.7, 27569.0], [96.8, 27628.0], [96.9, 27638.0], [97.0, 27709.0], [97.1, 27784.0], [97.2, 27873.0], [97.3, 28003.0], [97.4, 28075.0], [97.5, 28098.0], [97.6, 28154.0], [97.7, 28187.0], [97.8, 28275.0], [97.9, 28310.0], [98.0, 28379.0], [98.1, 28429.0], [98.2, 28507.0], [98.3, 28667.0], [98.4, 28792.0], [98.5, 28882.0], [98.6, 28907.0], [98.7, 28962.0], [98.8, 29001.0], [98.9, 29166.0], [99.0, 29214.0], [99.1, 29287.0], [99.2, 29427.0], [99.3, 29590.0], [99.4, 29624.0], [99.5, 29983.0], [99.6, 30116.0], [99.7, 30462.0], [99.8, 30814.0], [99.9, 32153.0]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 66.0, "series": [{"data": [[100.0, 22.0], [200.0, 30.0], [300.0, 33.0], [400.0, 53.0], [500.0, 62.0], [600.0, 66.0], [700.0, 64.0], [800.0, 43.0], [900.0, 41.0], [1000.0, 47.0], [1100.0, 38.0], [1200.0, 27.0], [1300.0, 32.0], [1400.0, 28.0], [1500.0, 23.0], [1600.0, 22.0], [1700.0, 21.0], [1800.0, 29.0], [1900.0, 18.0], [2000.0, 20.0], [2100.0, 21.0], [2200.0, 23.0], [2300.0, 17.0], [2400.0, 17.0], [2500.0, 20.0], [2600.0, 20.0], [2700.0, 25.0], [2800.0, 17.0], [2900.0, 11.0], [3000.0, 11.0], [3100.0, 11.0], [3300.0, 20.0], [3200.0, 12.0], [3400.0, 8.0], [3500.0, 16.0], [3600.0, 16.0], [3700.0, 10.0], [3800.0, 18.0], [3900.0, 8.0], [4000.0, 9.0], [4200.0, 15.0], [4100.0, 12.0], [4300.0, 12.0], [4400.0, 13.0], [4500.0, 12.0], [4600.0, 7.0], [4700.0, 16.0], [4800.0, 13.0], [5000.0, 9.0], [5100.0, 11.0], [4900.0, 8.0], [5200.0, 7.0], [5300.0, 8.0], [5600.0, 11.0], [5400.0, 15.0], [5500.0, 9.0], [5800.0, 6.0], [5700.0, 11.0], [5900.0, 15.0], [6000.0, 13.0], [6100.0, 7.0], [6200.0, 8.0], [6300.0, 9.0], [6500.0, 9.0], [6600.0, 8.0], [6400.0, 10.0], [6900.0, 6.0], [6700.0, 8.0], [6800.0, 4.0], [7000.0, 3.0], [7100.0, 11.0], [7400.0, 7.0], [7200.0, 9.0], [7300.0, 11.0], [7600.0, 9.0], [7500.0, 10.0], [7900.0, 11.0], [7800.0, 9.0], [7700.0, 5.0], [8000.0, 6.0], [8100.0, 4.0], [8200.0, 9.0], [8300.0, 7.0], [8600.0, 8.0], [8700.0, 9.0], [8500.0, 9.0], [8400.0, 6.0], [9200.0, 8.0], [8900.0, 4.0], [9100.0, 13.0], [9000.0, 7.0], [8800.0, 6.0], [9600.0, 5.0], [9700.0, 8.0], [9500.0, 9.0], [9300.0, 7.0], [9400.0, 5.0], [10100.0, 6.0], [10000.0, 9.0], [9800.0, 8.0], [10200.0, 9.0], [9900.0, 6.0], [10500.0, 5.0], [10700.0, 9.0], [10400.0, 5.0], [10300.0, 9.0], [10600.0, 6.0], [11000.0, 3.0], [10800.0, 5.0], [11200.0, 10.0], [11100.0, 7.0], [10900.0, 5.0], [11300.0, 4.0], [11400.0, 6.0], [11600.0, 6.0], [11700.0, 4.0], [11500.0, 2.0], [11800.0, 9.0], [11900.0, 9.0], [12100.0, 4.0], [12000.0, 7.0], [12200.0, 4.0], [12700.0, 4.0], [12400.0, 5.0], [12300.0, 5.0], [12600.0, 6.0], [12500.0, 4.0], [13200.0, 6.0], [13300.0, 5.0], [12900.0, 4.0], [12800.0, 6.0], [13000.0, 7.0], [13100.0, 10.0], [13600.0, 7.0], [13700.0, 9.0], [13400.0, 9.0], [13500.0, 4.0], [13800.0, 7.0], [14100.0, 7.0], [14300.0, 7.0], [14200.0, 5.0], [13900.0, 3.0], [14000.0, 6.0], [14500.0, 2.0], [14600.0, 3.0], [14700.0, 6.0], [14400.0, 6.0], [14800.0, 3.0], [15100.0, 8.0], [15000.0, 6.0], [15300.0, 5.0], [15200.0, 7.0], [14900.0, 1.0], [15600.0, 10.0], [15700.0, 4.0], [15400.0, 5.0], [15500.0, 5.0], [15800.0, 4.0], [15900.0, 1.0], [16000.0, 6.0], [16100.0, 3.0], [16300.0, 4.0], [16200.0, 4.0], [16600.0, 4.0], [16400.0, 7.0], [17200.0, 7.0], [16800.0, 3.0], [17000.0, 1.0], [17400.0, 4.0], [18400.0, 3.0], [17800.0, 3.0], [18200.0, 3.0], [17600.0, 2.0], [18000.0, 3.0], [19200.0, 4.0], [19400.0, 3.0], [18600.0, 4.0], [18800.0, 4.0], [19800.0, 6.0], [20400.0, 2.0], [19600.0, 2.0], [20000.0, 1.0], [20200.0, 2.0], [20800.0, 6.0], [21200.0, 7.0], [21000.0, 3.0], [20600.0, 7.0], [21400.0, 2.0], [22400.0, 2.0], [21800.0, 3.0], [21600.0, 1.0], [22200.0, 4.0], [22600.0, 2.0], [23400.0, 7.0], [23000.0, 4.0], [23200.0, 1.0], [22800.0, 3.0], [24400.0, 4.0], [23600.0, 3.0], [24200.0, 3.0], [23800.0, 1.0], [24000.0, 1.0], [24600.0, 4.0], [25400.0, 3.0], [25000.0, 2.0], [25200.0, 1.0], [24800.0, 1.0], [26000.0, 3.0], [26400.0, 5.0], [26200.0, 7.0], [25800.0, 2.0], [26600.0, 6.0], [25600.0, 1.0], [26800.0, 8.0], [27600.0, 5.0], [27400.0, 4.0], [27000.0, 5.0], [28600.0, 3.0], [28000.0, 6.0], [28400.0, 1.0], [27800.0, 2.0], [28200.0, 2.0], [29000.0, 3.0], [29200.0, 4.0], [29400.0, 2.0], [29600.0, 1.0], [28800.0, 2.0], [30400.0, 2.0], [30000.0, 1.0], [30800.0, 1.0], [32200.0, 1.0], [16500.0, 4.0], [16700.0, 5.0], [17300.0, 3.0], [17100.0, 3.0], [16900.0, 4.0], [17500.0, 5.0], [17700.0, 5.0], [18300.0, 2.0], [18100.0, 4.0], [17900.0, 3.0], [18900.0, 3.0], [19100.0, 4.0], [18700.0, 6.0], [19300.0, 2.0], [19500.0, 1.0], [19900.0, 6.0], [20300.0, 6.0], [19700.0, 5.0], [21100.0, 3.0], [20700.0, 4.0], [20500.0, 2.0], [21300.0, 5.0], [20900.0, 2.0], [21500.0, 4.0], [22500.0, 4.0], [22100.0, 4.0], [22300.0, 3.0], [21900.0, 2.0], [21700.0, 2.0], [22700.0, 6.0], [23100.0, 5.0], [22900.0, 3.0], [23300.0, 2.0], [23500.0, 6.0], [24500.0, 7.0], [23700.0, 4.0], [23900.0, 3.0], [24100.0, 3.0], [24300.0, 3.0], [25500.0, 2.0], [25100.0, 4.0], [24900.0, 4.0], [24700.0, 1.0], [25300.0, 6.0], [25700.0, 5.0], [26100.0, 4.0], [26300.0, 3.0], [26500.0, 2.0], [25900.0, 1.0], [27100.0, 5.0], [26700.0, 5.0], [27300.0, 2.0], [27500.0, 5.0], [26900.0, 5.0], [28500.0, 3.0], [27700.0, 4.0], [28300.0, 5.0], [28100.0, 6.0], [27900.0, 1.0], [28900.0, 5.0], [29300.0, 1.0], [29100.0, 2.0], [29500.0, 3.0], [28700.0, 2.0], [30100.0, 1.0], [29900.0, 2.0], [29700.0, 1.0], [30300.0, 1.0], [30500.0, 1.0], [32100.0, 1.0], [32300.0, 1.0], [31900.0, 1.0]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1789.0, "series": [{"data": [[0.0, 138.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 434.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1789.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 14.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.9473684210526305, "minX": 1.7187309E12, "maxY": 60.0, "series": [{"data": [[1.71873132E12, 53.14693877551019], [1.7187315E12, 43.06730769230769], [1.71873102E12, 17.09132420091323], [1.71873096E12, 9.676229508196723], [1.71873114E12, 31.55932203389832], [1.71873144E12, 60.0], [1.71873108E12, 24.232456140350877], [1.71873126E12, 45.78602620087333], [1.7187312E12, 38.73275862068965], [1.7187309E12, 3.9473684210526305], [1.71873138E12, 59.32758620689654]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7187315E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 422.95, "minX": 1.0, "maxY": 14872.741935483868, "series": [{"data": [[2.0, 422.95], [3.0, 452.64285714285717], [4.0, 1354.0256410256409], [5.0, 1260.1249999999998], [6.0, 1241.6], [7.0, 1573.9729729729731], [8.0, 1882.939393939394], [9.0, 1962.225], [10.0, 2324.2222222222217], [11.0, 3087.242424242424], [12.0, 2795.323529411765], [13.0, 4065.7777777777783], [14.0, 3508.387096774194], [15.0, 3951.833333333334], [16.0, 5124.533333333334], [17.0, 4144.648648648648], [18.0, 3755.2000000000007], [19.0, 5406.030303030303], [20.0, 5005.030303030304], [21.0, 5306.333333333333], [22.0, 5574.1935483870975], [23.0, 5398.764705882353], [24.0, 5254.333333333335], [25.0, 7020.333333333333], [26.0, 6701.806451612903], [27.0, 6828.235294117646], [28.0, 6604.971428571429], [29.0, 8827.115384615385], [30.0, 6467.59375], [31.0, 8604.083333333336], [32.0, 7177.882352941175], [33.0, 6932.777777777777], [34.0, 8081.810810810812], [35.0, 7867.551724137932], [36.0, 9571.02777777778], [37.0, 9288.241379310344], [38.0, 9763.142857142853], [39.0, 8585.342857142856], [40.0, 10334.057142857142], [41.0, 10362.545454545456], [42.0, 8925.621621621623], [43.0, 10911.214285714286], [44.0, 11571.970588235292], [45.0, 9449.657894736842], [46.0, 11534.074074074073], [47.0, 10886.972222222223], [48.0, 12115.351351351352], [49.0, 11934.692307692307], [50.0, 12933.850000000002], [51.0, 11999.906249999996], [52.0, 12573.5], [53.0, 13743.09090909091], [54.0, 13086.124999999998], [55.0, 10863.14705882353], [56.0, 12925.051282051285], [57.0, 12832.518518518518], [58.0, 14872.741935483868], [59.0, 12837.925], [60.0, 14127.424379232507], [1.0, 1320.6999999999998]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}, {"data": [[36.06400000000001, 8662.426526315769]], "isOverall": false, "label": "TitleBasics by primary_title-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 60.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 296.48333333333335, "minX": 1.7187309E12, "maxY": 83305.41666666667, "series": [{"data": [[1.71873132E12, 20768.233333333334], [1.7187315E12, 17960.916666666668], [1.71873102E12, 18541.2], [1.71873096E12, 20875.766666666666], [1.71873114E12, 20386.033333333333], [1.71873144E12, 83305.41666666667], [1.71873108E12, 19782.9], [1.71873126E12, 19554.1], [1.7187312E12, 19681.7], [1.7187309E12, 13289.9], [1.71873138E12, 19611.116666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71873132E12, 691.6], [1.7187315E12, 296.48333333333335], [1.71873102E12, 615.0333333333333], [1.71873096E12, 686.8666666666667], [1.71873114E12, 663.6], [1.71873144E12, 718.55], [1.71873108E12, 643.1166666666667], [1.71873126E12, 644.4833333333333], [1.7187312E12, 650.5666666666667], [1.7187309E12, 429.4166666666667], [1.71873138E12, 652.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7187315E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 644.0855263157896, "minX": 1.7187309E12, "maxY": 15600.394230769232, "series": [{"data": [[1.71873132E12, 12420.865306122452], [1.7187315E12, 15600.394230769232], [1.71873102E12, 3936.283105022831], [1.71873096E12, 1963.4918032786893], [1.71873114E12, 7321.864406779661], [1.71873144E12, 13753.366141732291], [1.71873108E12, 5735.166666666668], [1.71873126E12, 10898.79475982533], [1.7187312E12, 9054.87068965517], [1.7187309E12, 644.0855263157896], [1.71873138E12, 14410.275862068964]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7187315E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 643.1644736842106, "minX": 1.7187309E12, "maxY": 15594.846153846152, "series": [{"data": [[1.71873132E12, 12418.922448979589], [1.7187315E12, 15594.846153846152], [1.71873102E12, 3935.3333333333353], [1.71873096E12, 1962.6270491803284], [1.71873114E12, 7321.076271186441], [1.71873144E12, 13738.854330708667], [1.71873108E12, 5734.285087719302], [1.71873126E12, 10898.021834061139], [1.7187312E12, 9054.008620689654], [1.7187309E12, 643.1644736842106], [1.71873138E12, 14409.456896551734]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7187315E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.5000000000000002, "minX": 1.7187309E12, "maxY": 8.952586206896546, "series": [{"data": [[1.71873132E12, 7.612244897959185], [1.7187315E12, 8.249999999999998], [1.71873102E12, 3.2009132420091344], [1.71873096E12, 1.897540983606559], [1.71873114E12, 4.406779661016949], [1.71873144E12, 6.381889763779525], [1.71873108E12, 4.026315789473686], [1.71873126E12, 7.043668122270742], [1.7187312E12, 5.431034482758621], [1.7187309E12, 1.5000000000000002], [1.71873138E12, 8.952586206896546]], "isOverall": false, "label": "TitleBasics by primary_title", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7187315E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 107.0, "minX": 1.7187309E12, "maxY": 32387.0, "series": [{"data": [[1.71873132E12, 28932.0], [1.7187315E12, 31909.0], [1.71873102E12, 11009.0], [1.71873096E12, 7086.0], [1.71873114E12, 16785.0], [1.71873144E12, 32387.0], [1.71873108E12, 14592.0], [1.71873126E12, 24554.0], [1.7187312E12, 20899.0], [1.7187309E12, 2793.0], [1.71873138E12, 32153.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71873132E12, 430.0], [1.7187315E12, 616.0], [1.71873102E12, 304.0], [1.71873096E12, 107.0], [1.71873114E12, 455.0], [1.71873144E12, 464.0], [1.71873108E12, 292.0], [1.71873126E12, 417.0], [1.7187312E12, 428.0], [1.7187309E12, 114.0], [1.71873138E12, 445.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71873132E12, 24436.600000000002], [1.7187315E12, 28008.800000000003], [1.71873102E12, 8702.0], [1.71873096E12, 4721.5], [1.71873114E12, 15289.0], [1.71873144E12, 28712.5], [1.71873108E12, 12000.6], [1.71873126E12, 21285.0], [1.7187312E12, 17864.3], [1.7187309E12, 1280.5000000000005], [1.71873138E12, 27620.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71873132E12, 27866.599999999988], [1.7187315E12, 31869.699999999997], [1.71873102E12, 10705.000000000002], [1.71873096E12, 6606.25], [1.71873114E12, 16736.88], [1.71873144E12, 31653.60999999999], [1.71873108E12, 14028.940000000004], [1.71873126E12, 24431.5], [1.7187312E12, 20735.849999999995], [1.7187309E12, 2498.8499999999995], [1.71873138E12, 29521.079999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71873132E12, 11867.0], [1.7187315E12, 15173.0], [1.71873102E12, 3186.0], [1.71873096E12, 1578.0], [1.71873114E12, 6367.5], [1.71873144E12, 13605.5], [1.71873108E12, 4909.5], [1.71873126E12, 10284.0], [1.7187312E12, 8122.5], [1.7187309E12, 552.0], [1.71873138E12, 13376.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71873132E12, 25929.799999999996], [1.7187315E12, 29167.949999999997], [1.71873102E12, 9259.0], [1.71873096E12, 5908.75], [1.71873114E12, 15702.75], [1.71873144E12, 29564.7], [1.71873108E12, 12898.55], [1.71873126E12, 22522.5], [1.7187312E12, 18941.35], [1.7187309E12, 1448.7499999999993], [1.71873138E12, 28287.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7187315E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 884.5, "minX": 1.0, "maxY": 10858.0, "series": [{"data": [[2.0, 4918.0], [1.0, 3919.0], [4.0, 4818.0], [8.0, 9132.5], [9.0, 6507.0], [5.0, 5384.5], [10.0, 2683.5], [11.0, 10858.0], [3.0, 4718.0], [6.0, 5770.5], [7.0, 8922.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 884.5], [4.0, 1045.0], [2.0, 941.0], [5.0, 889.0], [11.0, 1008.0], [3.0, 1009.0], [6.0, 909.0], [7.0, 976.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 633.0, "minX": 1.0, "maxY": 10857.0, "series": [{"data": [[2.0, 4918.0], [1.0, 3917.0], [4.0, 4818.0], [8.0, 9132.5], [9.0, 6506.5], [5.0, 5382.5], [10.0, 2682.5], [11.0, 10857.0], [3.0, 4718.0], [6.0, 5768.5], [7.0, 8921.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 641.0], [4.0, 693.0], [2.0, 668.0], [5.0, 646.0], [11.0, 755.0], [3.0, 726.5], [6.0, 641.0], [7.0, 633.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.7187309E12, "maxY": 4.233333333333333, "series": [{"data": [[1.71873132E12, 4.233333333333333], [1.7187315E12, 0.8], [1.71873102E12, 3.783333333333333], [1.71873096E12, 4.216666666666667], [1.71873114E12, 4.083333333333333], [1.71873144E12, 4.216666666666667], [1.71873108E12, 3.8666666666666667], [1.71873126E12, 3.9], [1.7187312E12, 4.0], [1.7187309E12, 2.6], [1.71873138E12, 3.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7187315E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.7187309E12, "maxY": 4.083333333333333, "series": [{"data": [[1.71873132E12, 4.083333333333333], [1.7187315E12, 1.7], [1.71873102E12, 3.65], [1.71873096E12, 4.066666666666666], [1.71873114E12, 3.933333333333333], [1.71873144E12, 4.033333333333333], [1.71873108E12, 3.8], [1.71873126E12, 3.816666666666667], [1.7187312E12, 3.8666666666666667], [1.7187309E12, 2.533333333333333], [1.71873138E12, 3.8666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7187315E12, 0.03333333333333333], [1.71873144E12, 0.2]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7187315E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.7187309E12, "maxY": 4.083333333333333, "series": [{"data": [[1.71873132E12, 4.083333333333333], [1.7187315E12, 1.7], [1.71873102E12, 3.65], [1.71873096E12, 4.066666666666666], [1.71873114E12, 3.933333333333333], [1.71873144E12, 4.033333333333333], [1.71873108E12, 3.8], [1.71873126E12, 3.816666666666667], [1.7187312E12, 3.8666666666666667], [1.7187309E12, 2.533333333333333], [1.71873138E12, 3.8666666666666667]], "isOverall": false, "label": "TitleBasics by primary_title-success", "isController": false}, {"data": [[1.7187315E12, 0.03333333333333333], [1.71873144E12, 0.2]], "isOverall": false, "label": "TitleBasics by primary_title-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7187315E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.7187309E12, "maxY": 4.083333333333333, "series": [{"data": [[1.71873132E12, 4.083333333333333], [1.7187315E12, 1.7], [1.71873102E12, 3.65], [1.71873096E12, 4.066666666666666], [1.71873114E12, 3.933333333333333], [1.71873144E12, 4.033333333333333], [1.71873108E12, 3.8], [1.71873126E12, 3.816666666666667], [1.7187312E12, 3.8666666666666667], [1.7187309E12, 2.533333333333333], [1.71873138E12, 3.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7187315E12, 0.03333333333333333], [1.71873144E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7187315E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

